// <auto-generated/>
#nullable enable

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "6c64fd97abd301f2df3bc4c42102abac"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment> logger;

        private PyObject __func_tuple_1;
        private PyObject __func_tuple_2;
        private PyObject __func_tuple_3;
        private PyObject __func_tuple_4;
        private PyObject __func_tuple_5;
        private PyObject __func_tuple_6;
        private PyObject __func_tuple_7;
        private PyObject __func_tuple_8;
        private PyObject __func_tuple_9;
        private PyObject __func_tuple_10;
        private PyObject __func_tuple_11;
        private PyObject __func_tuple_12;
        private PyObject __func_tuple_13;
        private PyObject __func_tuple_14;
        private PyObject __func_tuple_15;
        private PyObject __func_tuple_16;
        private PyObject __func_tuple_17;

        internal TestClassInternal(ILogger<IPythonEnvironment> logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger.LogDebug("Importing module {ModuleName}", "test");
                module = Import.ImportModule("test");
                this.__func_tuple_1 = module.GetAttr("tuple_1");
                this.__func_tuple_2 = module.GetAttr("tuple_2");
                this.__func_tuple_3 = module.GetAttr("tuple_3");
                this.__func_tuple_4 = module.GetAttr("tuple_4");
                this.__func_tuple_5 = module.GetAttr("tuple_5");
                this.__func_tuple_6 = module.GetAttr("tuple_6");
                this.__func_tuple_7 = module.GetAttr("tuple_7");
                this.__func_tuple_8 = module.GetAttr("tuple_8");
                this.__func_tuple_9 = module.GetAttr("tuple_9");
                this.__func_tuple_10 = module.GetAttr("tuple_10");
                this.__func_tuple_11 = module.GetAttr("tuple_11");
                this.__func_tuple_12 = module.GetAttr("tuple_12");
                this.__func_tuple_13 = module.GetAttr("tuple_13");
                this.__func_tuple_14 = module.GetAttr("tuple_14");
                this.__func_tuple_15 = module.GetAttr("tuple_15");
                this.__func_tuple_16 = module.GetAttr("tuple_16");
                this.__func_tuple_17 = module.GetAttr("tuple_17");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_tuple_1.Dispose();
                this.__func_tuple_2.Dispose();
                this.__func_tuple_3.Dispose();
                this.__func_tuple_4.Dispose();
                this.__func_tuple_5.Dispose();
                this.__func_tuple_6.Dispose();
                this.__func_tuple_7.Dispose();
                this.__func_tuple_8.Dispose();
                this.__func_tuple_9.Dispose();
                this.__func_tuple_10.Dispose();
                this.__func_tuple_11.Dispose();
                this.__func_tuple_12.Dispose();
                this.__func_tuple_13.Dispose();
                this.__func_tuple_14.Dispose();
                this.__func_tuple_15.Dispose();
                this.__func_tuple_16.Dispose();
                this.__func_tuple_17.Dispose();
                // Bind to new functions
                this.__func_tuple_1 = module.GetAttr("tuple_1");
                this.__func_tuple_2 = module.GetAttr("tuple_2");
                this.__func_tuple_3 = module.GetAttr("tuple_3");
                this.__func_tuple_4 = module.GetAttr("tuple_4");
                this.__func_tuple_5 = module.GetAttr("tuple_5");
                this.__func_tuple_6 = module.GetAttr("tuple_6");
                this.__func_tuple_7 = module.GetAttr("tuple_7");
                this.__func_tuple_8 = module.GetAttr("tuple_8");
                this.__func_tuple_9 = module.GetAttr("tuple_9");
                this.__func_tuple_10 = module.GetAttr("tuple_10");
                this.__func_tuple_11 = module.GetAttr("tuple_11");
                this.__func_tuple_12 = module.GetAttr("tuple_12");
                this.__func_tuple_13 = module.GetAttr("tuple_13");
                this.__func_tuple_14 = module.GetAttr("tuple_14");
                this.__func_tuple_15 = module.GetAttr("tuple_15");
                this.__func_tuple_16 = module.GetAttr("tuple_16");
                this.__func_tuple_17 = module.GetAttr("tuple_17");
            }
        }

        public void Dispose()
        {
            logger.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_tuple_1.Dispose();
            this.__func_tuple_2.Dispose();
            this.__func_tuple_3.Dispose();
            this.__func_tuple_4.Dispose();
            this.__func_tuple_5.Dispose();
            this.__func_tuple_6.Dispose();
            this.__func_tuple_7.Dispose();
            this.__func_tuple_8.Dispose();
            this.__func_tuple_9.Dispose();
            this.__func_tuple_10.Dispose();
            this.__func_tuple_11.Dispose();
            this.__func_tuple_12.Dispose();
            this.__func_tuple_13.Dispose();
            this.__func_tuple_14.Dispose();
            this.__func_tuple_15.Dispose();
            this.__func_tuple_16.Dispose();
            this.__func_tuple_17.Dispose();
            module.Dispose();
        }

        public ValueTuple<string> Tuple1(ValueTuple<string> a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_1");
                PyObject __underlyingPythonFunc = this.__func_tuple_1;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<ValueTuple<string>>();
            }
        }

        public (string, string) Tuple2((string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_2");
                PyObject __underlyingPythonFunc = this.__func_tuple_2;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string)>();
            }
        }

        public (string, string, string) Tuple3((string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_3");
                PyObject __underlyingPythonFunc = this.__func_tuple_3;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string)>();
            }
        }

        public (string, string, string, string) Tuple4((string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_4");
                PyObject __underlyingPythonFunc = this.__func_tuple_4;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string)>();
            }
        }

        public (string, string, string, string, string) Tuple5((string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_5");
                PyObject __underlyingPythonFunc = this.__func_tuple_5;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string) Tuple6((string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_6");
                PyObject __underlyingPythonFunc = this.__func_tuple_6;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string) Tuple7((string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_7");
                PyObject __underlyingPythonFunc = this.__func_tuple_7;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string) Tuple8((string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_8");
                PyObject __underlyingPythonFunc = this.__func_tuple_8;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string) Tuple9((string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_9");
                PyObject __underlyingPythonFunc = this.__func_tuple_9;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string, string) Tuple10((string, string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_10");
                PyObject __underlyingPythonFunc = this.__func_tuple_10;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string, string, string) Tuple11((string, string, string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_11");
                PyObject __underlyingPythonFunc = this.__func_tuple_11;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string, string, string, string) Tuple12((string, string, string, string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_12");
                PyObject __underlyingPythonFunc = this.__func_tuple_12;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple13((string, string, string, string, string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_13");
                PyObject __underlyingPythonFunc = this.__func_tuple_13;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple14((string, string, string, string, string, string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_14");
                PyObject __underlyingPythonFunc = this.__func_tuple_14;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple15((string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_15");
                PyObject __underlyingPythonFunc = this.__func_tuple_15;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple16((string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_16");
                PyObject __underlyingPythonFunc = this.__func_tuple_16;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)>();
            }
        }

        public (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple17((string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "tuple_17");
                PyObject __underlyingPythonFunc = this.__func_tuple_17;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)>();
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>tuple_1</c>:
    /// <code><![CDATA[
    /// def tuple_1(a: tuple[str]) -> tuple[str]: ...
    /// ]]></code>
    /// </summary>
    ValueTuple<string> Tuple1(ValueTuple<string> a);

    /// <summary>
    /// Invokes the Python function <c>tuple_2</c>:
    /// <code><![CDATA[
    /// def tuple_2(a: tuple[str, str]) -> tuple[str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string) Tuple2((string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_3</c>:
    /// <code><![CDATA[
    /// def tuple_3(a: tuple[str, str, str]) -> tuple[str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string) Tuple3((string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_4</c>:
    /// <code><![CDATA[
    /// def tuple_4(a: tuple[str, str, str, str]) -> tuple[str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string) Tuple4((string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_5</c>:
    /// <code><![CDATA[
    /// def tuple_5(a: tuple[str, str, str, str, str]) -> tuple[str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string) Tuple5((string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_6</c>:
    /// <code><![CDATA[
    /// def tuple_6(a: tuple[str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string) Tuple6((string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_7</c>:
    /// <code><![CDATA[
    /// def tuple_7(a: tuple[str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string) Tuple7((string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_8</c>:
    /// <code><![CDATA[
    /// def tuple_8(a: tuple[str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string) Tuple8((string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_9</c>:
    /// <code><![CDATA[
    /// def tuple_9(a: tuple[str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string) Tuple9((string, string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_10</c>:
    /// <code><![CDATA[
    /// def tuple_10(a: tuple[str, str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string, string) Tuple10((string, string, string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_11</c>:
    /// <code><![CDATA[
    /// def tuple_11(a: tuple[str, str, str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string, string, string) Tuple11((string, string, string, string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_12</c>:
    /// <code><![CDATA[
    /// def tuple_12(a: tuple[str, str, str, str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string, string, string, string) Tuple12((string, string, string, string, string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_13</c>:
    /// <code><![CDATA[
    /// def tuple_13(a: tuple[str, str, str, str, str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple13((string, string, string, string, string, string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_14</c>:
    /// <code><![CDATA[
    /// def tuple_14(a: tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple14((string, string, string, string, string, string, string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_15</c>:
    /// <code><![CDATA[
    /// def tuple_15(a: tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple15((string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_16</c>:
    /// <code><![CDATA[
    /// def tuple_16(a: tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple16((string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) a);

    /// <summary>
    /// Invokes the Python function <c>tuple_17</c>:
    /// <code><![CDATA[
    /// def tuple_17(a: tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]) -> tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]: ...
    /// ]]></code>
    /// </summary>
    (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) Tuple17((string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string) a);
}
