{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CSnakes - a tool for embedding Python code into .NET projects","text":"<p>CSnakes is a .NET Source Generator and Runtime that you can use to embed Python code and libraries into your C#.NET Solution at a performant, low-level without the need for REST, HTTP, or Microservices.</p> <p>Check out the getting started guide or check out the demo solution to see more.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83e\udd16 Supports .NET 8 and 9  </li> <li>\ud83d\udc0d Supports Python 3.9-3.13  </li> <li>\ud83d\udce6 Supports Virtual Environments and C-Extensions </li> <li>\ud83d\udcbb Supports Windows, macOS, and Linux  </li> <li>\ud83e\uddee Tight integration between NumPy ndarrays and Spans, 2D Spans and TensorSpans (.NET 9) </li> <li>\u26a1 Uses Python's C-API for fast invocation of Python code directly in the .NET process  </li> <li>\ud83e\udde0 Uses Python type hinting to generate function signatures with .NET native types  </li> <li>\ud83e\uddf5 Supports CPython 3.13 \"free-threading\" mode </li> <li>\ud83e\udde9 Supports nested sequence and mapping types (<code>tuple</code>, <code>dict</code>, <code>list</code>)  </li> <li>\ud83c\udff7\ufe0f Supports default values  </li> <li>\ud83d\udd25 Supports Hot Reload of Python code in Visual Studio and supported IDEs  </li> <li>\ud83d\ude80 Supports UV for fast installation of Python packages and dependencies  </li> </ul>"},{"location":"#benefits","title":"Benefits","text":"<ul> <li>Uses native Python type hinting standards to produce clean, readable C# code with minimal boiler plate!</li> <li>Integration between .NET and Python is done at the C-API, meaning strong compatibility between Python versions 3.8-3.13 and .NET 8-9.</li> <li>Integration is low-level and high-performance.</li> <li>CSnakes uses the CPython C-API and is compatible with all Python extensions.</li> <li>Invocation of Python code and libraries is in the same process as .NET</li> </ul>"},{"location":"#example","title":"Example","text":"<p>CSnakes will generate a C#.NET class for any Python file in a project that is tagged as CSharp Analyzer Additional File (see Getting Started). All functions in that class with type annotations will be reflected to callable C# methods and an environment builder added to that module.</p> <p></p>"},{"location":"advanced/advanced-usage/","title":"Advanced Usage","text":"<p>This section covers advanced topics and techniques for using CSnakes in complex scenarios. These topics are designed for users who need to go beyond basic Python integration and require specialized functionality.</p>"},{"location":"advanced/advanced-usage/#topics-covered","title":"Topics Covered","text":""},{"location":"advanced/advanced-usage/#working-with-large-integers","title":"Working with Large Integers","text":"<p>Learn how to handle Python's arbitrary-precision integers using <code>BigInteger</code> in C#. Essential for mathematical computations, cryptography, and working with large numbers that exceed standard integer limits.</p>"},{"location":"advanced/advanced-usage/#free-threading-mode","title":"Free-Threading Mode","text":"<p>Explore Python 3.13's new free-threading mode that removes the Global Interpreter Lock (GIL) limitations. Understand how to enable it, when to use it, and what performance benefits it can provide.</p>"},{"location":"advanced/advanced-usage/#manual-python-integration","title":"Manual Python Integration","text":"<p>Deep dive into calling Python code without the source generator. Learn how to work directly with the CSnakes runtime API for maximum control and flexibility.</p>"},{"location":"advanced/advanced-usage/#hot-reload-support","title":"Hot Reload Support","text":"<p>Take advantage of hot reload functionality to modify Python code during development without restarting your application. Perfect for rapid iteration and debugging.</p>"},{"location":"advanced/advanced-usage/#signal-handler-configuration","title":"Signal Handler Configuration","text":"<p>Understand how Python signal handlers interact with .NET applications and learn when and how to disable them for proper integration with .NET frameworks.</p>"},{"location":"advanced/advanced-usage/#native-aot-support","title":"Native AOT Support","text":"<p>Deploy CSnakes applications with Native AOT compilation for faster startup times and self-contained executables. Learn the requirements, limitations, and best practices.</p>"},{"location":"advanced/advanced-usage/#when-to-use-advanced-features","title":"When to Use Advanced Features","text":""},{"location":"advanced/advanced-usage/#large-integer-handling","title":"Large Integer Handling","text":"<ul> <li>Working with cryptographic operations</li> <li>Mathematical computations requiring arbitrary precision</li> <li>Financial calculations with very large numbers</li> <li>Scientific computing with big data</li> </ul>"},{"location":"advanced/advanced-usage/#free-threading","title":"Free-Threading","text":"<ul> <li>CPU-intensive Python operations</li> <li>Multi-threaded data processing</li> <li>Parallel mathematical computations</li> <li>Scenarios where you need true Python parallelism</li> </ul>"},{"location":"advanced/advanced-usage/#manual-integration","title":"Manual Integration","text":"<ul> <li>Dynamic Python code execution</li> <li>Custom type conversion requirements</li> <li>Advanced error handling scenarios</li> <li>Building abstractions over CSnakes runtime</li> </ul>"},{"location":"advanced/advanced-usage/#hot-reload","title":"Hot Reload","text":"<ul> <li>Rapid development and testing</li> <li>Interactive development workflows</li> <li>Debugging complex Python logic</li> <li>Prototyping and experimentation</li> </ul>"},{"location":"advanced/advanced-usage/#signal-handler-management","title":"Signal Handler Management","text":"<ul> <li>Web applications and services</li> <li>Applications with custom shutdown logic</li> <li>Integration with .NET hosting frameworks</li> <li>Control over application lifecycle</li> </ul>"},{"location":"advanced/advanced-usage/#native-aot","title":"Native AOT","text":"<ul> <li>Performance-critical applications</li> <li>Self-contained deployment requirements</li> <li>Environments without .NET runtime</li> <li>Optimized memory usage scenarios</li> </ul>"},{"location":"advanced/advanced-usage/#best-practices","title":"Best Practices","text":""},{"location":"advanced/advanced-usage/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Profile your application to identify bottlenecks</li> <li>Use appropriate Python types for your data</li> <li>Consider memory management implications</li> <li>Test performance with realistic workloads</li> </ul>"},{"location":"advanced/advanced-usage/#development-workflow","title":"Development Workflow","text":"<ul> <li>Start with source-generated bindings</li> <li>Move to manual integration only when necessary</li> <li>Use hot reload for rapid iteration</li> <li>Test advanced features in isolation</li> </ul>"},{"location":"advanced/advanced-usage/#deployment-strategy","title":"Deployment Strategy","text":"<ul> <li>Plan for Python environment packaging</li> <li>Consider Native AOT for performance gains</li> <li>Test signal handling in target environments</li> <li>Document advanced configuration requirements</li> </ul>"},{"location":"advanced/advanced-usage/#error-handling","title":"Error Handling","text":"<ul> <li>Implement robust error handling for all advanced features</li> <li>Log performance metrics and errors</li> <li>Plan for graceful degradation</li> <li>Monitor production behavior</li> </ul>"},{"location":"advanced/advanced-usage/#getting-help","title":"Getting Help","text":"<p>If you encounter issues with advanced features:</p> <ol> <li>Check the specific topic documentation for detailed troubleshooting</li> <li>Review the FAQ for common issues</li> <li>Search GitHub Issues for similar problems</li> <li>Create a new issue with detailed reproduction steps</li> </ol>"},{"location":"advanced/advanced-usage/#contributing","title":"Contributing","text":"<p>Found an issue or have improvements for advanced features? We welcome contributions:</p> <ul> <li>Bug reports for advanced functionality</li> <li>Performance improvements and optimizations</li> <li>Documentation enhancements with real-world examples</li> <li>New advanced features that benefit the community</li> </ul> <p>See our Contributing Guide for more information.</p>"},{"location":"advanced/advanced-usage/#quick-reference","title":"Quick Reference","text":"Feature Use Case Requirements Big Integers Large number handling <code>System.Numerics.BigInteger</code> Free-Threading CPU parallelism Python 3.13+ Manual Integration Maximum control Direct runtime API usage Hot Reload Rapid development Development environment Signal Handlers .NET integration Framework compatibility Native AOT Performance/deployment Source generator required"},{"location":"advanced/big-integers/","title":"Working with Large Integers","text":"<p>Python's <code>int</code> type is closer in structure to C#.NET's <code>System.Numerics.BigInteger</code> than to <code>System.Int64</code>. This means that when you are working with very large integers in Python, you may need to use the <code>BigInteger</code> type in C# to handle the results.</p>"},{"location":"advanced/big-integers/#converting-between-biginteger-and-pyobject","title":"Converting Between BigInteger and PyObject","text":"<p>You can use the TypeConverter class to convert between <code>BigInteger</code> and <code>PyObject</code> instances. Here's an example of how you can call a Python function that returns a very large integer:</p> <pre><code>using CSnakes.Runtime.Python;\nusing System.Numerics;\n\nconst string number = \"12345678987654345678764345678987654345678765\";\n// Something that is too big for a long (I8)\nBigInteger bignumber = BigInteger.Parse(number);\n\nusing (GIL.Acquire())\n{\n    using PyObject? pyObj = PyObject.From(bignumber);\n\n    // Do stuff with the integer object\n    // e.g. call a function with this as an argument\n\n    // Convert a Python int back into a BigInteger like this..\n    BigInteger integer = pyObj.As&lt;BigInteger&gt;();\n}\n</code></pre>"},{"location":"advanced/big-integers/#when-to-use-biginteger","title":"When to Use BigInteger","text":"<p>Use <code>BigInteger</code> instead of standard integer types when:</p> <ul> <li>Working with numbers larger than <code>long.MaxValue</code> (9,223,372,036,854,775,807)</li> <li>Python code returns integers that might exceed 64-bit limits</li> <li>Performing mathematical operations that could result in very large numbers</li> <li>Working with cryptographic operations or high-precision calculations</li> </ul>"},{"location":"advanced/big-integers/#example-working-with-large-factorials","title":"Example: Working with Large Factorials","text":"<p>Python can easily calculate large factorials. Here's how to handle them in C#:</p> <p>Python code (math_operations.py): <pre><code>import math\n\ndef calculate_factorial(n: int) -&gt; int:\n    \"\"\"Calculate factorial of n, which can be very large\"\"\"\n    return math.factorial(n)\n\ndef fibonacci_large(n: int) -&gt; int:\n    \"\"\"Calculate the nth Fibonacci number\"\"\"\n    if n &lt;= 1:\n        return n\n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n</code></pre></p> <p>C# code: <pre><code>using CSnakes.Runtime;\nusing System.Numerics;\n\n// Get large factorial (100! is much larger than long.MaxValue)\nvar mathOps = env.MathOperations();\nBigInteger factorial100 = mathOps.CalculateFactorial(100);\nConsole.WriteLine($\"100! = {factorial100}\");\n\n// Get large Fibonacci number\nBigInteger fib1000 = mathOps.FibonacciLarge(1000);\nConsole.WriteLine($\"Fibonacci(1000) = {fib1000}\");\n</code></pre></p>"},{"location":"advanced/big-integers/#performance-considerations","title":"Performance Considerations","text":"<ul> <li><code>BigInteger</code> operations are slower than primitive integer operations</li> <li>Use regular <code>long</code> or <code>int</code> when you know the values will fit</li> <li>Consider the trade-off between precision and performance</li> <li>BigInteger allocates memory on the heap, unlike primitive integers</li> </ul>"},{"location":"advanced/big-integers/#common-patterns","title":"Common Patterns","text":""},{"location":"advanced/big-integers/#safe-conversion-from-python","title":"Safe Conversion from Python","text":"<pre><code>public static class SafeIntegerConversion\n{\n    public static long ToLongOrBigInteger(PyObject pyObj, out BigInteger? bigInteger)\n    {\n        bigInteger = null;\n\n        try\n        {\n            // Try to convert to long first (more efficient)\n            return pyObj.As&lt;long&gt;();\n        }\n        catch (OverflowException)\n        {\n            // If overflow, use BigInteger\n            bigInteger = pyObj.As&lt;BigInteger&gt;();\n            return 0; // Indicate BigInteger should be used\n        }\n    }\n}\n\n// Usage\nusing var result = env.SomeFunction();\nvar longValue = SafeIntegerConversion.ToLongOrBigInteger(result, out var bigIntValue);\n\nif (bigIntValue.HasValue)\n{\n    Console.WriteLine($\"Large number: {bigIntValue.Value}\");\n}\nelse\n{\n    Console.WriteLine($\"Regular number: {longValue}\");\n}\n</code></pre>"},{"location":"advanced/big-integers/#working-with-biginteger-in-collections","title":"Working with BigInteger in Collections","text":"<pre><code>// Python function that returns a list of large numbers\npublic List&lt;BigInteger&gt; GetLargePrimes(int count)\n{\n    var primes = env.MathOperations().GenerateLargePrimes(count);\n    return primes.Select(p =&gt; p.As&lt;BigInteger&gt;()).ToList();\n}\n</code></pre>"},{"location":"advanced/big-integers/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about free-threading mode</li> <li>Explore manual Python integration</li> <li>Review performance optimization</li> </ul>"},{"location":"advanced/free-threading/","title":"Free-Threading Mode","text":"<p>Python 3.13 introduced a new feature called \"free-threading mode\" which allows the Python interpreter to run in a multi-threaded environment without the Global Interpreter Lock (GIL). This is a significant change to the Python runtime and can have a big impact on the performance of Python code running in a multi-threaded environment.</p>"},{"location":"advanced/free-threading/#overview","title":"Overview","text":"<p>The Global Interpreter Lock (GIL) has historically been a limitation in Python's ability to utilize multiple CPU cores effectively in multi-threaded applications. Free-threading mode removes this limitation, allowing Python code to run truly in parallel across multiple threads.</p>"},{"location":"advanced/free-threading/#enabling-free-threading-in-csnakes","title":"Enabling Free-Threading in CSnakes","text":"<p>CSnakes supports free-threading mode, but it is disabled by default. To use free-threading you can use the <code>RedistributableLocator</code> from version Python 3.13 and request <code>freeThreaded</code> builds:</p> <pre><code>var builder = Host.CreateApplicationBuilder();\nvar pb = builder.Services.WithPython()\n  .WithHome(Environment.CurrentDirectory) // Path to your Python modules.\n  .FromRedistributable(\"3.13\", freeThreaded: true);\nvar app = builder.Build();\n\nenv = app.Services.GetRequiredService&lt;IPythonEnvironment&gt;();\n</code></pre>"},{"location":"advanced/free-threading/#requirements","title":"Requirements","text":"<ul> <li>Python 3.13 or later: Free-threading is only available in Python 3.13+</li> <li>Compatible libraries: Most Python libraries need updates to work with free-threading</li> <li>Testing required: Thorough testing is essential as this is still experimental</li> </ul>"},{"location":"advanced/free-threading/#important-considerations","title":"Important Considerations","text":"<p>Whilst free-threading mode is supported at a high-level from CSnakes, it is still an experimental feature in Python 3.13 and may not be suitable for all use-cases. Also, most Python libraries, especially those written in C, are not yet compatible with free-threading mode, so you may need to test your code carefully.</p>"},{"location":"advanced/free-threading/#next-steps","title":"Next Steps","text":"<ul> <li>Explore manual Python integration</li> <li>Learn about hot reload</li> <li>Review performance optimization</li> </ul>"},{"location":"advanced/generators/","title":"Generators","text":"<p>CSnakes supports Python generators using the <code>typing.Generator</code> type annotation. The <code>typing.Generator</code> type annotation is used to specify a generator function that yields values of a specific type.</p> <p>CSnakes will convert a Python Generator to a CLR type in the <code>CSnakes.Runtime.Python</code> namespace that implements the <code>IGeneratorIterator</code> interface.</p> <p>The <code>IGeneratorIterator</code> implements both <code>IEnumerable&lt;T&gt;</code> and <code>IEnumerator&lt;T&gt;</code> interfaces, so you can use it in <code>foreach</code> loops and LINQ queries.</p> <p>For example the Python function:</p> <pre><code>from typing import Generator\n\n\ndef example_generator(length: int) -&gt; Generator[str, int, bool]:\n    for i in range(length):\n        x = yield f\"Item {i}\"\n        if x:\n            yield f\"Received {x}\"\n\n    return True\n</code></pre> <p>Will return a <code>IGeneratorIterator&lt;string, long, bool&gt;</code>. You can use this in a C# foreach loop:</p> <pre><code>var generator = env.ExampleGenerator(5);\n\nforeach (string item in generator)\n{\n    Console.WriteLine(item);\n}\n</code></pre> <p><code>IGeneratorIterator</code> also implements a <code>Send</code> method that allows you to send values back into the generator.</p> <p>The type of <code>.Send</code> is the <code>TSend</code> type parameter of the <code>Generator</code> type annotation and returns <code>TYield</code>. In the example above, the <code>TSend</code> type is <code>long</code>, so you can send a <code>long</code> value back into the generator:</p> <pre><code>var generator = env.ExampleGenerator(5);\nstring nextValue= generator.Send(10);\n</code></pre>"},{"location":"advanced/hot-reload/","title":"Hot Reload Support","text":"<p>CSnakes supports hot reload of Python code in Visual Studio and supported IDEs. This means that you can make changes to your Python code within the function body and see the changes reflected in your C# code without restarting the application.</p>"},{"location":"advanced/hot-reload/#overview","title":"Overview","text":"<p>Hot reload functionality allows for rapid development iteration by automatically reloading Python modules when their source files change. This feature is particularly useful during development when you need to quickly test changes to Python logic without restarting your entire .NET application.</p>"},{"location":"advanced/hot-reload/#how-it-works","title":"How It Works","text":"<p>This feature is enabled in the generated classes in CSnakes. When you make changes to the Python code, the modules are reloaded in the .NET runtime and subsequent calls to the Python code will use the new code.</p> <p>The hot reload mechanism:</p> <ol> <li>Monitors Python files for changes during development</li> <li>Automatically reloads modified modules</li> <li>Updates function bindings to use the new code</li> <li>Preserves application state in your .NET application</li> </ol>"},{"location":"advanced/hot-reload/#enabling-hot-reload","title":"Enabling Hot Reload","text":""},{"location":"advanced/hot-reload/#visual-studio-2022","title":"Visual Studio 2022","text":"<p>To enable Hot Reload in Visual Studio 2022, see the official documentation.</p> <ol> <li>Start debugging your application (F5 or Debug &gt; Start Debugging)</li> <li>Make changes to your Python files</li> <li>Save the files - changes should be applied automatically</li> <li>Verify changes by calling the updated Python functions</li> </ol>"},{"location":"advanced/hot-reload/#vs-code","title":"VS Code","text":"<p>Hot reload works with VS Code when using the C# DevKit extension by following the extra instructions.</p>"},{"location":"advanced/hot-reload/#supported-changes","title":"Supported Changes","text":"<p>Hot reload supports changes to the function body of Python functions:</p>"},{"location":"advanced/hot-reload/#supported-changes_1","title":"\u2705 Supported Changes","text":"<ul> <li>Logic modifications within function bodies</li> <li>Adding/removing local variables</li> <li>Changing calculations and algorithms</li> <li>Modifying string literals and constants</li> <li>Adding/removing print statements or logging</li> <li>Changing loop logic and conditionals</li> <li>Importing additional modules within functions</li> </ul>"},{"location":"advanced/hot-reload/#limitations","title":"Limitations","text":"<p>Beyond the C# limitations, Hot Reload does not support changes to the Python code which require additional changes to the C# interface:</p>"},{"location":"advanced/hot-reload/#unsupported-changes","title":"\u274c Unsupported Changes","text":"<ul> <li>Removing functions - C# code still references them</li> <li>Changing function signatures - Parameter types or counts</li> <li>Changing return types - Would break C# type expectations</li> <li>Changing parameter types - Would cause type conversion errors</li> <li>Changing function names - C# bindings use the original names</li> <li>Changing module names - Module import references are cached</li> <li>Adding new functions - Not accessible without regenerating bindings</li> </ul>"},{"location":"advanced/hot-reload/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about signal handlers</li> <li>Explore Native AOT support</li> <li>Review troubleshooting guide</li> </ul>"},{"location":"advanced/manual-integration/","title":"Manual Python Integration","text":"<p>The Source Generator library is a useful tool for creating the boilerplate code to invoke a Python function from a <code>PythonEnvironment</code> instance and convert the types based on the type annotations in the Python function.</p> <p>However, it is still possible to call Python code without the Source Generator, giving you full control over the integration. This approach requires writing the boilerplate code yourself but provides maximum flexibility.</p>"},{"location":"advanced/manual-integration/#when-to-use-manual-integration","title":"When to Use Manual Integration","text":"<p>Consider manual integration when:</p> <ul> <li>You need fine-grained control over Python object handling</li> <li>Working with dynamic Python code that can't be statically analyzed</li> <li>Implementing custom type conversions not supported by the source generator</li> <li>Debugging complex interop scenarios</li> <li>Building custom abstractions over the CSnakes runtime</li> </ul> <p>Importantly: </p> <ul> <li>Dynamic conversion will not be supported in Native AOT</li> <li>In most scenarios, manual integration will be slower</li> </ul>"},{"location":"advanced/manual-integration/#basic-manual-integration-example","title":"Basic Manual Integration Example","text":"<p>Here's an example of how you can call a Python function without the Source Generator. Consider this Python function in a module called <code>test_basic</code>:</p> <pre><code>def test_int_float(a: int, b: float) -&gt; float:\n    return a + b\n</code></pre> <p>The C# code to call this function manually needs to:</p> <ol> <li>Convert the .NET types to <code>PyObject</code> instances and back</li> <li>Use the <code>GIL.Acquire()</code> method to acquire the Global Interpreter Lock for all conversions and calls to Python</li> <li>Use the <code>Import.ImportModule</code> method to import the module and store a reference once so that it can be used multiple times</li> <li>Dispose the module when it is no longer needed</li> </ol> <pre><code>using CSnakes.Runtime;\nusing CSnakes.Runtime.Python;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing Microsoft.Extensions.Logging;\n\nnamespace CSnakes.Runtime;\n\npublic sealed class ExampleDirectIntegration : IDisposable\n{\n    private readonly PyObject module;\n    private readonly ILogger&lt;IPythonEnvironment&gt; logger;\n\n    internal ExampleDirectIntegration(IPythonEnvironment env)\n    {\n        this.logger = env.Logger;\n        using (GIL.Acquire())\n        {\n            logger.LogInformation(\"Importing module {ModuleName}\", \"test_basic\");\n            module = Import.ImportModule(\"test_basic\");\n        }\n    }\n\n    public void Dispose()\n    {\n        logger.LogInformation(\"Disposing module\");\n        module.Dispose();\n    }\n\n    public double TestIntFloat(long a, double b)\n    {\n        using (GIL.Acquire())\n        {\n            logger.LogInformation(\"Invoking Python function: {FunctionName}\", \"test_int_float\");\n            using var __underlyingPythonFunc = this.module.GetAttr(\"test_int_float\");\n            using PyObject a_pyObject = PyObject.From(a);\n            using PyObject b_pyObject = PyObject.From(b);\n            using var __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);\n            return __result_pyObject.As&lt;double&gt;();\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/manual-integration/#disabling-the-source-generator","title":"Disabling the Source Generator","text":"<p>If you want to disable the Source Generator completely, you have two options:</p>"},{"location":"advanced/manual-integration/#option-1-remove-additionalfiles","title":"Option 1: Remove AdditionalFiles","text":"<p>The Source Generator will only activate on files that are marked as <code>AdditionalFiles</code> in the project file. Remove the <code>AdditionalFiles</code> entry:</p> <pre><code>&lt;!-- Remove or comment out this section --&gt;\n&lt;!--\n&lt;ItemGroup&gt;\n  &lt;AdditionalFiles Include=\"*.py\" /&gt;\n&lt;/ItemGroup&gt;\n--&gt;\n</code></pre>"},{"location":"advanced/manual-integration/#best-practices-for-manual-integration","title":"Best Practices for Manual Integration","text":""},{"location":"advanced/manual-integration/#1-proper-resource-disposal","title":"1. Proper Resource Disposal","text":"<pre><code>// \u2705 Good - Proper disposal\nusing (GIL.Acquire())\n{\n    using var arg1 = PyObject.From(value1);\n    using var arg2 = PyObject.From(value2);\n    using var result = function.Call(arg1, arg2);\n    return result.As&lt;string&gt;();\n}\n\n// \u274c Bad - Memory leaks\nvar arg1 = PyObject.From(value1);\nvar arg2 = PyObject.From(value2);\nvar result = function.Call(arg1, arg2);\n// Objects not disposed - will cause memory leaks!\n</code></pre>"},{"location":"advanced/manual-integration/#2-error-handling","title":"2. Error Handling","text":"<pre><code>try\n{\n    using (GIL.Acquire())\n    {\n        // Python calls here\n    }\n}\ncatch (PythonInvocationException ex)\n{\n    // Handle Python-specific exceptions\n    logger.LogError(ex, \"Python error: {PythonType}\", ex.PythonExceptionType);\n}\ncatch (Exception ex)\n{\n    // Handle other exceptions\n    logger.LogError(ex, \"Unexpected error in Python integration\");\n}\n</code></pre>"},{"location":"advanced/manual-integration/#4-caching","title":"4. Caching","text":"<pre><code>// Cache modules, attributes and other classes instead of calling `GetAttr` each time.\nprivate readonly PyObject module;\n\npublic MyClass(IPythonEnvironment env)\n{\n    using (GIL.Acquire())\n    {\n        module = Import.ImportModule(\"my_module\");\n    }\n}\n</code></pre>"},{"location":"advanced/manual-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about hot reload</li> <li>Explore Native AOT support</li> <li>Review performance optimization</li> </ul>"},{"location":"advanced/native-aot/","title":"Native AOT Support","text":"<p>CSnakes supports Native AOT (Ahead-of-Time) compilation, which allows you to compile your C# application to native code for faster startup times and reduced memory footprint. For comprehensive information about Native AOT in .NET, see the Microsoft Native AOT documentation.</p>"},{"location":"advanced/native-aot/#overview","title":"Overview","text":"<p>Native AOT compilation produces a single executable file that includes the .NET runtime, eliminating the need for the .NET runtime to be installed on the target machine. This provides several benefits:</p> <ul> <li>Faster startup times - No JIT compilation required</li> <li>Reduced memory footprint - More efficient memory usage</li> <li>Self-contained deployment - No external dependencies</li> <li>Improved security - Code is pre-compiled and harder to reverse engineer</li> </ul>"},{"location":"advanced/native-aot/#requirements-for-native-aot","title":"Requirements for Native AOT","text":"<p>Native AOT support in CSnakes only works with source generated bindings. This means:</p> <ul> <li>You must use Python files marked as <code>AdditionalFiles</code> in your project</li> <li>The source generator must be enabled (which is the default)</li> <li>You cannot use the manual Python binding approach described in Manual Python Integration</li> </ul>"},{"location":"advanced/native-aot/#why-source-generator-is-required","title":"Why Source Generator is Required","text":"<p>The limitation exists because casting Python objects to .NET containers like <code>Tuple</code>, <code>Dictionary</code>, <code>List</code>, or <code>Coroutine</code> requires reflection when done dynamically, which is not supported in Native AOT compilation. The source generator solves this by generating compiled bindings and reflection code at build time without using <code>System.Reflection</code>, making the generated code AOT-ready.</p>"},{"location":"advanced/native-aot/#configuring-native-aot","title":"Configuring Native AOT","text":""},{"location":"advanced/native-aot/#basic-configuration","title":"Basic Configuration","text":"<p>To enable Native AOT in your CSnakes project, add the following property to your <code>.csproj</code> file:</p> <pre><code>&lt;PropertyGroup&gt;\n  &lt;PublishAot&gt;true&lt;/PublishAot&gt;\n  &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt;\n&lt;/PropertyGroup&gt;\n</code></pre> <p>The <code>InvariantGlobalization</code> setting is typically required for AOT compatibility, as it reduces the application's dependencies on culture-specific data. For more details on configuration options, see Native AOT deployment overview.</p>"},{"location":"advanced/native-aot/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>&lt;PropertyGroup&gt;\n  &lt;PublishAot&gt;true&lt;/PublishAot&gt;\n  &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt;\n\n  &lt;!-- Optional: Optimize for size --&gt;\n  &lt;PublishTrimmed&gt;true&lt;/PublishTrimmed&gt;\n  &lt;TrimMode&gt;full&lt;/TrimMode&gt;\n\n  &lt;!-- Optional: Disable debugging symbols for smaller size --&gt;\n  &lt;DebuggerSupport&gt;false&lt;/DebuggerSupport&gt;\n  &lt;EnableUnsafeUTF7Encoding&gt;false&lt;/EnableUnsafeUTF7Encoding&gt;\n  &lt;HttpActivityPropagationSupport&gt;false&lt;/HttpActivityPropagationSupport&gt;\n  &lt;MetadataUpdaterSupport&gt;false&lt;/MetadataUpdaterSupport&gt;\n  &lt;UseSystemResourceKeys&gt;true&lt;/UseSystemResourceKeys&gt;\n&lt;/PropertyGroup&gt;\n</code></pre>"},{"location":"advanced/native-aot/#complete-example-project","title":"Complete Example Project","text":"<p>Here's a complete example of a CSnakes project configured for Native AOT:</p>"},{"location":"advanced/native-aot/#aotconsoleappcsproj","title":"AOTConsoleApp.csproj","text":"<pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\n    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n    &lt;Nullable&gt;enable&lt;/Nullable&gt;\n    &lt;PublishAot&gt;true&lt;/PublishAot&gt;\n    &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt;\n  &lt;/PropertyGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;AdditionalFiles Include=\"*.py\"&gt;\n      &lt;CopyToOutputDirectory&gt;Always&lt;/CopyToOutputDirectory&gt;\n    &lt;/AdditionalFiles&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"CSnakes.Runtime\" Version=\"1.*-*\" /&gt;\n  &lt;/ItemGroup&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"advanced/native-aot/#aot_demopy","title":"aot_demo.py","text":"<pre><code>def cool_things() -&gt; list[str]:\n    return [\n        \"Python\",\n        \"C#\",\n    ]\n\ndef calculate_fibonacci(n: int) -&gt; int:\n    \"\"\"Calculate nth Fibonacci number\"\"\"\n    if n &lt;= 1:\n        return n\n    return calculate_fibonacci(n - 1) + calculate_fibonacci(n - 2)\n\ndef process_data(items: list[int]) -&gt; dict[str, int]:\n    \"\"\"Process a list of integers and return statistics\"\"\"\n    return {\n        \"count\": len(items),\n        \"sum\": sum(items),\n        \"max\": max(items) if items else 0,\n        \"min\": min(items) if items else 0\n    }\n</code></pre>"},{"location":"advanced/native-aot/#programcs","title":"Program.cs","text":"<pre><code>using CSnakes.Runtime;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nvar builder = Host.CreateApplicationBuilder(args);\nvar home = Path.Join(Environment.CurrentDirectory);\nbuilder.Services\n    .WithPython()\n    .WithHome(home)\n    .FromRedistributable(\"3.12\");\n\nvar app = builder.Build();\n\nvar env = app.Services.GetRequiredService&lt;IPythonEnvironment&gt;();\n\nRunQuickDemo(env);\n\nstatic void RunQuickDemo(IPythonEnvironment env)\n{\n    var quickDemo = env.AotDemo();\n\n    Console.WriteLine(\"=== Cool Things Demo ===\");\n    foreach (var thing in quickDemo.CoolThings())\n    {\n        Console.WriteLine(thing + \" is cool!\");\n    }\n\n    Console.WriteLine(\"\\n=== Fibonacci Demo ===\");\n    for (int i = 0; i &lt; 10; i++)\n    {\n        var fib = quickDemo.CalculateFibonacci(i);\n        Console.WriteLine($\"Fibonacci({i}) = {fib}\");\n    }\n\n    Console.WriteLine(\"\\n=== Data Processing Demo ===\");\n    var testData = new List&lt;int&gt; { 1, 2, 3, 4, 5, 10, 15, 20 };\n    var stats = quickDemo.ProcessData(testData);\n\n    Console.WriteLine($\"Data: [{string.Join(\", \", testData)}]\");\n    foreach (var kvp in stats)\n    {\n        Console.WriteLine($\"{kvp.Key}: {kvp.Value}\");\n    }\n\n    Console.WriteLine();\n}\n</code></pre>"},{"location":"advanced/native-aot/#publishing-for-native-aot","title":"Publishing for Native AOT","text":""},{"location":"advanced/native-aot/#basic-publishing","title":"Basic Publishing","text":"<p>To publish your application with Native AOT, use the following command:</p> <pre><code>dotnet publish -c Release -r &lt;runtime-identifier&gt;\n</code></pre>"},{"location":"advanced/native-aot/#platform-specific-examples","title":"Platform-Specific Examples","text":"<p>Windows x64: <pre><code>dotnet publish -c Release -r win-x64\n</code></pre></p> <p>Linux x64: <pre><code>dotnet publish -c Release -r linux-x64\n</code></pre></p> <p>macOS x64: <pre><code>dotnet publish -c Release -r osx-x64\n</code></pre></p> <p>macOS ARM64 (Apple Silicon): <pre><code>dotnet publish -c Release -r osx-arm64\n</code></pre></p>"},{"location":"advanced/native-aot/#advanced-publishing-options","title":"Advanced Publishing Options","text":"<pre><code># Optimize for size\ndotnet publish -c Release -r win-x64 -p:PublishTrimmed=true\n\n# Self-contained with optimizations\ndotnet publish -c Release -r win-x64 --self-contained -p:PublishSingleFile=true\n\n# Debug information for troubleshooting\ndotnet publish -c Release -r win-x64 -p:DebuggerSupport=true\n</code></pre> <p>For more information about publishing Native AOT applications and runtime identifiers, see the Publishing Native AOT apps guide.</p>"},{"location":"advanced/native-aot/#python-environment-packaging","title":"Python Environment Packaging","text":"<p>Important: While <code>dotnet publish</code> builds a self-contained .NET application, that application does not contain Python, the Python virtual environment, or its dependencies. The published application will still require a Python runtime and any required packages to be available on the target system.</p>"},{"location":"advanced/native-aot/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"advanced/native-aot/#1-using-csnakesstage-tool","title":"1. Using CSnakes.Stage Tool","text":"<p>For packaging Python environments alongside your application, see the documentation on the <code>CSnakes.Stage</code> tool which provides guidance on bundling Python environments with your .NET applications.</p> <pre><code># Example using CSnakes.Stage\ncsnakes-stage --python-version 3.12 --output ./python-env\n</code></pre>"},{"location":"advanced/native-aot/#2-redistributable-python","title":"2. Redistributable Python","text":"<p>Use the redistributable Python approach for consistent deployments:</p> <pre><code>// In your AOT application, use redistributable Python\nbuilder.Services\n    .WithPython()\n    .WithHome(Environment.CurrentDirectory)\n    .FromRedistributable(\"3.12\"); // This downloads Python automatically\n</code></pre>"},{"location":"advanced/native-aot/#3-docker-deployment","title":"3. Docker Deployment","text":"<pre><code># Dockerfile for AOT + Python\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\nWORKDIR /app\n\n# Install Python\nRUN apt-get update &amp;&amp; apt-get install -y python3 python3-pip\n\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\n\n# Copy project files\nCOPY [\"AOTConsoleApp.csproj\", \".\"]\nCOPY [\"*.py\", \".\"]\nRUN dotnet restore \"AOTConsoleApp.csproj\"\n\n# Copy source and build\nCOPY . .\nRUN dotnet publish \"AOTConsoleApp.csproj\" -c Release -r linux-x64 -o /app/publish\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=build /app/publish .\nENTRYPOINT [\"./AOTConsoleApp\"]\n</code></pre>"},{"location":"advanced/native-aot/#limitations-and-considerations","title":"Limitations and Considerations","text":""},{"location":"advanced/native-aot/#1-source-generator-required","title":"1. Source Generator Required","text":"<p>Native AOT only works with the source generator. Manual Python binding using the runtime API directly is not supported in AOT scenarios due to reflection limitations when dynamically casting Python objects to .NET containers.</p> <pre><code>// \u2705 Supported in AOT - uses source generator\nvar module = env.MyModule();\nvar result = module.MyFunction(42);\n\n// \u274c Not supported in AOT - uses reflection\nusing (GIL.Acquire())\n{\n    var module = Import.ImportModule(\"my_module\");\n    var result = module.GetAttr(\"my_function\").Call(PyObject.From(42));\n    return result.As&lt;MyType&gt;(); // This won't work in AOT\n}\n</code></pre>"},{"location":"advanced/native-aot/#2-reflection-limitations","title":"2. Reflection Limitations","text":"<p>Native AOT has limited support for reflection, which is why the source generator approach is mandatory. For more details, see Native AOT compatibility requirements.</p>"},{"location":"advanced/native-aot/#3-python-runtime","title":"3. Python Runtime","text":"<p>The Python runtime itself is not compiled to native code - only your C# application is. The Python interpreter still runs in its normal mode.</p>"},{"location":"advanced/native-aot/#4-debugging","title":"4. Debugging","text":"<p>Debugging AOT-compiled applications can be more challenging than debugging JIT-compiled applications. See Native AOT debugging for more information.</p> <pre><code>// Enable debugging support in AOT (increases size)\n&lt;PropertyGroup&gt;\n  &lt;DebuggerSupport&gt;true&lt;/DebuggerSupport&gt;\n&lt;/PropertyGroup&gt;\n</code></pre>"},{"location":"advanced/native-aot/#5-build-time","title":"5. Build Time","text":"<p>Native AOT compilation takes longer than regular compilation.</p> <pre><code># Regular build\ndotnet build  # ~5-10 seconds\n\n# AOT build\ndotnet publish -r win-x64  # ~30-60 seconds\n</code></pre>"},{"location":"advanced/native-aot/#6-file-size","title":"6. File Size","text":"<p>While memory usage may be reduced, the resulting executable may be larger due to including the entire runtime.</p> <pre><code># Compare sizes\nls -la bin/Release/net8.0/AOTConsoleApp.dll           # ~50KB\nls -la bin/Release/net8.0/win-x64/publish/AOTConsoleApp.exe  # ~15-30MB\n</code></pre>"},{"location":"advanced/native-aot/#sample-project","title":"Sample Project","text":"<p>A complete working example of Native AOT with CSnakes is available in the samples/simple/AOTConsoleApp directory of the repository. This sample demonstrates the proper configuration and usage patterns for AOT deployment.</p>"},{"location":"advanced/native-aot/#running-the-sample","title":"Running the Sample","text":"<pre><code># Clone the repository\ngit clone https://github.com/tonybaloney/CSnakes.git\ncd CSnakes/samples/simple/AOTConsoleApp\n\n# Build and run normally\ndotnet run\n\n# Publish as AOT\ndotnet publish -c Release -r win-x64\n\n# Run the AOT executable\n./bin/Release/net8.0/win-x64/publish/AOTConsoleApp.exe\n</code></pre>"},{"location":"advanced/native-aot/#best-practices-for-aot","title":"Best Practices for AOT","text":""},{"location":"advanced/native-aot/#1-design-for-aot-from-the-start","title":"1. Design for AOT from the Start","text":"<pre><code>// Design with AOT in mind\npublic class AOTFriendlyDesign\n{\n    // Use source generator bindings\n    private readonly IAotDemoGenerated _demo;\n\n    public AOTFriendlyDesign(IPythonEnvironment env)\n    {\n        _demo = env.AotDemo(); // Generated binding\n    }\n\n    // Avoid reflection-based patterns\n    public void ProcessData()\n    {\n        var result = _demo.ProcessData(new List&lt;int&gt; { 1, 2, 3 });\n        // Work with strongly-typed result\n    }\n}\n</code></pre>"},{"location":"advanced/native-aot/#2-test-aot-builds-regularly","title":"2. Test AOT Builds Regularly","text":"<pre><code># Include in CI/CD pipeline\ndotnet publish -c Release -r linux-x64 --verbosity normal\n</code></pre>"},{"location":"advanced/native-aot/#3-profile-performance","title":"3. Profile Performance","text":"<pre><code>public class AOTBenchmark\n{\n    [Benchmark]\n    public void StandardBuild()\n    {\n        // Benchmark JIT version\n    }\n\n    [Benchmark]\n    public void AOTBuild()\n    {\n        // Benchmark AOT version\n    }\n}\n</code></pre>"},{"location":"advanced/native-aot/#next-steps","title":"Next Steps","text":"<ul> <li>Review the complete sample project</li> <li>Learn about deployment strategies</li> <li>Explore performance optimization</li> </ul>"},{"location":"advanced/performance/","title":"Performance","text":"<p>Optimal performance is one of the key design principles of CSnakes. That said, there are some important differences between Python and .NET which impact performance when embedding.</p> <p>This page documents some performance considerations when using CSnakes.</p>"},{"location":"advanced/performance/#important-concepts","title":"Important Concepts","text":"<ul> <li>Marshalling refers to the transfer of data and types between platforms   (Python to .NET or .NET to Python). For example converting a Python <code>int</code> into   a C#.NET <code>long</code>.</li> </ul>"},{"location":"advanced/performance/#3-things-to-avoid-when-performance-matters","title":"3 Things to avoid when performance matters","text":""},{"location":"advanced/performance/#1-crossing-the-bridge-too-frequently","title":"1. \"Crossing the bridge\" too frequently","text":"<p>Python and .NET functions have very different calling conventions. Whilst every effort has been made to make calling Python functions fast from .NET in CSnakes, function calls are relatively slow compared with regular .NET to .NET calls. Function calling in Python is generally slow (compared to C#, C++, Rust, C, etc.) so when writing performance Python code you should avoid writing tiny functions and making too many calls. Python doesn't have function inlining (unlike C# with JIT or AOT compilation) and a lot of CPU time is spent creating call frames.</p> <p>Calling Python functions from CSnakes is slower than calling Python functions from Python, because CSnakes has to marshal the input values from .NET into Python objects and vice versa. Therefore, you want to avoid \"crossing the bridge\" (going between .NET and Python) too frequently.</p> <p>For example, take this code:</p> <pre><code>import numpy as np\n\ndef make_square_2d_array(n: int) -&gt; np.ndarray:\n    return np.zeros((n, n))\n\ndef set_random(arr, i: int, j: int) -&gt; None:\n    arr[i, j] = np.random.random()\n</code></pre> <p>From C#, you fill or set the values in the array like this:</p> <pre><code>var names = env.Make2dArray(1000);\n\nfor (int i = 0; i &lt; 1000; i++)\n{\n    for (int j = 0; j &lt; 1000; j++)\n    {\n        env.SetRandom(names, i, j);\n    }\n}\n</code></pre> <p>This is a very inefficient way to set the values in the array. The <code>SetRandom</code> function is called 1,000,000 times and each time it crosses the bridge between .NET and Python. For all 1,000,000 calls, the C# integers <code>i</code> and <code>j</code> are converted to Python integers, the function is called, and then the result is converted back.</p> <p>Instead, you should design your code with a wrapper function to minimize the number of interop calls. For example, you could create a function that sets all the values in the array at once:</p> <pre><code>def set_random(arr: np.ndarray) -&gt; None:\n    for i in range(arr.shape[0]):\n        for j in range(arr.shape[1]):\n            arr[i, j] = np.random.random()\n</code></pre>"},{"location":"advanced/performance/#2-marshalling-return-values-unnecessarily","title":"2. Marshalling return values unnecessarily","text":"<p>Unlike .NET which has value types and reference types, Python has only names which are references to objects (everything is a pointer to <code>PyObject</code>). If you're a C# developer, just think of Python as having only reference types. </p> <p>To marshall value types from .NET to Python, CSnakes has to convert the value type into a reference type. This is done by creating a new object in Python and copying the value into it. This is a relatively expensive operation and should be avoided when possible. There are some performance tricks in CSnakes to intern certain values like <code>0</code>, <code>1</code>, <code>True</code>, <code>False</code>, and <code>None</code> to avoid this overhead, but you should still be careful when passing value types to Python functions.</p> <p>If you don't need to read the return value of a Python function, you can hint the function as <code>Any</code>. This will tell the source generator to return a <code>PyObject</code>, which is a <code>SafeHandle</code> to the Python object. This will avoid the overhead of marshalling the return value into a .NET type.</p> <p>This is particularly useful when passing data between functions.</p> <p>For example, if the Python function <code>a</code> returns an object and you need that to pass to another function <code>b</code>, you can do this:</p> <pre><code>def a():\n    return ...\n\ndef b(x: ...) -&gt; None:\n    # Do something with x\n    pass\n</code></pre> <p>Instead of marshalling the return value of <code>a</code> into a .NET type, you can use <code>Any</code> to avoid the overhead:</p> <pre><code>def a() -&gt; Any:\n    return ...\n</code></pre> <p>Then from C#, you use the <code>PyObject</code> type to pass the value to the next function:</p> <pre><code>using CSnakes.Runtime;\n\nvar pyObj = env.A();\nenv.B(pyObj);\n</code></pre>"},{"location":"advanced/performance/#tuples-are-value-types","title":"Tuples are value types","text":"<p>In .NET, Tuple types are value types; tuple elements are public fields. Unlike Python, where tuples are immutable and returned as a reference (pointer to <code>PyObject</code>). This means that if a Python object returns a tuple, each of the elements in the tuple is eagerly marshalled into the corresponding .NET type.</p> <p>That is different to dictionaries and lists, which are lazily marshalled (see below).</p>"},{"location":"advanced/performance/#lazy-dictionaries","title":"Lazy dictionaries","text":"<p>If a Python function returns a dictionary, CSnakes will return <code>IReadOnlyDictionary</code> with an implementation to lazily convert the values to .NET types. The conversion is completed the first time the key value is accessed. Lazy Conversion is done to avoid the overhead of converting all the values in the dictionary to .NET types when the dictionary is created.</p> <pre><code>IReadOnlyDictionary&lt;string, int&gt; dict = env.ExampleDict();\n\n// Don't do this to get the value of a key\nforeach (var kvp in dict)\n{\n    if (kvp.Key == \"key\")\n    {\n        // Do something with the value\n        int value = kvp.Value;\n    }\n}\n\n// Instead, check the existence of a key\nif (dict.ContainsKey(\"key\"))\n{\n    // Get the value of the key\n    int value = dict[\"key\"];\n}\n</code></pre>"},{"location":"advanced/performance/#lazy-lists","title":"Lazy lists","text":"<p>Similar to dictionaries, if a Python function returns a list, CSnakes will return <code>IReadOnlyList</code> with an implementation to lazily convert the values to .NET types as each index is accessed.</p> <p>Where possible, you should try and avoid iterating over the list to get a single or a few values. Instead, you should use the <code>IReadOnlyList</code> interface to index into the specific values you need.</p> <p>If you do, the marshalled value is cached in the <code>IReadOnlyList</code> implementation. This means that if you call the same index multiple times, the value is only marshalled once.</p>"},{"location":"advanced/performance/#3-sending-large-amounts-of-data-to-python","title":"3. Sending large amounts of data to Python","text":"<p>Whilst Python functions which return lists and dictionaries are lazily marshalled, functions which take lists and dictionaries as arguments are not; they are copied instead. This means that if you pass a large list or dictionary to a Python function, CSnakes has to eagerly marshal the entire list or dictionary into .NET types.</p> <p>Take this example:</p> <pre><code>def example_function(data: list[int]) -&gt; None:\n    # Do something with the data\n    pass\n</code></pre> <p>From C#, you can call this function like this:</p> <pre><code>env.ExampleFunction([1, 2, 3]);\n</code></pre> <p>When calling the Python function, CSnakes has to create a Python list object and create a Python integer object for each element in the list. If there are thousands or millions of elements in the list, this can be a very expensive operation.</p> <p>There are some alternatives:</p>"},{"location":"advanced/performance/#using-bytes","title":"Using bytes","text":"<p>If you are passing a large amount of data to Python, you can use a <code>bytes</code> instead of a list. This will avoid the overhead of creating a Python list and converting each element to a Python object.</p> <pre><code>from array import array\n\ndef example_function(data: bytes) -&gt; None:\n    # Do something with the data\n    arr = array('B', data) # unsigned char\n    # Do something with the array\n</code></pre> <p>From C#, you can call this function like this:</p> <pre><code>byte[] data = new byte[1_000_000];\nfor (int i = 0; i &lt; data.Length; i++)  // Fill the byte array with data (example)\n{\n    data[i] = (byte)i;\n}\nenv.ExampleFunction(data);\n</code></pre> <p>CSnakes only creates 1 Python object and copies the byte array into the bytes object. This is more efficient than creating an array or tuple of values, because each of the elements in the array needs to be created as a Python object and allocated. You can use the array module to convert the bytes into a list of an underlying C type.</p>"},{"location":"advanced/performance/#using-numpy-arrays","title":"Using numpy arrays","text":"<p>If you're sending large byte data, or numerical data from Python to .NET, you should use the Buffer protocol to pass the data.</p> <p>If you need to copy lots of numerical data from .NET to Python, we recommend creating a numpy array in Python and using the <code>Buffer</code> type to fill it from .NET. This is the fastest way to pass large amounts of data to Python.</p> <p>You can combine generators with the <code>Buffer</code> type to <code>yield</code> the empty Numpy array, fill it from .NET, the continue with execution in Python:</p> <pre><code>import numpy as np\nfrom typing import Generator\nfrom collections.abc import Buffer\n\ndef sum_of_2d_array(n: int) -&gt; Generator[Buffer, None, int]:\n    arr = np.zeros((n, n), dtype=np.int32)\n    yield arr\n    return np.sum(arr).item()\n</code></pre> <p>From C#, you can call the generator, wait for the first yield, and then fill the array with data from .NET:</p> <pre><code>// whatever your data looks like, e.g. a list of Int32\nList&lt;Int32&gt; list = new() { 1, 2, 3, 4, 5 };\n\nvar bufferGenerator = testModule.SumOf2dArray(5);\n\n// Move to the first yield\nbufferGenerator.MoveNext();\n// Get the buffer object\nvar bufferObject = bufferGenerator.Current;\n// Get the buffer as a 2D span of Int32\nvar bufferAsSpan = bufferObject.AsInt32Span2D();\n\n// Copy the list to the buffer\nfor (int i = 0; i &lt; list.Count; i++)\n{\n    for (int j = 0; j &lt; list.Count; j++)\n    {\n        bufferAsSpan[i, j] = list[i];\n    }\n}\n// Continue execution in Python\nbufferGenerator.MoveNext();\n// Get return value\nlong result = bufferGenerator.Return;\n</code></pre>"},{"location":"advanced/performance/#streaming-data-from-python-into-net","title":"Streaming data from Python into .NET","text":"<p>If you need to send lots of data from Python to .NET, you can either use the buffer protocol or use a generator to stream the data from Python to .NET.</p>"},{"location":"advanced/signal-handlers/","title":"Signal Handler Configuration","text":"<p>By default, Python will install signal handlers for certain signals, such as <code>SIGINT</code> (Ctrl+C) and <code>SIGTERM</code>. This can interfere with the normal operation of your application, especially if you are using a framework that has its own signal handlers.</p> <p>When Python handles these signals instead of your .NET application, it can prevent proper shutdown procedures and interrupt normal signal processing in your C# code.</p>"},{"location":"advanced/signal-handlers/#understanding-the-issue","title":"Understanding the Issue","text":""},{"location":"advanced/signal-handlers/#default-python-behavior","title":"Default Python Behavior","text":"<p>Python automatically installs signal handlers for:</p> <ul> <li>SIGINT (Ctrl+C) - Keyboard interrupt</li> <li>SIGTERM - Termination request</li> <li>SIGPIPE - Broken pipe</li> <li>Other signals depending on the platform</li> </ul> <p>This means that signal handlers on C# code will not be called when the signal is received, and the Python code will handle the signal instead.</p>"},{"location":"advanced/signal-handlers/#impact-on-net-applications","title":"Impact on .NET Applications","text":"<pre><code>// This C# signal handler might not work as expected\nConsole.CancelKeyPress += (sender, e) =&gt;\n{\n    Console.WriteLine(\"C# handling Ctrl+C\");\n    // This might not be called if Python handles SIGINT first\n    e.Cancel = true;\n};\n</code></pre>"},{"location":"advanced/signal-handlers/#disabling-python-signal-handlers","title":"Disabling Python Signal Handlers","text":"<p>You can disable this behavior by using the <code>.DisableSignalHandlers()</code> method on the Python environment configuration:</p> <pre><code>var builder = Host.CreateApplicationBuilder();\nvar pb = builder.Services.WithPython()\n  .WithHome(Environment.CurrentDirectory)\n  .FromRedistributable()\n  .DisableSignalHandlers(); // Disable Python signal handlers\nvar app = builder.Build();\n\nenv = app.Services.GetRequiredService&lt;IPythonEnvironment&gt;();\n</code></pre>"},{"location":"advanced/signal-handlers/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Native AOT support</li> <li>Review troubleshooting guide</li> </ul>"},{"location":"advanced/troubleshooting/","title":"Troubleshooting","text":"<p>This guide helps you diagnose and resolve common issues when working with CSnakes.</p>"},{"location":"advanced/troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"advanced/troubleshooting/#python-environment-issues","title":"Python Environment Issues","text":""},{"location":"advanced/troubleshooting/#issue-python-runtime-not-found","title":"Issue: \"Python runtime not found\"","text":"<p>Symptoms:</p> <ul> <li>Error message: \"Could not locate Python runtime\"</li> <li>Application fails to start</li> <li>PythonEnvironment initialization throws exception</li> </ul> <p>Solutions:</p> <ol> <li> <p>Use Redistributable Locator (Recommended) <pre><code>builder.Services\n    .WithPython()\n    .WithHome(pythonHome)\n    .FromRedistributable(); // Automatically downloads Python\n</code></pre></p> </li> <li> <p>Set Environment Variable <pre><code># Windows\nset PYTHONHOME=C:\\Python312\n\n# Linux/macOS\nexport PYTHONHOME=/usr/local/python3.12\n</code></pre></p> </li> <li> <p>Use Explicit Path <pre><code>builder.Services\n    .WithPython()\n    .WithHome(pythonHome)\n    .FromFolder(@\"C:\\Python312\", \"3.12\");\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#issue-module-not-found-errors","title":"Issue: \"Module not found\" errors","text":"<p>Symptoms:</p> <ul> <li><code>ModuleNotFoundError</code> in Python code</li> <li>ImportError for installed packages</li> <li>Functions work in Python CLI but not in CSnakes</li> </ul> <p>Solutions:</p> <ol> <li> <p>Use Virtual Environment <pre><code>builder.Services\n    .WithPython()\n    .WithHome(pythonHome)\n    .WithVirtualEnvironment(Path.Combine(pythonHome, \".venv\"))\n    .WithPipInstaller() // Installs requirements.txt automatically\n    .FromRedistributable();\n</code></pre></p> </li> <li> <p>Verify Requirements.txt</p> </li> </ol> <pre><code># requirements.txt\nnumpy==1.24.3\npandas==2.0.3\nscikit-learn==1.3.0\n</code></pre> <ol> <li>Manual Package Installation</li> </ol> <pre><code># In your virtual environment\npip install -r requirements.txt\n</code></pre> <ol> <li>Check Python Path</li> </ol> <pre><code># Add to your Python file for debugging\nimport sys\nprint(\"Python path:\", sys.path)\nprint(\"Python executable:\", sys.executable)\n</code></pre>"},{"location":"advanced/troubleshooting/#build-and-source-generation-issues","title":"Build and Source Generation Issues","text":""},{"location":"advanced/troubleshooting/#issue-generated-code-not-found","title":"Issue: \"Generated code not found\"","text":"<p>Symptoms:</p> <ul> <li>IntelliSense doesn't show Python methods</li> <li>Compiler errors about missing methods</li> <li><code>env.ModuleName()</code> not available</li> </ul> <p>Solutions:</p> <ol> <li>Check File Configuration</li> </ol> <pre><code>&lt;ItemGroup&gt;\n  &lt;AdditionalFiles Include=\"python_modules/**/*.py\"&gt;\n    &lt;CopyToOutputDirectory&gt;Always&lt;/CopyToOutputDirectory&gt;\n  &lt;/AdditionalFiles&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <ol> <li>Verify Python File Syntax</li> </ol> <pre><code># Ensure proper type annotations\ndef my_function(param: str) -&gt; str:  # \u2705 Good\n    return f\"Hello {param}\"\n\ndef bad_function(param):  # \u274c Bad - no type hints\n    return f\"Hello {param}\"\n</code></pre> <ol> <li>Clean and Rebuild</li> </ol> <pre><code>dotnet clean\ndotnet build\n</code></pre> <ol> <li> <p>Check Build Output</p> </li> <li> <p>Look for source generation errors in build output</p> </li> <li>Verify Python files are being copied to output directory</li> </ol>"},{"location":"advanced/troubleshooting/#issue-type-conversion-errors","title":"Issue: \"Type conversion errors\"","text":"<p>Symptoms:</p> <ul> <li>Runtime exceptions during type conversion</li> <li>Unexpected <code>null</code> values</li> <li>Type mismatch errors</li> </ul> <p>Solutions:</p> <ol> <li> <p>Use Supported Types <pre><code># \u2705 Supported types\ndef good_function(\n    text: str,\n    number: int,\n    items: list[str],\n    mapping: dict[str, int]\n) -&gt; tuple[str, int]:\n    return text, number\n\n# \u274c Unsupported complex types\ndef bad_function(custom_object: MyCustomClass) -&gt; MyCustomClass:\n    return custom_object\n</code></pre></p> </li> <li> <p>Handle Optional Types Properly</p> </li> </ol> <pre><code>def safe_function(value: str | None = None) -&gt; str:\n    if value is None:\n        return \"default\"\n    return value\n</code></pre> <pre><code>// C# usage\nstring result1 = module.SafeFunction();           // Uses default\nstring result2 = module.SafeFunction(\"custom\");   // Uses provided value\nstring? result3 = module.SafeFunction(null);      // Explicitly pass null\n</code></pre>"},{"location":"advanced/troubleshooting/#runtime-errors","title":"Runtime Errors","text":""},{"location":"advanced/troubleshooting/#issue-pythoninvocationexception","title":"Issue: \"PythonInvocationException\"","text":"<p>Symptoms:</p> <ul> <li>Python exceptions bubble up to C#</li> <li>Stack traces point to Python code</li> <li>Application crashes on Python errors</li> </ul> <p>Solutions:</p> <ol> <li> <p>Proper Error Handling <pre><code>try\n{\n    var result = module.RiskyFunction(input);\n    return result;\n}\ncatch (PythonInvocationException ex)\n{\n    _logger.LogError(ex, \"Python function failed with input: {Input}\", input);\n\n    // Check specific Python exception type\n    if (ex.PythonExceptionType == \"ValueError\")\n    {\n        return HandleValueError(ex);\n    }\n\n    throw; // Re-throw if can't handle\n}\n</code></pre></p> </li> <li> <p>Defensive Python Code <pre><code>def robust_function(value: int) -&gt; tuple[bool, int, str]:\n    \"\"\"Return (success, result, error_message)\"\"\"\n    try:\n        if value &lt; 0:\n            return False, 0, \"Value must be non-negative\"\n\n        result = expensive_operation(value)\n        return True, result, \"\"\n\n    except Exception as e:\n        return False, 0, str(e)\n</code></pre></p> </li> <li> <p>Input Validation <pre><code>public ProcessingResult ProcessData(InputData data)\n{\n    // Validate before calling Python\n    if (data?.Items == null || !data.Items.Any())\n    {\n        return ProcessingResult.Failure(\"No data provided\");\n    }\n\n    if (data.Items.Count &gt; MaxItemCount)\n    {\n        return ProcessingResult.Failure($\"Too many items: {data.Items.Count}\");\n    }\n\n    try\n    {\n        var result = module.ProcessItems(data.Items);\n        return ProcessingResult.Success(result);\n    }\n    catch (PythonInvocationException ex)\n    {\n        return ProcessingResult.Failure($\"Processing failed: {ex.Message}\");\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"advanced/troubleshooting/#issue-slow-startup-times","title":"Issue: \"Slow startup times\"","text":"<p>Symptoms:</p> <ul> <li>Application takes long time to start</li> <li>First Python call is very slow</li> <li>High memory usage during startup</li> </ul> <p>Solutions:</p> <ol> <li> <p>Use Environment Warming <pre><code>public class StartupService : IHostedService\n{\n    private readonly IPythonEnvironment _python;\n\n    public StartupService(IPythonEnvironment python)\n    {\n        _python = python;\n    }\n\n    public async Task StartAsync(CancellationToken cancellationToken)\n    {\n        // Warm up Python environment\n        await Task.Run(() =&gt;\n        {\n            var module = _python.MyModule();\n            // Make a simple call to initialize everything\n            module.WarmupFunction();\n        }, cancellationToken);\n    }\n\n    public Task StopAsync(CancellationToken cancellationToken) =&gt; Task.CompletedTask;\n}\n</code></pre></p> </li> <li> <p>Optimize Python Imports</p> </li> </ol> <pre><code># \u2705 Import only what you need\nfrom sklearn.cluster import KMeans  # Specific import\nimport numpy as np\n\n# \u274c Avoid importing everything\nfrom sklearn import *  # Imports everything, slows startup\nimport pandas  # Large library, import only if needed\n</code></pre> <ol> <li>Use Lazy Loading</li> </ol> <pre><code>def process_with_heavy_imports(data: list[int]) -&gt; list[int]:\n    \"\"\"Import heavy libraries only when needed.\"\"\"\n    import tensorflow as tf  # Import inside function\n    import torch\n\n    # Processing logic\n    return processed_data\n</code></pre>"},{"location":"advanced/troubleshooting/#issue-high-memory-usage","title":"Issue: \"High memory usage\"","text":"<p>Symptoms:</p> <ul> <li>Memory usage grows over time</li> <li>OutOfMemoryException</li> <li>Application becomes unresponsive</li> </ul> <p>Solutions:</p> <ol> <li>Implement Resource Management</li> </ol> <pre><code>public class ResourceManagedService\n{\n    private readonly IPythonEnvironment _python;\n    private readonly SemaphoreSlim _semaphore;\n\n    public ResourceManagedService(IPythonEnvironment python)\n    {\n        _python = python;\n        _semaphore = new SemaphoreSlim(Environment.ProcessorCount);\n    }\n\n    public async Task&lt;T&gt; ExecuteAsync&lt;T&gt;(Func&lt;T&gt; operation)\n    {\n        await _semaphore.WaitAsync();\n        try\n        {\n            return operation();\n        }\n        finally\n        {\n            _semaphore.Release();\n\n            // Force garbage collection if needed\n            if (GC.GetTotalMemory(false) &gt; 500_000_000) // 500MB threshold\n            {\n                GC.Collect();\n                GC.WaitForPendingFinalizers();\n            }\n        }\n    }\n}\n</code></pre> <ol> <li>Optimize Python Memory Usage <pre><code>def memory_efficient_processing(large_data: list[dict]) -&gt; list[dict]:\n    \"\"\"Process data in chunks to manage memory.\"\"\"\n    chunk_size = 1000\n    results = []\n\n    for i in range(0, len(large_data), chunk_size):\n        chunk = large_data[i:i + chunk_size]\n        processed_chunk = process_chunk(chunk)\n        results.extend(processed_chunk)\n\n        # Clear intermediate variables\n        del chunk, processed_chunk\n\n    return results\n</code></pre></li> </ol>"},{"location":"advanced/troubleshooting/#aot-ahead-of-time-compilation-issues","title":"AOT (Ahead-of-Time) Compilation Issues","text":""},{"location":"advanced/troubleshooting/#issue-aot-compilation-fails","title":"Issue: \"AOT compilation fails\"","text":"<p>Symptoms:</p> <ul> <li>Build errors during AOT compilation</li> <li>Runtime errors in AOT-compiled application</li> <li>Missing dependencies in AOT build</li> </ul> <p>Solutions:</p> <ol> <li> <p>Use Source Generation Only <pre><code>// \u2705 Good for AOT\nvar module = env.MyModule();\nvar result = module.MyFunction(input);\n\n// \u274c Bad for AOT - runtime binding not supported\n// env.GetModule(\"my_module\").InvokeFunction(\"my_function\", input);\n</code></pre></p> </li> <li> <p>Configure AOT Properly</p> </li> </ol> <pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n  &lt;PropertyGroup&gt;\n    &lt;PublishAot&gt;true&lt;/PublishAot&gt;\n    &lt;SelfContained&gt;true&lt;/SelfContained&gt;\n    &lt;RuntimeIdentifier&gt;win-x64&lt;/RuntimeIdentifier&gt;\n  &lt;/PropertyGroup&gt;\n&lt;/Project&gt;\n</code></pre> <ol> <li>Trim-Safe Code</li> </ol> <pre><code>// Use attributes to preserve code from trimming\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)]\npublic class MyService\n{\n    // Implementation\n}\n</code></pre>"},{"location":"advanced/troubleshooting/#debugging-techniques","title":"Debugging Techniques","text":""},{"location":"advanced/troubleshooting/#enable-detailed-logging","title":"Enable Detailed Logging","text":"<pre><code>// Configure logging in Program.cs\nbuilder.Logging.AddConsole();\nbuilder.Logging.SetMinimumLevel(LogLevel.Debug);\n\n// Add specific logging for CSnakes\nbuilder.Logging.AddFilter(\"CSnakes\", LogLevel.Debug);\n</code></pre>"},{"location":"advanced/troubleshooting/#python-debugging","title":"Python Debugging","text":"<pre><code># Add debugging output to Python functions\nimport logging\nimport sys\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\ndef debug_function(input_data: list[int]) -&gt; list[int]:\n    logger.debug(f\"Input received: {input_data}\")\n    logger.debug(f\"Python version: {sys.version}\")\n    logger.debug(f\"Python path: {sys.path}\")\n\n    try:\n        result = process_data(input_data)\n        logger.debug(f\"Processing result: {result}\")\n        return result\n    except Exception as e:\n        logger.error(f\"Processing failed: {e}\")\n        raise\n</code></pre>"},{"location":"advanced/troubleshooting/#environment-diagnostics","title":"Environment Diagnostics","text":"<pre><code>public class DiagnosticsService\n{\n    private readonly IPythonEnvironment _python;\n\n    public DiagnosticsInfo GetDiagnostics()\n    {\n        try\n        {\n            var diagnostics = _python.Diagnostics();\n            return new DiagnosticsInfo\n            {\n                PythonVersion = diagnostics.GetPythonVersion(),\n                PythonPath = diagnostics.GetPythonPath(),\n                InstalledPackages = diagnostics.GetInstalledPackages(),\n                EnvironmentVariables = diagnostics.GetEnvironmentVariables()\n            };\n        }\n        catch (Exception ex)\n        {\n            return new DiagnosticsInfo\n            {\n                Error = ex.Message,\n                StackTrace = ex.StackTrace\n            };\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"advanced/troubleshooting/#check-logs-first","title":"Check Logs First","text":"<p>Always check application logs for detailed error information:</p> <pre><code>// Enable comprehensive logging\nbuilder.Services.AddLogging(logging =&gt;\n{\n    logging.AddConsole();\n    logging.AddDebug();\n    logging.SetMinimumLevel(LogLevel.Debug);\n});\n</code></pre>"},{"location":"advanced/troubleshooting/#create-minimal-reproduction","title":"Create Minimal Reproduction","text":"<p>When seeking help, create a minimal example:</p> <pre><code># minimal_example.py\ndef simple_function(value: int) -&gt; int:\n    return value * 2\n</code></pre> <pre><code>// Minimal C# program\nvar builder = Host.CreateApplicationBuilder();\nbuilder.Services\n    .WithPython()\n    .WithHome(\".\")\n    .FromRedistributable();\n\nvar app = builder.Build();\nvar env = app.Services.GetRequiredService&lt;IPythonEnvironment&gt;();\n\nvar module = env.MinimalExample();\nvar result = module.SimpleFunction(5);\nConsole.WriteLine($\"Result: {result}\");\n</code></pre>"},{"location":"advanced/troubleshooting/#useful-resources","title":"Useful Resources","text":"<ul> <li>CSnakes GitHub Issues</li> <li>Sample Projects</li> <li>Performance Guide</li> </ul>"},{"location":"advanced/troubleshooting/#environment-specific-issues","title":"Environment-Specific Issues","text":""},{"location":"advanced/troubleshooting/#windows-issues","title":"Windows Issues","text":"<p>Issue: \"Access denied\" errors - Solution: Run as administrator or check file permissions - Ensure antivirus isn't blocking Python execution</p> <p>Issue: \"Long path names\" - Solution: Enable long path support in Windows - Use shorter directory names</p>"},{"location":"advanced/troubleshooting/#linuxmacos-issues","title":"Linux/macOS Issues","text":"<p>Issue: \"Permission denied\" - Solution: Check execute permissions on Python binary - Ensure user has access to Python installation directory</p> <p>Issue: \"Shared library errors\" - Solution: Install required system dependencies - Check <code>LD_LIBRARY_PATH</code> environment variable</p>"},{"location":"advanced/troubleshooting/#docker-issues","title":"Docker Issues","text":"<p>Issue: \"Python not found in container\"</p> <ul> <li>Solution: Install Python in Dockerfile</li> <li>Use base images with Python pre-installed</li> <li>Use CSnakes.Stage</li> </ul> <pre><code>FROM mcr.microsoft.com/dotnet/aspnet:8.0\nRUN apt-get update &amp;&amp; apt-get install -y python3 python3-pip\nCOPY requirements.txt ./\nRUN pip3 install -r requirements.txt\n</code></pre>"},{"location":"advanced/troubleshooting/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about performance optimization</li> <li>Explore advanced usage patterns</li> </ul>"},{"location":"community/contributing/","title":"Contributing to CSnakes","text":"<p>We welcome contributions to CSnakes! This guide outlines how to contribute to the project, from reporting bugs to submitting code changes.</p>"},{"location":"community/contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>Getting Started</li> <li>Types of Contributions</li> <li>Development Setup</li> <li>Contribution Workflow</li> <li>Testing Guidelines</li> <li>Documentation</li> </ul>"},{"location":"community/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct. We are committed to providing a welcoming and inclusive environment for all contributors.</p>"},{"location":"community/contributing/#our-standards","title":"Our Standards","text":"<ul> <li>Be respectful: Treat everyone with respect and courtesy</li> <li>Be inclusive: Welcome newcomers and help them get started</li> <li>Be constructive: Provide helpful feedback and suggestions</li> <li>Be patient: Remember that people have different experience levels</li> <li>Be collaborative: Work together to improve the project</li> </ul>"},{"location":"community/contributing/#getting-started","title":"Getting Started","text":""},{"location":"community/contributing/#prerequisites","title":"Prerequisites","text":"<p>Before contributing, ensure you have:</p> <ul> <li>.NET 8.0 and 9.0 SDK</li> <li>Python 3.10+ installed</li> <li>Git for version control</li> <li>Visual Studio 2022 or VS Code (recommended IDEs)</li> </ul>"},{"location":"community/contributing/#first-time-setup","title":"First-time Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/yourusername/CSnakes.git\ncd CSnakes\n</code></pre></li> <li>Add upstream remote:    <pre><code>git remote add upstream https://github.com/tonybaloney/CSnakes.git\n</code></pre></li> <li>Install dependencies:    <pre><code>dotnet restore\n</code></pre></li> </ol>"},{"location":"community/contributing/#types-of-contributions","title":"Types of Contributions","text":"<p>We welcome various types of contributions:</p>"},{"location":"community/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>Found a bug? Please create an issue with:</p> <ul> <li>Clear title describing the problem</li> <li>Steps to reproduce the issue</li> <li>Expected vs actual behavior</li> <li>Environment details (OS, .NET version, Python version)</li> <li>Code sample if applicable</li> </ul>"},{"location":"community/contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<p>Have an idea for improvement? Create an issue with:</p> <ul> <li>Use case description</li> <li>Proposed solution or API design</li> <li>Alternative approaches considered</li> <li>Breaking change assessment</li> </ul>"},{"location":"community/contributing/#documentation","title":"\ud83d\udcdd Documentation","text":"<p>Documentation improvements are always welcome:</p> <ul> <li>Fix typos or unclear explanations</li> <li>Add examples and use cases</li> <li>Improve API documentation</li> <li>Create tutorials or guides</li> </ul>"},{"location":"community/contributing/#code-contributions","title":"\ud83d\udd27 Code Contributions","text":"<p>Ready to code? Great! Please:</p> <ul> <li>Start with good first issues labeled <code>good-first-issue</code></li> <li>Discuss larger changes in an issue first</li> <li>Follow our coding standards</li> <li>Include tests for new functionality</li> <li>Update documentation as needed</li> </ul>"},{"location":"community/contributing/#development-setup","title":"Development Setup","text":""},{"location":"community/contributing/#building-the-project","title":"Building the Project","text":"<pre><code># Build the solution\ndotnet build\n\n# Run tests\ndotnet test\n\n# Build documentation (if you have MkDocs installed)\nmkdocs serve\n</code></pre>"},{"location":"community/contributing/#project-structure","title":"Project Structure","text":"<pre><code>CSnakes/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 CSnakes.Runtime/          # Core runtime library\n\u2502   \u251c\u2500\u2500 CSnakes.SourceGeneration/  # Source generators\n\u2502   \u2514\u2500\u2500 CSnakes.Tests/            # Unit tests\n\u251c\u2500\u2500 samples/                      # Example projects\n\u251c\u2500\u2500 docs/                        # Documentation\n\u2514\u2500\u2500 templates/                   # Project templates\n</code></pre>"},{"location":"community/contributing/#key-components","title":"Key Components","text":"<ul> <li>CSnakes.Runtime: Core library for Python interop</li> <li>CSnakes.SourceGeneration: Roslyn source generators</li> <li>Type Converters: Handle .NET \u2194 Python type mapping</li> <li>Environment Management: Python environment discovery and setup</li> </ul>"},{"location":"community/contributing/#contribution-workflow","title":"Contribution Workflow","text":""},{"location":"community/contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code># Update your main branch\ngit checkout main\ngit pull upstream main\n\n# Create a feature branch\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"community/contributing/#branch-naming-convention","title":"Branch Naming Convention","text":"<ul> <li><code>feature/description</code> - New features</li> <li><code>bugfix/description</code> - Bug fixes</li> <li><code>docs/description</code> - Documentation changes</li> <li><code>refactor/description</code> - Code refactoring</li> </ul>"},{"location":"community/contributing/#2-make-changes","title":"2. Make Changes","text":"<ul> <li>Write clear, focused commits</li> <li>Follow coding standards</li> <li>Add tests for new functionality</li> <li>Update documentation</li> </ul>"},{"location":"community/contributing/#3-test-your-changes","title":"3. Test Your Changes","text":"<pre><code># Run all tests\ndotnet test\n\n# Run specific test project\ndotnet test src/CSnakes.Tests/\n\n# Test with different Python versions (if available)\ndotnet test --logger \"console;verbosity=detailed\"\n</code></pre>"},{"location":"community/contributing/#4-submit-pull-request","title":"4. Submit Pull Request","text":"<ol> <li> <p>Push your branch:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create Pull Request on GitHub with:</p> </li> <li>Clear title and description</li> <li>Reference to related issues</li> <li>Summary of changes</li> <li>Breaking changes (if any)</li> <li> <p>Testing performed</p> </li> <li> <p>Respond to feedback and update as needed</p> </li> </ol>"},{"location":"community/contributing/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Feature changes should have an integration test in the <code>Integration.Tests</code> project</li> <li>Bug fixes should first have a unit/integration test demonstrating the bug then a fix in a different commit. </li> </ul>"},{"location":"community/contributing/#community","title":"Community","text":""},{"location":"community/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: For bugs and feature requests</li> <li>GitHub Discussions: For questions and general discussion</li> <li>Documentation: Start with our comprehensive docs</li> </ul>"},{"location":"community/contributing/#communication-guidelines","title":"Communication Guidelines","text":"<ul> <li>Be specific: Provide enough context for others to help</li> <li>Be patient: Maintainers and contributors are volunteers</li> <li>Be helpful: Help others when you can</li> <li>Search first: Check if your question has been asked before</li> </ul>"},{"location":"community/contributing/#recognition","title":"Recognition","text":"<p>We appreciate all contributions! Contributors are recognized in:</p> <ul> <li>Release notes for significant contributions</li> <li>GitHub contributor graphs</li> </ul>"},{"location":"community/contributing/#questions","title":"Questions?","text":"<p>If you have questions about contributing, please:</p> <ol> <li>Check the FAQ</li> <li>Search existing GitHub Issues</li> <li>Create a new issue with the <code>question</code> label</li> <li>Join our community Discussions</li> </ol> <p>Thank you for contributing to CSnakes! \ud83d\udc0d\u2728</p>"},{"location":"community/faq/","title":"Frequently Asked Questions","text":""},{"location":"community/faq/#what-is-the-purpose-of-this-project","title":"What is the purpose of this project?","text":"<p>CSnakes is a .NET Source Generator and Runtime that you can use to embed Python code and libraries into your C#.NET Solution at a performant, low-level without the need for REST, HTTP, or Microservices.</p>"},{"location":"community/faq/#how-does-it-work","title":"How does it work?","text":"<p>CSnakes uses the Python C-API to invoke Python code directly from the .NET process. It generates C# code from Python files that are tagged as CSharp Analyzer Additional Files. The generated code includes the function signatures and type conversions based on the type hints in the Python code.</p> <p>See the Getting Started guide for more information.</p>"},{"location":"community/faq/#what-are-the-benefits-of-using-csnakes","title":"What are the benefits of using CSnakes?","text":"<ul> <li>Uses native Python type hinting standards to produce clean, readable C# code with minimal boiler plate!</li> <li>Integration between .NET and Python is done at the C-API, meaning strong compatibility between Python versions 3.8-3.12 and .NET 6-8.</li> <li>Integration is low-level and high-performance.</li> <li>CSnakes uses the CPython C-API and is compatible with all Python extensions.</li> <li>Invocation of Python code and libraries is in the same process as .NET</li> </ul>"},{"location":"community/faq/#how-does-this-compare-to-ironpython","title":"How does this compare to IronPython?","text":"<p>IronPython is a .NET implementation of Python that runs on the .NET runtime. CSnakes is a tool that allows you to embed Python code and libraries into your C#.NET solution. CSnakes uses the Python C-API to invoke Python code directly from the .NET process, whereas IronPython is a separate implementation of Python that runs on the .NET runtime.</p>"},{"location":"community/faq/#how-does-this-compare-to-pythonnet","title":"How does this compare to Python.NET?","text":"<p>There are some similarities, such as Python.NET has a wrapper around the Python C-API. However, CSnakes comes with a Source Generator to create an interop layer automatically between the two platforms and handle the type conversions based on the type hints in the Python code.</p>"},{"location":"community/faq/#do-i-need-to-use-the-source-generator","title":"Do I need to use the source generator?","text":"<p>No. You can call Python code without the Source Generator, but you will need to write the boilerplate code yourself. See the Manual Integration guide for more information.</p>"},{"location":"community/faq/#my-python-codes-uses-libraries-which-have-c-extensions-will-this-work","title":"My Python codes uses libraries which have C extensions, will this work?","text":"<p>Yes. CSnakes supports C-Extensions and Virtual Environments. You can use the <code>WithPython</code> extension method to specify the path to your Python modules and the <code>.WithVirtualEnvironment()</code> method to load the Python runtime from a virtual environment.</p>"},{"location":"community/faq/#does-this-mean-i-need-to-type-annotate-all-my-python-code","title":"Does this mean I need to type annotate all my Python code?","text":"<p>No. Just the functions you want to call from C#. The Source Generator will generate the C# code based on the type hints in the Python code. Only the Python files marked in the C# project as CSharp Analyzer Additional Files will be processed.</p>"},{"location":"community/faq/#i-heard-that-python-is-removing-the-gil-does-csnakes-handle-threads-that-way","title":"I heard that Python is removing the GIL, does CSnakes handle threads that way?","text":"<p>CSnakes supports free-threading mode, but it is disabled by default. You can use the <code>SourceLocator</code> to find a compiled Python runtime with free-threading enabled. See the Free-Threading guide for more information.</p>"},{"location":"community/limitations/","title":"Limitations","text":"<p>This is a list of known limitations. If you really want to see any of these, or other features please raise an issue and describe your use case.</p>"},{"location":"community/limitations/#type-hinting","title":"Type Hinting","text":""},{"location":"community/limitations/#variadic-generics","title":"Variadic Generics","text":"<p>C# does not have a notion of <code>Tuple&lt;T...&gt;</code>, so the type annotation using <code>Tuple[*T]</code> in Python cannot be statically converted into a C#.NET type. See PEP646 for more details and 25.</p>"},{"location":"community/limitations/#union-types","title":"Union Types","text":"<p>Python's type hinting supports <code>Union</code> types, which are not supported in C#.NET. This includes both <code>typing.Union</code> and the union operator described in PEP 604.</p>"},{"location":"community/limitations/#classes","title":"Classes","text":"<p>CSnakes does not support source generation for custom types, this includes dataclasses and named tuple instances. </p> <p>Functions which return class instances will return a <code>PyObject</code> in C#.NET which you can use to pass into other functions. This type is a reference to the return value. </p> <pre><code>def create_person(name: str, age: int) -&gt; Person:\n    return Person(name, age)\n</code></pre> <p>CSnakes will create a method signature like this:</p> <pre><code>public PyObject CreatePerson(string name, long age);\n</code></pre> <p>There are some public methods on the <code>PyObject</code> class that you can use to interact with the object, such as <code>GetAttr</code> and <code>Call</code>. Any PyObject has a <code>ToString()</code> method that will return the string representation of the object, but you cannot convert the instance to a specific CLR type. </p> <pre><code>var person = module.CreatePerson(\"Alice\", 42);\nvar name = person.GetAttr(\"name\");\nvar age = person.GetAttr(\"age\");\n</code></pre>"},{"location":"community/limitations/#native-aot","title":"Native AOT","text":"<p>When using Native AOT compilation, only the source generated bindings approach is supported. The manual Python binding method described in Manual Integration is not compatible with Native AOT.</p> <p>This limitation exists because casting Python objects to .NET containers like <code>Tuple</code>, <code>Dictionary</code>, <code>List</code>, or <code>Coroutine</code> requires reflection when done dynamically, which is not supported in Native AOT compilation. The source generator solves this by generating compiled bindings and reflection code at build time without using <code>System.Reflection</code>, making the generated code AOT-ready.</p> <p>See the Native AOT Support section for complete details on requirements and configuration.</p>"},{"location":"community/roadmap/","title":"Roadmap","text":"<p>This document outlines the implementation status of various Python features for CSnakes.</p>"},{"location":"community/roadmap/#typing-constructs","title":"Typing Constructs","text":"<p>Note that any constructs which are not available will be typed as <code>PyObject</code>. They still work, but the source generator won't generate the automatic marshal and unmarshal code for them. This means that you will have to manually marshal and unmarshal these types in your C# code.</p> Construct (link) Supported in CSnakes Notes Summary Any Yes Special type that matches any type. Union No No equivalent construct in C#, possibly could use overloads Accepts one of several types. Optional Yes Shorthand for a type or None. Literal No Possible with enums Restricts a value to specific literal values. Final No Would be simple to implement, but not used on function signatures Indicates a name cannot be reassigned. ClassVar No Would be simple, but not used on function signatures Marks a variable as a class variable. Generic No Relies on class reflection Base class for generic types. TypeVar Defines a generic type variable. Callable No Callables would have to by Python objects, not C# functions Represents a callable object (e.g., function). Tuple Yes Fixed-length, ordered collection of types. List Yes Variable-length, ordered collection of types. Dict Yes Dictionary mapping keys to values. Set Usage of sets is quite niche, if you would like this feature please request it. Unordered collection of unique elements. FrozenSet As above Immutable set. Deque No Double-ended queue. DefaultDict No Use Mapping type instead Dictionary with a default value for missing keys. Counter No Use Mapping type instead Dict subclass for counting hashable objects. ChainMap Groups multiple dicts into a single view. Type Indicates a type object. NewType No Not useful for reflection Creates distinct types for type checking. NoReturn No Very unlikely to be used, but could be reflected to <code>void</code> Indicates a function never returns. Self No Will be used in class reflection Refers to the instance type in class bodies. Concatenate No Very hard to achieve in C# Used for advanced typing of callable signatures. ParamSpec Used for typing callable parameter lists. Protocol Defines structural subtyping (static duck typing). runtime_checkable Decorator to allow isinstance checks with Protocols. Annotated Adds context-specific metadata to types. ForwardRef Internal type for forward references. overload No Issue Allows function overloading for type checkers."},{"location":"community/roadmap/#collections-abc","title":"Collections ABC","text":"Construct (link) Supported in CSnakes Notes Summary Collection (collections.abc) No Sized iterable container with contains. Container (collections.abc) No Supports membership test using contains. Hashable (collections.abc) No Objects with a hash value. ItemsView (collections.abc) No View on dictionary's items. Iterable (collections.abc) No Issue Object capable of returning its members one at a time. Iterator (collections.abc) No Produces items from an iterable. Generator (collections.abc) Yes See User Guide for details Iterator that supports send(), throw(), and close(). Mapping (collections.abc) Yes Collection of key-value pairs. MappingView (collections.abc) View on dictionary's keys, values, or items. MutableMapping (collections.abc) Mapping that can be changed. MutableSequence (collections.abc) No Use Sequence Sequence that can be changed. MutableSet (collections.abc) Set that can be changed. Reversible (collections.abc) Supports reversed iteration. Sequence (collections.abc) Yes Ordered collection of items. Set (collections.abc) Unordered collection of unique elements. Sized (collections.abc) Has a length. ValuesView (collections.abc) View on dictionary's values. Awaitable (collections.abc) No Unlikely to be useful Can be used in an await expression. Coroutine (collections.abc) Yes See Async Support Awaitable object with send(), throw(), and close(). AsyncIterable (collections.abc) No Issue Object capable of async iteration. AsyncIterator (collections.abc) No Issue Async iterator object."},{"location":"community/roadmap/#class-reflection","title":"Class Reflection","text":""},{"location":"community/roadmap/#typed-dict","title":"Typed Dict","text":"Construct (link) Supported in CSnakes Notes Summary TypedDict No Dictionary with a specific set of keys, each with a specific type. NotRequired No Marks a key as not required in a TypedDict. Required No Marks a key as required in a TypedDict. ReadOnly No Marks a key as read-only in a TypedDict."},{"location":"community/roadmap/#protocols","title":"Protocols","text":"Construct (link) Supported in CSnakes Notes Summary Protocol No Defines structural subtyping (static duck typing)."},{"location":"examples/projects-using-csnakes/","title":"Projects using CSnakes","text":"<p>CSnakes is being used in various projects to integrate Python code into C# applications. Here are some notable examples:</p>"},{"location":"examples/projects-using-csnakes/#transformerssharp","title":"TransformersSharp","text":"<p>Project: TransformersSharp Repository: GitHub - TransformersSharp Author: Tony Baloney</p> <p>TransformersSharp is a C# wrapper for Hugging Face Transformers that demonstrates the power of CSnakes for AI/ML integration. This project provides a .NET-friendly interface to the popular Python transformers library, enabling C# developers to leverage state-of-the-art machine learning models without leaving the .NET ecosystem.</p>"},{"location":"examples/projects-using-csnakes/#key-features","title":"Key Features","text":"<ul> <li>Tokenizer API based on Hugging Face's PreTrainedTokenizerBase</li> <li>Pipeline Factory for creating various ML pipelines</li> <li>Text Generation Pipeline for language model text generation</li> <li>Text Classification Pipeline for sentiment analysis and classification tasks</li> <li>Image Classification Pipeline for computer vision tasks</li> <li>Object Detection Pipeline for detecting objects in images</li> <li>Text to Audio Pipeline for speech synthesis</li> <li>Automatic Speech Recognition for transcribing audio to text</li> <li>Sentence Transformers for generating embeddings</li> </ul>"},{"location":"examples/projects-using-csnakes/#why-csnakes","title":"Why CSnakes?","text":"<p>TransformersSharp showcases several key advantages of CSnakes:</p> <ol> <li>Automatic Dependency Management: The project automatically fetches Python, PyTorch, and Hugging Face Transformers - no manual Python installation required</li> <li>Type Safety: Strong typing between C# and Python code with automatic type conversion</li> <li>Performance: Direct integration without the overhead of separate processes or REST APIs</li> <li>Ease of Use: Simple C# API that abstracts away Python complexity</li> </ol>"},{"location":"examples/projects-using-csnakes/#example-usage","title":"Example Usage","text":"<pre><code>using TransformersSharp;\n\n// Text classification\nvar classifier = new TextClassificationPipeline(\"cardiffnlp/twitter-roberta-base-sentiment-latest\");\nvar result = classifier.Predict(\"I love using CSnakes with TransformersSharp!\");\n\n// Text generation\nvar generator = new TextGenerationPipeline(\"gpt2\");\nvar generated = generator.Generate(\"The future of AI is\", maxLength: 50);\n\n// Image classification\nvar imageClassifier = new ImageClassificationPipeline(\"google/vit-base-patch16-224\");\nvar prediction = imageClassifier.Predict(\"path/to/image.jpg\");\n</code></pre>"},{"location":"examples/projects-using-csnakes/#impact","title":"Impact","text":"<p>TransformersSharp demonstrates how CSnakes enables:</p> <ul> <li>Enterprise AI Integration: Bringing cutting-edge AI models into .NET enterprise applications</li> <li>Rapid Prototyping: Quick experimentation with ML models in familiar C# environment</li> <li>Production Deployment: Reliable deployment of Python-based AI models in .NET infrastructure</li> <li>Developer Productivity: Eliminating the need for separate Python environments and API bridges</li> </ul> <p>This project serves as an excellent reference for developers looking to integrate complex Python AI/ML libraries into their .NET applications using CSnakes.</p> <p>Got a project using CSnakes you want featured here? Submit an issue on the CSnakes GitHub repository!</p>"},{"location":"examples/sample-projects/","title":"Sample Projects","text":"<p>This section provides links and descriptions of complete sample projects that demonstrate CSnakes in action.</p>"},{"location":"examples/sample-projects/#available-sample-projects","title":"Available Sample Projects","text":""},{"location":"examples/sample-projects/#1-basic-console-application","title":"1. Basic Console Application","text":"<p>Location: <code>samples/simple/QuickConsoleTest</code></p> <p>Description: The simplest possible CSnakes implementation showing basic Python function calls from C#.</p> <p>Features:</p> <ul> <li>Basic string manipulation functions</li> <li>Mathematical operations  </li> <li>Type conversion examples</li> <li>Error handling demonstration</li> </ul> <p>Key Files:</p> <ul> <li><code>hello_world.py</code> - Simple greeting function with optional parameters</li> <li><code>Program.cs</code> - Basic C# console application setup</li> </ul> <p>What You'll Learn:</p> <ul> <li>Basic CSnakes project setup</li> <li>Simple function calls</li> <li>Parameter passing</li> <li>Return value handling</li> </ul>"},{"location":"examples/sample-projects/#2-aot-console-application","title":"2. AOT Console Application","text":"<p>Location: <code>samples/simple/AOTConsoleApp</code></p> <p>Description: Demonstrates CSnakes compatibility with Native AOT compilation for improved performance.</p> <p>Features:</p> <ul> <li>Native AOT compilation support</li> <li>Minimal memory footprint</li> <li>Fast startup times</li> <li>Source generator usage (required for AOT)</li> </ul> <p>Key Files:</p> <ul> <li><code>aot_demo.py</code> - Simple Python functions for AOT demo</li> <li><code>Program.cs</code> - AOT-compatible C# code</li> <li><code>AOTConsoleApp.csproj</code> - Project configuration with <code>&lt;PublishAot&gt;true&lt;/PublishAot&gt;</code></li> </ul> <p>What You'll Learn:</p> <ul> <li>AOT compatibility requirements</li> <li>Performance benefits of AOT</li> <li>Source generator usage</li> <li>Deployment considerations</li> </ul>"},{"location":"examples/sample-projects/#3-web-application","title":"3. Web Application","text":"<p>Location: <code>samples/simple/WebApp</code></p> <p>Description: ASP.NET Core web application integrating Python data processing capabilities.</p> <p>Features:</p> <ul> <li>REST API endpoints calling Python functions</li> <li>Dependency injection integration</li> <li>Machine learning model integration</li> <li>Performance monitoring</li> <li>Load testing configuration</li> </ul> <p>Key Files:</p> <ul> <li><code>kmeans_example.py</code> - K-means clustering implementation</li> <li><code>phi3_demo.py</code> - Small language model integration</li> <li><code>Controllers/</code> - Web API controllers</li> <li><code>loadtest.jmx</code> - JMeter load test configuration</li> </ul> <p>What You'll Learn:</p> <ul> <li>Web application integration</li> <li>Dependency injection setup</li> <li>API design patterns</li> <li>Performance considerations</li> <li>Load testing strategies</li> </ul>"},{"location":"examples/sample-projects/#4-f-sample","title":"4. F# Sample","text":"<p>Location: <code>samples/simple/FSharpSample</code></p> <p>Description: Demonstrates CSnakes usage in F# functional programming context.</p> <p>Features:</p> <ul> <li>F# functional programming patterns</li> <li>Immutable data structures</li> <li>Pipeline operations</li> <li>Type-safe Python integration</li> </ul> <p>Key Files:</p> <ul> <li><code>math_functions.py</code> - Mathematical operations</li> <li><code>Program.fs</code> - F# application using CSnakes</li> <li><code>FSharpSample.fsproj</code> - F# project configuration</li> </ul> <p>What You'll Learn:</p> <ul> <li>F# and CSnakes integration</li> <li>Functional programming patterns</li> <li>Type safety in F#</li> <li>Cross-language interoperability</li> </ul>"},{"location":"examples/sample-projects/#5-aspire-distributed-application","title":"5. Aspire Distributed Application","text":"<p>Location: <code>samples/Aspire</code></p> <p>Description: .NET Aspire orchestrated application with multiple services using CSnakes.</p> <p>Features:</p> <ul> <li>Service orchestration with .NET Aspire</li> <li>Multiple microservices</li> <li>Shared Python modules</li> <li>Service discovery</li> <li>Monitoring and observability</li> </ul>"},{"location":"examples/sample-projects/#sample-project-details","title":"Sample Project Details","text":""},{"location":"examples/sample-projects/#machine-learning-examples","title":"Machine Learning Examples","text":""},{"location":"examples/sample-projects/#k-means-clustering","title":"K-means Clustering","text":"<p>File: <code>kmeans_example.py</code></p> <pre><code>from sklearn.cluster import k_means\nimport numpy as np\n\ndef calculate_kmeans_inertia(data: list[tuple[int, int]], n_clusters: int) -&gt; tuple[list[list[float]], float]:\n    X = np.array(data)\n    centroid, label, inertia = k_means(\n        X, n_clusters=n_clusters, n_init=\"auto\", random_state=0\n    )\n    return centroid.tolist(), inertia\n</code></pre> <p>C# Usage:</p> <pre><code>var kmeans = env.KmeansExample();\nvar data = new[] { (1, 2), (1, 4), (1, 0), (10, 2), (10, 4), (10, 0) };\nvar (centroids, inertia) = kmeans.CalculateKmeansInertia(data, 2);\n</code></pre>"},{"location":"examples/sample-projects/#getting-started-with-samples","title":"Getting Started with Samples","text":""},{"location":"examples/sample-projects/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/tonybaloney/CSnakes.git\ncd CSnakes/samples\n</code></pre>"},{"location":"examples/sample-projects/#2-choose-a-sample","title":"2. Choose a Sample","text":"<p>Navigate to the sample you want to explore:</p> <pre><code>cd simple/QuickConsoleTest\n</code></pre>"},{"location":"examples/sample-projects/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>For samples requiring Python packages:</p> <pre><code># Create virtual environment\npython -m venv .venv\n.venv\\Scripts\\activate  # Windows\nsource .venv/bin/activate  # Linux/macOS\n\n# Install requirements\npip install -r requirements.txt\n</code></pre>"},{"location":"examples/sample-projects/#4-run-the-sample","title":"4. Run the Sample","text":"<pre><code>dotnet run\n</code></pre>"},{"location":"examples/sample-projects/#sample-project-structure","title":"Sample Project Structure","text":"<p>Most samples follow this structure:</p> <pre><code>SampleProject/\n\u251c\u2500\u2500 SampleProject.csproj          # Project configuration\n\u251c\u2500\u2500 Program.cs                    # Main application entry point\n\u251c\u2500\u2500 python_modules/               # Python code directory\n\u2502   \u251c\u2500\u2500 __init__.py              # Makes it a Python package\n\u2502   \u251c\u2500\u2500 module1.py               # Python functions\n\u2502   \u2514\u2500\u2500 module2.py               # More Python functions\n\u251c\u2500\u2500 requirements.txt             # Python dependencies\n\u251c\u2500\u2500 README.md                    # Sample-specific documentation\n\u2514\u2500\u2500 appsettings.json            # Configuration (for web apps)\n</code></pre>"},{"location":"examples/sample-projects/#performance-benchmarks","title":"Performance Benchmarks","text":""},{"location":"examples/sample-projects/#web-application-performance","title":"Web Application Performance","text":"<p>The WebApp sample includes JMeter load test configurations showing:</p> <ul> <li>Throughput: 1000+ requests/second for simple operations</li> <li>Latency: Sub-millisecond Python function calls</li> <li>Memory: Stable memory usage under load</li> <li>Scalability: Linear scaling with CPU cores</li> </ul>"},{"location":"examples/sample-projects/#troubleshooting-samples","title":"Troubleshooting Samples","text":""},{"location":"examples/sample-projects/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Python Not Found</p> </li> <li> <p>Solution: Use <code>FromRedistributable()</code> locator</p> </li> <li> <p>Alternative: Set <code>PYTHONHOME</code> environment variable</p> </li> <li> <p>Package Import Errors</p> </li> <li> <p>Solution: Check <code>requirements.txt</code> and virtual environment setup</p> </li> <li> <p>Alternative: Use <code>WithPipInstaller()</code> method</p> </li> <li> <p>Build Errors</p> </li> <li> <p>Solution: Ensure Python files are marked as <code>AdditionalFiles</code></p> </li> <li> <p>Alternative: Check .csproj configuration</p> </li> <li> <p>Runtime Exceptions</p> </li> <li> <p>Solution: Check Python syntax and type annotations</p> </li> <li>Alternative: Use try-catch blocks around Python calls</li> </ol>"},{"location":"examples/sample-projects/#getting-help","title":"Getting Help","text":"<ul> <li>Check the FAQ for common questions</li> <li>Review troubleshooting guide for detailed solutions</li> <li>Examine the sample's README.md for specific instructions</li> </ul>"},{"location":"examples/sample-projects/#next-steps","title":"Next Steps","text":"<ul> <li>Explore advanced usage patterns</li> <li>Understand performance optimization</li> </ul>"},{"location":"getting-started/first-example/","title":"Your First Example","text":"<p>Let's create a simple example that demonstrates calling Python code from C#.</p>"},{"location":"getting-started/first-example/#step-1-create-the-python-file","title":"Step 1: Create the Python File","text":"<p>Create a Python file called <code>demo.py</code> in your project with the following content:</p> <pre><code>def hello_world(name: str) -&gt; str:\n    return f\"Hello, {name}!\"\n\ndef add_numbers(a: int, b: int) -&gt; int:\n    return a + b\n\ndef calculate_average(numbers: list[float]) -&gt; float:\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)\n</code></pre>"},{"location":"getting-started/first-example/#step-2-configure-the-project-file","title":"Step 2: Configure the Project File","text":"<p>Mark the Python file as an \"Additional File\" in your <code>.csproj</code> file:</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;AdditionalFiles Include=\"demo.py\"&gt;\n        &lt;CopyToOutputDirectory&gt;Always&lt;/CopyToOutputDirectory&gt;\n    &lt;/AdditionalFiles&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <p>Alternatively, in Visual Studio:</p> <ol> <li>Right-click the Python file</li> <li>Select \"Properties\"</li> <li>Set Build Action to C# analyzer additional file</li> </ol>"},{"location":"getting-started/first-example/#step-3-write-the-c-code","title":"Step 3: Write the C# Code","text":"<pre><code>using CSnakes.Runtime;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nvar builder = Host.CreateApplicationBuilder(args);\nvar home = Path.Join(Environment.CurrentDirectory, \".\");\n\nbuilder.Services\n    .WithPython()\n    .WithHome(home)\n    .FromRedistributable(); // Downloads Python automatically\n\nvar app = builder.Build();\nvar env = app.Services.GetRequiredService&lt;IPythonEnvironment&gt;();\n\n// Get the Python module\nvar module = env.Demo();\n\n// Call Python functions\nvar greeting = module.HelloWorld(\"Alice\");\nConsole.WriteLine(greeting); // Output: Hello, Alice!\n\nvar sum = module.AddNumbers(5, 3);\nConsole.WriteLine($\"5 + 3 = {sum}\"); // Output: 5 + 3 = 8\n\nvar numbers = new[] { 1.5, 2.5, 3.5, 4.5 };\nvar average = module.CalculateAverage(numbers);\nConsole.WriteLine($\"Average: {average}\"); // Output: Average: 2.75\n</code></pre>"},{"location":"getting-started/first-example/#step-4-build-and-run","title":"Step 4: Build and Run","text":"<p>Build your project:</p> <pre><code>dotnet build\n</code></pre> <p>Run your application:</p> <pre><code>dotnet run\n</code></pre>"},{"location":"getting-started/first-example/#whats-happening","title":"What's Happening?","text":"<ol> <li>Type Annotations: CSnakes uses Python type annotations to generate C# method signatures</li> <li>Source Generation: The CSnakes source generator creates C# wrapper methods for your Python functions</li> <li>Method Names: Python function names are converted to PascalCase (e.g., <code>hello_world</code> becomes <code>HelloWorld</code>)</li> <li>Type Conversion: Python types are automatically converted to their C# equivalents</li> </ol>"},{"location":"getting-started/first-example/#generated-c-signatures","title":"Generated C# Signatures","text":"<p>From our Python functions, CSnakes generates these C# method signatures:</p> <pre><code>public string HelloWorld(string name);\npublic long AddNumbers(long a, long b);\npublic double CalculateAverage(IReadOnlyList&lt;double&gt; numbers);\n</code></pre>"},{"location":"getting-started/first-example/#error-handling","title":"Error Handling","text":"<p>If a Python function raises an exception, it will be caught and re-thrown as a <code>PythonInvocationException</code>:</p> <pre><code>try\n{\n    var result = module.SomeFunction();\n}\ncatch (PythonInvocationException ex)\n{\n    Console.WriteLine($\"Python error: {ex.Message}\");\n}\n</code></pre>"},{"location":"getting-started/first-example/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about supported types</li> <li>Explore more examples</li> <li>Set up virtual environments</li> </ul>"},{"location":"getting-started/installation/","title":"Installation (manual setup)","text":"<p>To get started with CSnakes manually, you need to:</p> <ul> <li>Install Python</li> <li>Install the CSnakes.Runtime NuGet package</li> <li>Configure your C# project</li> </ul>"},{"location":"getting-started/installation/#installing-python","title":"Installing Python","text":"<p>CSnakes supports Python 3.9-3.13 and works on Windows, macOS, and Linux.</p>"},{"location":"getting-started/installation/#option-1-let-csnakes-download-python-recommended","title":"Option 1: Let CSnakes Download Python (Recommended)","text":"<p>The simplest option is to use the <code>FromRedistributable</code> method, which will automatically download Python 3.12 and store it locally. This is compatible with Windows, macOS, and Linux.</p> <pre><code>builder.Services\n    .WithPython()\n    .WithHome(home)\n    .FromRedistributable(); // Downloads Python 3.12 automatically\n</code></pre>"},{"location":"getting-started/installation/#option-2-use-system-python","title":"Option 2: Use System Python","text":"<p>If you have Python installed on your system, you can use it directly:</p> <pre><code>builder.Services\n    .WithPython()\n    .WithHome(home)\n    .FromEnvironmentVariable(\"PYTHONHOME\"); // Uses system Python\n</code></pre>"},{"location":"getting-started/installation/#option-3-use-conda","title":"Option 3: Use Conda","text":"<p>If you're using Conda environments:</p> <pre><code>builder.Services\n    .WithPython()\n    .WithHome(home)\n    .FromConda(\"myenv\"); // Uses specified Conda environment\n</code></pre>"},{"location":"getting-started/installation/#installing-the-nuget-package","title":"Installing the NuGet Package","text":"<p>CSnakes is bundled into a single NuGet package: <code>CSnakes.Runtime</code>.</p>"},{"location":"getting-started/installation/#using-package-manager-console","title":"Using Package Manager Console","text":"<pre><code>Install-Package CSnakes.Runtime\n</code></pre>"},{"location":"getting-started/installation/#using-net-cli","title":"Using .NET CLI","text":"<pre><code>dotnet add package CSnakes.Runtime\n</code></pre>"},{"location":"getting-started/installation/#using-packagereference","title":"Using PackageReference","text":"<p>Add this to your <code>.csproj</code> file:</p> <pre><code>&lt;PackageReference Include=\"CSnakes.Runtime\" Version=\"1.*-*\" /&gt;\n</code></pre> <p>This package includes both the source generator and runtime libraries.</p>"},{"location":"getting-started/installation/#configuring-a-c-project","title":"Configuring a C# Project","text":"<p>To setup a C# project for CSnakes, you need to:</p> <ol> <li>Create a new C# project or open an existing one</li> <li>Add your Python files to the project</li> <li>Mark the Python files as \"Additional Files\" in the project file</li> <li>Install the <code>CSnakes.Runtime</code> NuGet package</li> <li>Create a <code>PythonEnvironment</code> in C# and create an instance of the Python module</li> </ol>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>.NET 8 or 9</li> <li>Python 3.9-3.13</li> <li>Windows, macOS, or Linux</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Create your first example</li> <li>Learn about Python environment management</li> <li>Understand the type system</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>The fastest way to get started with CSnakes is to use the supplied template for a C# console project with the <code>dotnet new</code> command.</p> <p>Alternatively, you can install the Nuget package and setup CSnakes in your environment. See installation for more details.</p>"},{"location":"getting-started/quick-start/#using-templates","title":"Using Templates","text":"<p>The templates are installed by running the following command:</p> <pre><code>dotnet new install CSnakes.Templates\n</code></pre> <p>To create a C# console application project with the default options, run the following commands:</p> <pre><code>mkdir MyApp\ncd MyApp\ndotnet new pyapp\n</code></pre> <p>If you run the new application with:</p> <pre><code>dotnet run\n</code></pre> <p>It will print a greetings message from within a Python function that is invoked by C#! This may take a bit the first time you run it because CSnakes will download the Python runtime in a fully isolated environment for the application.</p> <p>To explore the various options offered by the <code>pyapp</code> template, run with the <code>-h</code> flag:</p> <pre><code>dotnet new pyapp -h\n</code></pre>"},{"location":"getting-started/quick-start/#what-you-get","title":"What You Get","text":"<p>The template creates:</p> <ul> <li>A C# console application with CSnakes.Runtime package</li> <li>Example Python files with proper type annotations</li> <li>Configured project file with Python files marked for source generation</li> <li>A simple example demonstrating Python function calls from C#</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about installation for manual setup</li> <li>Try the first example to understand the basics</li> <li>Explore templates for different project types</li> </ul>"},{"location":"getting-started/templates/","title":"Project Templates","text":"<p>CSnakes provides several project templates to help you get started quickly with different types of applications.</p>"},{"location":"getting-started/templates/#available-templates","title":"Available Templates","text":""},{"location":"getting-started/templates/#console-application-template-pyapp","title":"Console Application Template (<code>pyapp</code>)","text":"<p>Creates a simple console application with CSnakes integration.</p> <pre><code>dotnet new pyapp\n</code></pre> <p>What it creates:</p> <ul> <li>Basic console application</li> <li>Example Python file with type annotations</li> <li>Configured <code>.csproj</code> file</li> <li>Simple C# code demonstrating Python function calls</li> </ul>"},{"location":"getting-started/templates/#template-options","title":"Template Options","text":""},{"location":"getting-started/templates/#common-options","title":"Common Options","text":"<p>All templates support these standard dotnet new options:</p> <ul> <li><code>--name</code> (<code>-n</code>) - The name for the output being created</li> <li><code>--output</code> (<code>-o</code>) - Location to place the generated output</li> <li><code>--dry-run</code> - Displays a summary of what would happen without creating files</li> <li><code>--force</code> - Forces content to be generated even if it would change existing files</li> <li><code>--no-update-check</code> - Disables checking for template package updates</li> <li><code>--project</code> - The project that should be used for context evaluation</li> <li><code>--language</code> (<code>-lang</code>) - Specifies the template language (C#)</li> <li><code>--type</code> - Specifies the template type (project)</li> </ul>"},{"location":"getting-started/templates/#csnakes-template-specific-options","title":"CSnakes Template-Specific Options","text":"<ul> <li><code>--PythonVersion</code> (<code>-P</code>) - Python version to target (default: 3.12)</li> <li>Available options: <code>3.9</code>, <code>3.10</code>, <code>3.11</code>, <code>3.12</code>, <code>3.13</code></li> <li><code>--NoVirtualEnvironment</code> (<code>-N</code>) - Disable virtual environment setup (default: false)</li> <li>When false (default), a virtual environment will be created</li> <li><code>--PackageManager</code> (<code>-Pa</code>) - Package manager to use (default: none)</li> <li>Available options: <code>none</code>, <code>pip</code>, <code>uv</code></li> </ul>"},{"location":"getting-started/templates/#examples","title":"Examples","text":""},{"location":"getting-started/templates/#create-a-named-project","title":"Create a Named Project","text":"<pre><code>dotnet new pyapp --name MyPythonApp --output ./MyPythonApp\n</code></pre>"},{"location":"getting-started/templates/#create-with-specific-python-version","title":"Create with Specific Python Version","text":"<pre><code>dotnet new pyapp --PythonVersion 3.11\n</code></pre>"},{"location":"getting-started/templates/#create-with-package-manager","title":"Create with Package Manager","text":"<pre><code>dotnet new pyapp --PackageManager pip\n</code></pre>"},{"location":"getting-started/templates/#create-without-virtual-environment","title":"Create Without Virtual Environment","text":"<pre><code>dotnet new pyapp --NoVirtualEnvironment\n</code></pre>"},{"location":"getting-started/templates/#create-with-multiple-options","title":"Create with Multiple Options","text":"<pre><code>dotnet new pyapp --name DataProcessor --PythonVersion 3.12 --PackageManager uv --output ./data-app\n</code></pre>"},{"location":"getting-started/templates/#template-structure","title":"Template Structure","text":""},{"location":"getting-started/templates/#console-app-template-structure","title":"Console App Template Structure","text":"<pre><code>MyApp/\n\u251c\u2500\u2500 MyApp.csproj\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 python_modules/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 demo.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"getting-started/templates/#customizing-templates","title":"Customizing Templates","text":"<p>You can modify the generated templates by:</p> <ol> <li>Adding Python Dependencies: Edit <code>requirements.txt</code></li> <li>Adding Python Modules: Create new <code>.py</code> files in the python_modules directory</li> <li>Configuring Environment: Modify the Python environment setup in <code>Program.cs</code></li> </ol>"},{"location":"getting-started/templates/#installing-templates","title":"Installing Templates","text":""},{"location":"getting-started/templates/#install-latest-version","title":"Install Latest Version","text":"<pre><code>dotnet new install CSnakes.Templates\n</code></pre>"},{"location":"getting-started/templates/#install-specific-version","title":"Install Specific Version","text":"<pre><code>dotnet new install CSnakes.Templates::1.1.0\n</code></pre>"},{"location":"getting-started/templates/#update-templates","title":"Update Templates","text":"<pre><code>dotnet new update\n</code></pre>"},{"location":"getting-started/templates/#uninstall-templates","title":"Uninstall Templates","text":"<pre><code>dotnet new uninstall CSnakes.Templates\n</code></pre>"},{"location":"getting-started/templates/#next-steps","title":"Next Steps","text":"<ul> <li>Understand basic usage</li> <li>Learn about environments</li> <li>Explore sample projects</li> </ul>"},{"location":"user-guide/async/","title":"Async support","text":"<p>Python async functions will be generated into async C# methods. The generated C# method will return a <code>Task&lt;T&gt;</code> depending on the return type of the Python function. </p> <pre><code>import asyncio\n\nasync def async_function() -&gt; int:\n    await asyncio.sleep(1)\n    return 42\n</code></pre> <p>The generated C# method will have this signature:</p> <pre><code>public async Task&lt;int&gt; AsyncFunction(CancellationToken cancellationToken = default);\n</code></pre> <p>Python async functions can be awaited in C# code.</p>"},{"location":"user-guide/async/#implementation-details","title":"Implementation Details","text":"<p>The C# Async model and the Python Async models have some important differences:</p> <ul> <li>C# creates a task pool and tasks are scheduled on this pool. Python uses a single-threaded event loop.</li> <li>Python event loops belong to the thread that created them. C# tasks can be scheduled on any thread.</li> <li>Python async functions are coroutines that are scheduled on the event loop. C# async functions are tasks that are scheduled on the task pool.</li> </ul> <p>To converge these two models, CSnakes creates a Python event-loop for each C# thread that calls into Python. This event loop is created when the first Python function is called and is destroyed when the thread is disposed. This event loop is used to schedule the Python async functions. Because C# reuses threads in the Task pool, the event loop is reused and kept as a thread-local variable.</p> <p>The behavior is abstracted away from the user, but it is important to understand that the Python event loop is created and destroyed for each C# thread that calls into Python. This is important to understand when debugging or profiling your application.</p>"},{"location":"user-guide/async/#parallelism-considerations","title":"Parallelism considerations","text":"<p>Event though C# uses a thread-pool to schedule tasks, the Python Global Interpreter Lock (GIL) will prevent multiple Python threads from running in parallel. This means that even if you use parallel LINQ or other parallel constructs in C#, CPU-bound Python code will mostly run in a single thread at a time.</p> <p>Python 3.13 and above have a feature called \"free-threading mode\" which allows the Python interpreter to run in a multi-threaded environment without the Global Interpreter Lock (GIL). This is a significant change to the Python runtime and can have a big impact on the performance of Python code running in a multi-threaded environment. See Free-Threading Mode for more information.</p>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the fundamental concepts and patterns for using CSnakes in your .NET applications.</p>"},{"location":"user-guide/basic-usage/#basic-project-setup","title":"Basic Project Setup","text":""},{"location":"user-guide/basic-usage/#1-create-python-module","title":"1. Create Python Module","text":"<p>Create a Python file (e.g., <code>math_utils.py</code>) with type-annotated functions:</p> <pre><code>def add(a: int, b: int) -&gt; int:\n    \"\"\"Add two integers.\"\"\"\n    return a + b\n\ndef divide(a: float, b: float) -&gt; float:\n    \"\"\"Divide two numbers.\"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\ndef get_info() -&gt; dict[str, str]:\n    \"\"\"Return system information.\"\"\"\n    import platform\n    return {\n        \"system\": platform.system(),\n        \"version\": platform.version(),\n        \"machine\": platform.machine()\n    }\n</code></pre>"},{"location":"user-guide/basic-usage/#2-configure-project-file","title":"2. Configure Project File","text":"<p>Add the Python file to your <code>.csproj</code>:</p> <pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\n  &lt;/PropertyGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"CSnakes.Runtime\" Version=\"1.*-*\" /&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;AdditionalFiles Include=\"math_utils.py\"&gt;\n      &lt;CopyToOutputDirectory&gt;Always&lt;/CopyToOutputDirectory&gt;\n    &lt;/AdditionalFiles&gt;\n  &lt;/ItemGroup&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"user-guide/basic-usage/#3-initialize-python-environment","title":"3. Initialize Python Environment","text":"<pre><code>using CSnakes.Runtime;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nvar builder = Host.CreateApplicationBuilder(args);\n\nbuilder.Services\n    .WithPython()\n    .WithHome(Environment.CurrentDirectory)\n    .FromRedistributable();\n\nvar app = builder.Build();\nvar env = app.Services.GetRequiredService&lt;IPythonEnvironment&gt;();\n</code></pre>"},{"location":"user-guide/basic-usage/#4-call-python-functions","title":"4. Call Python Functions","text":"<pre><code>// Get the generated module wrapper\nvar mathModule = env.MathUtils();\n\n// Call Python functions\nvar sum = mathModule.Add(5, 3);\nConsole.WriteLine($\"5 + 3 = {sum}\"); // Output: 5 + 3 = 8\n\nvar quotient = mathModule.Divide(10.0, 3.0);\nConsole.WriteLine($\"10 / 3 = {quotient:F2}\"); // Output: 10 / 3 = 3.33\n\nvar info = mathModule.GetInfo();\nforeach (var (key, value) in info)\n{\n    Console.WriteLine($\"{key}: {value}\");\n}\n</code></pre>"},{"location":"user-guide/basic-usage/#naming-conventions","title":"Naming Conventions","text":"<p>CSnakes automatically converts Python naming conventions to C# conventions for function names:</p> Python C# <code>my_function</code> <code>MyFunction</code> <code>calculate_average</code> <code>CalculateAverage</code> <code>get_user_info</code> <code>GetUserInfo</code> <p>Function argument names are converted to C# conventions in lower case:</p> Python C# <code>my_argument</code> <code>myArgument</code> <code>arg1</code> <code>arg1</code>"},{"location":"user-guide/basic-usage/#module-access","title":"Module Access","text":"<p>Python modules are accessed through the environment using the module's filename:</p> <pre><code># file: data_processor.py\ndef process_data(data: list[int]) -&gt; list[int]:\n    return [x * 2 for x in data]\n</code></pre> <pre><code>// Access the module\nvar processor = env.DataProcessor();\nvar result = processor.ProcessData(new[] { 1, 2, 3, 4 });\n// result: [2, 4, 6, 8]\n</code></pre>"},{"location":"user-guide/basic-usage/#error-handling","title":"Error Handling","text":"<p>Python exceptions are automatically converted to <code>PythonInvocationException</code>:</p> <pre><code>try\n{\n    var result = mathModule.Divide(10.0, 0.0);\n}\ncatch (PythonInvocationException ex)\n{\n    Console.WriteLine($\"Python error: {ex.Message}\");\n    Console.WriteLine($\"Python type: {ex.PythonExceptionType}\");\n    Console.WriteLine($\"Stack trace: {ex.PythonStackTrace}\");\n}\n</code></pre>"},{"location":"user-guide/basic-usage/#working-with-complex-types","title":"Working with Complex Types","text":""},{"location":"user-guide/basic-usage/#lists-and-collections","title":"Lists and Collections","text":"<pre><code>def process_numbers(numbers: list[int]) -&gt; list[int]:\n    return [n * 2 for n in numbers if n &gt; 0]\n\ndef get_user_names() -&gt; list[str]:\n    return [\"Alice\", \"Bob\", \"Charlie\"]\n</code></pre> <pre><code>var numbers = new[] { -1, 2, -3, 4, 5 };\nvar processed = mathModule.ProcessNumbers(numbers);\n// Result: [4, 8, 10]\n\nvar names = mathModule.GetUserNames();\nforeach (var name in names)\n{\n    Console.WriteLine(name);\n}\n</code></pre>"},{"location":"user-guide/basic-usage/#dictionaries","title":"Dictionaries","text":"<pre><code>def create_user(name: str, age: int) -&gt; dict[str, str | int]:\n    return {\"name\": name, \"age\": age, \"id\": hash(name)}\n</code></pre> <pre><code>var user = mathModule.CreateUser(\"Alice\", 30);\nConsole.WriteLine($\"Name: {user[\"name\"]}\");\nConsole.WriteLine($\"Age: {user[\"age\"]}\");\n</code></pre>"},{"location":"user-guide/basic-usage/#tuples","title":"Tuples","text":"<pre><code>def get_coordinates() -&gt; tuple[float, float]:\n    return (12.34, 56.78)\n\ndef parse_name(full_name: str) -&gt; tuple[str, str]:\n    parts = full_name.split(\" \", 1)\n    return (parts[0], parts[1] if len(parts) &gt; 1 else \"\")\n</code></pre> <pre><code>var coordinates = mathModule.GetCoordinates();\nConsole.WriteLine($\"X: {coordinates.Item1}, Y: {coordinates.Item2}\");\n\nvar (firstName, lastName) = mathModule.ParseName(\"John Doe\");\nConsole.WriteLine($\"First: {firstName}, Last: {lastName}\");\n</code></pre>"},{"location":"user-guide/basic-usage/#optional-parameters","title":"Optional Parameters","text":"<p>Python default values are preserved in the generated C# methods:</p> <pre><code>def greet(name: str, prefix: str = \"Hello\", suffix: str = \"!\") -&gt; str:\n    return f\"{prefix}, {name}{suffix}\"\n</code></pre> <pre><code>// All these calls are valid:\nvar greeting1 = mathModule.Greet(\"Alice\");                    // \"Hello, Alice!\"\nvar greeting2 = mathModule.Greet(\"Bob\", \"Hi\");                // \"Hi, Bob!\"\nvar greeting3 = mathModule.Greet(\"Charlie\", \"Hey\", \"!!!\");    // \"Hey, Charlie!!!\"\n</code></pre>"},{"location":"user-guide/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the type system</li> <li>Set up virtual environments</li> <li>Work with NumPy arrays and buffers</li> </ul>"},{"location":"user-guide/buffers/","title":"Buffer Protocol and NumPy Arrays","text":"<p>CSnakes supports the Python Buffer Protocol for <code>bytes</code> and <code>bytearray</code> types. The Buffer Protocol is a low-level interface for reading and writing raw bytes from Python objects. The <code>IPyBuffer</code> interface is used to represent Python objects that support the Buffer Protocol. It has methods for accessing the raw data of the buffer in a Read-Only or Read-Write Span.</p> <p>Since NumPy ndarrays also support the Buffer Protocol, you can use the <code>IPyBuffer</code> interface to efficiently read and write data from NumPy arrays.</p> <p><code>collections.abc.Buffer</code> was introduced in Python 3.12, but for older versions you can import <code>Buffer</code> from the <code>typing_extensions</code> package on PyPi.</p> <p>For example:</p> <pre><code>try:\n    from collections.abc import Buffer\nexcept ImportError:\n    from typing_extensions import Buffer\n\nimport numpy as np\n\ndef example_array() -&gt; Buffer:\n    return np.array([True, False, True, False, False], dtype=np.bool_)\n</code></pre> <p>In this example, the <code>example_array</code> function returns a NumPy array of boolean values. The <code>Buffer</code> type hint indicates that the function returns an object that supports the Buffer Protocol.</p> <p>From C#, CSnakes will return an <code>CSnakes.Runtime.Python.IPyBuffer</code> that provides access to the data as a <code>Span</code>.</p> <p>For example:</p> <pre><code>// Where testModule is a Python module that contains the example_array function\nvar bufferObject = testModule.ExampleArray();\n\n// check if the buffer is scalar (single dimensional)\nif (bufferObject.IsScalar) {\n    // Get the buffer contents as a Span of bool\n    Span&lt;bool&gt; result = bufferObject.AsBoolSpan();\n    Console.WriteLine(result[0]); // True\n    Console.WriteLine(result[4]); // False\n}\n</code></pre> <p>Danger</p> <p><code>Span</code> is writeable so you can also modify the buffer contents from C# and the changes will be reflected in the Python object. If you have want a read-only view of the buffer, you can use the <code>As[T]ReadOnly</code> method to get a read-only Span. We recommend using the read-only methods when you don't need to modify the buffer contents.</p> <p>If you want a read-only view of the buffer, you can use the <code>As[T]ReadOnly</code> method to get a read-only Span.</p> <pre><code>Span&lt;bool&gt; result = bufferObject.AsBoolReadOnlySpan();\n</code></pre>"},{"location":"user-guide/buffers/#two-dimensional-buffers","title":"Two-Dimensional Buffers","text":"<p>The <code>IPyBuffer</code> interface also provides methods for working with two-dimensional buffers. You can use the <code>As[T]Span2D</code> and <code>As[T]ReadOnlySpan2D</code> methods to get a two-dimensional Span of the buffer contents.</p> <p>You can use the <code>Dimensions</code> property to get the dimensions of the buffer. The <code>As[T]Span2D</code> method will throw an exception if the buffer is not two-dimensional.</p> <p>For example:</p> <pre><code>def example_array_2d() -&gt; Buffer:\n    return np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int32)\n</code></pre> <p>From .NET you can access the buffer as a two-dimensional Span:</p> <pre><code>// Where testModule is a Python module that contains the example_array_2d function\nvar result = testModule.ExampleArray2D();\n\n// Get the buffer contents as a two-dimensional Span of int\nSpan2D&lt;int&gt; result2D = result.AsIntSpan2D();\nConsole.WriteLine(result2D[0, 0]); // 1\nConsole.WriteLine(result2D[2, 3]); // 6\n</code></pre>"},{"location":"user-guide/buffers/#n-dimensional-buffers-net-9","title":"N-dimensional Buffers (.NET 9)","text":"<p>In .NET 9, the <code>IPyBuffer</code> interface also provides methods for working with N-dimensional buffers using the Experimental <code>System.Numerics.Tensors.TensorSpan</code> type. You can use the <code>AsTensorSpan</code> and <code>AsReadOnlyTensorSpan</code> methods to get a N-dimensional TensorSpan of the buffer contents.</p> <p>For example:</p> <pre><code>def example_tensor() -&gt; Buffer:\n    arr = np.zeros((2, 3, 4, 5), dtype=np.int32)\n    arr[0, 0, 0, 0] = 1\n    arr[1, 2, 3, 4] = 3\n    return arr\n</code></pre> <p>From .NET you can access the buffer as a N-dimensional TensorSpan:</p> <pre><code>// Where testModule is a Python module that contains the example_tensor function\nvar result = testModule.ExampleTensor();\n\n// Get the buffer contents as a N-dimensional TensorSpan of int\nTensorSpan&lt;int&gt; resultTensor = result.AsTensorSpan&lt;int&gt;(); // or AsInt32ReadOnlyTensorSpan\nConsole.WriteLine(resultTensor[0, 0, 0, 0]); // 1\nConsole.WriteLine(resultTensor[1, 2, 3, 4]); // 3\n</code></pre>"},{"location":"user-guide/buffers/#numpy-type-conversion","title":"NumPy Type Conversion","text":"<p>The Numpy dtypes are mapped to C# types as follows:</p> NumPy dtype C# Type Span Method ReadOnly Span Method Span2D Method ReadOnly Span2D Method TensorSpan Method ReadOnly TensorSpan Method <code>bool</code> <code>bool</code> <code>AsBoolSpan</code> <code>AsBoolReadOnlySpan</code> <code>AsBoolSpan2D</code> <code>AsBoolReadOnlySpan2D</code> <code>AsBoolTensorSpan</code> <code>AsBoolReadOnlyTensorSpan</code> <code>int8</code> <code>sbyte</code> <code>AsSByteSpan</code> <code>AsSByteReadOnlySpan</code> <code>AsSByteSpan2D</code> <code>AsSByteReadOnlySpan2D</code> <code>AsSByteTensorSpan</code> <code>AsSByteReadOnlyTensorSpan</code> <code>int16</code> <code>short</code> <code>AsInt16Span</code> <code>AsInt16ReadOnlySpan</code> <code>AsInt16Span2D</code> <code>AsInt16ReadOnlySpan2D</code> <code>AsInt16TensorSpan</code> <code>AsInt16ReadOnlyTensorSpan</code> <code>int32</code> <code>int</code> <code>AsInt32Span</code> <code>AsInt32ReadOnlySpan</code> <code>AsInt32Span2D</code> <code>AsInt32ReadOnlySpan2D</code> <code>AsInt32TensorSpan</code> <code>AsInt32ReadOnlyTensorSpan</code> <code>int64</code> <code>long</code> <code>AsInt64Span</code> <code>AsInt64ReadOnlySpan</code> <code>AsInt64Span2D</code> <code>AsInt64ReadOnlySpan2D</code> <code>AsInt64TensorSpan</code> <code>AsInt64ReadOnlyTensorSpan</code> <code>uint8</code> <code>byte</code> <code>AsByteSpan</code> <code>AsByteReadOnlySpan</code> <code>AsByteSpan2D</code> <code>AsByteReadOnlySpan2D</code> <code>AsByteTensorSpan</code> <code>AsByteReadOnlyTensorSpan</code> <code>uint16</code> <code>ushort</code> <code>AsUInt16Span</code> <code>AsUInt16ReadOnlySpan</code> <code>AsUInt16Span2D</code> <code>AsUInt16ReadOnlySpan2D</code> <code>AsUInt16TensorSpan</code> <code>AsUInt16ReadOnlyTensorSpan</code> <code>uint32</code> <code>uint</code> <code>AsUInt32Span</code> <code>AsUInt32ReadOnlySpan</code> <code>AsUInt32Span2D</code> <code>AsUInt32ReadOnlySpan2D</code> <code>AsUInt32TensorSpan</code> <code>AsUInt32ReadOnlyTensorSpan</code> <code>uint64</code> <code>ulong</code> <code>AsUInt64Span</code> <code>AsUInt64ReadOnlySpan</code> <code>AsUInt64Span2D</code> <code>AsUInt64ReadOnlySpan2D</code> <code>AsUInt64TensorSpan</code> <code>AsUInt64ReadOnlyTensorSpan</code> <code>float16</code> <code>Half</code> <code>AsHalfSpan</code> <code>AsHalfReadOnlySpan</code> <code>AsHalfSpan2D</code> <code>AsHalfReadOnlySpan2D</code> <code>AsHalfTensorSpan</code> <code>AsHalfReadOnlyTensorSpan</code> <code>float32</code> <code>float</code> <code>AsFloatSpan</code> <code>AsFloatReadOnlySpan</code> <code>AsFloatSpan2D</code> <code>AsFloatReadOnlySpan2D</code> <code>AsFloatTensorSpan</code> <code>AsFloatReadOnlyTensorSpan</code> <code>float64</code> <code>double</code> <code>AsDoubleSpan</code> <code>AsDoubleReadOnlySpan</code> <code>AsDoubleSpan2D</code> <code>AsDoubleReadOnlySpan2D</code> <code>AsDoubleTensorSpan</code> <code>AsDoubleReadOnlyTensorSpan</code> <p>The <code>GetItemType()</code> method can be used to get the C# type of the buffer contents. </p> <p>You can also use generic methods such as <code>AsSpan&lt;T&gt;</code> and <code>AsReadOnlySpan&lt;T&gt;</code> to get a Span of the buffer contents with the specified type. If the requested type does not match the buffer contents, an exception will be thrown.</p>"},{"location":"user-guide/buffers/#bytes-objects-as-buffers","title":"Bytes objects as buffers","text":"<p>In addition to NumPy arrays, you can also use <code>bytes</code> and <code>bytearray</code> objects as buffers. The <code>Buffer</code> type hint can be used to indicate that a function returns a <code>bytes</code> or <code>bytearray</code> object that supports the Buffer Protocol.</p> <p>The Buffer Protocol is an efficient way to read and write bytes between C# and Python. Use <code>AsByteSpan</code> and <code>AsByteReadOnlySpan</code> to access the raw bytes of the buffer.</p>"},{"location":"user-guide/buffers/#handing-non-contiguous-arrays","title":"Handing non-contiguous arrays","text":"<p>If the NumPy array is not C-contiguous, the Buffer conversion throw an exception. This will happen for example when you transpose a NumPy array.</p> <p>To convert a Fortran-contiguous array to a C-contiguous array, you can use the <code>np.ascontiguousarray()</code> function in Python before returning the array to C#.</p>"},{"location":"user-guide/deployment/","title":"Running in Docker containers","text":"<p>CSnakes has a command-line tool for installing Python, creating virtual environments, and installing dependencies.</p> <p>This tool is designed for pre-creating Python environments in Docker images for use in CSnakes projects, but can be used as a general-purpose tool for installing Python. </p>"},{"location":"user-guide/deployment/#overview","title":"Overview","text":"<p>CSnakes.Stage is designed to streamline Python environment setup for CSnakes applications. It automatically downloads the appropriate Python redistributable for your platform, optionally creates virtual environments, and can install Python packages from requirements files.</p>"},{"location":"user-guide/deployment/#installation","title":"Installation","text":"<p>Install CSnakes.Stage as a .NET global tool:</p> <pre><code>dotnet tool install -g CSnakes.Stage\n</code></pre>"},{"location":"user-guide/deployment/#usage","title":"Usage","text":""},{"location":"user-guide/deployment/#basic-syntax","title":"Basic Syntax","text":"<pre><code>setup-python --python &lt;version&gt; [options]\n</code></pre>"},{"location":"user-guide/deployment/#required-parameters","title":"Required Parameters","text":"<ul> <li><code>--python &lt;version&gt;</code> - The Python version to download and use (e.g., <code>3.12</code>, <code>3.11</code>, <code>3.10</code>)</li> </ul>"},{"location":"user-guide/deployment/#optional-parameters","title":"Optional Parameters","text":"<ul> <li><code>--timeout &lt;seconds&gt;</code> - Timeout for downloading Python redistributable (default: 500 seconds)</li> <li><code>--venv &lt;path&gt;</code> - Path where a virtual environment should be created</li> <li><code>--pip-requirements &lt;path&gt;</code> - Path to a pip requirements.txt file to install packages</li> <li><code>--verbose</code> - Enable detailed output during execution</li> </ul>"},{"location":"user-guide/deployment/#examples","title":"Examples","text":""},{"location":"user-guide/deployment/#download-python-312","title":"Download Python 3.12","text":"<pre><code>setup-python --python 3.12\n</code></pre> <p>The path to Python will be printed to the console. This is the same path as used in <code>.FromRedistributable()</code> in CSnakes applications. (<code>%APPDATA%\\CSnakes\\pythonXX</code>)</p>"},{"location":"user-guide/deployment/#download-python-and-create-virtual-environment","title":"Download Python and Create Virtual Environment","text":"<pre><code>setup-python --python 3.12 --venv /app/my-venv\n</code></pre>"},{"location":"user-guide/deployment/#download-python-create-virtual-environment-and-install-dependencies","title":"Download Python, Create Virtual Environment, and Install Dependencies","text":"<pre><code>setup-python --python 3.12 --venv /app/my-venv --pip-requirements /src/requirements.txt\n</code></pre>"},{"location":"user-guide/deployment/#example-dockerfile","title":"Example Dockerfile","text":"<p>This dockerfile shows how to use <code>setup-python</code> to set up a Python environment in a Docker image along with a published .NET application:</p> <pre><code>FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base\nUSER $APP_UID\nWORKDIR /app\nEXPOSE 8080\nEXPOSE 8081\n\nFROM mcr.microsoft.com/dotnet/sdk:9.0 AS build\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\nCOPY [\"ExampleApp/ExampleApp.csproj\", \"ExampleApp/\"]\nRUN dotnet restore \"ExampleApp/ExampleApp.csproj\"\nCOPY . .\nWORKDIR \"/src/ExampleApp\"\nRUN dotnet build \"./ExampleApp.csproj\" -c $BUILD_CONFIGURATION -o /app/build\n\nFROM build AS publish\nARG BUILD_CONFIGURATION=Release\nRUN dotnet publish \"./ExampleApp.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\nRUN dotnet tool install --global CSnakes.Stage\nENV PATH=\"/root/.dotnet/tools:${PATH}\"\nRUN setup-python --python 3.12 --venv /app/venv --pip-requirements /src/ExampleApp/requirements.txt --verbose\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nCOPY --from=publish /root/.config/CSnakes /home/app/.config/CSnakes\nCOPY --from=publish /app/venv /app/venv\nENTRYPOINT [\"dotnet\", \"ExampleApp.dll\"]\n</code></pre>"},{"location":"user-guide/environments/","title":"Environment and Package Management","text":"<p>CSnakes comes with support for executing Python within a virtual environment and the specification of dependencies.</p> <p>There are two main package management solutions for Python, <code>pip</code> and <code>conda</code>. <code>pip</code> is the default package manager for Python and is included with the Python installation. <code>conda</code> is a package manager that is included with the Anaconda distribution of Python. Both package managers can be used to install packages and manage dependencies.</p> <p>There are various ways to create \"virtual\" environments in Python, where the dependencies are isolated from the system Python installation. The most common way is to use the <code>venv</code> module that is included with Python. The <code>venv</code> module is used to create virtual environments and manage dependencies. </p> <p>Virtual Environment creation and package management are separate concerns in Python, but some tools (like conda) combine them into a single workflow. CSnakes separates these concerns to give you more flexibility in managing your Python environments.</p>"},{"location":"user-guide/environments/#virtual-environments-with-venv","title":"Virtual Environments with <code>venv</code>","text":"<p>Use the <code>.WithVirtualEnvironment(path)</code> method to specify the path to the virtual environment.</p> <p>You can also optionally use the <code>.WithPipInstaller()</code> method to install packages listed in a <code>requirements.txt</code> file in the virtual environment. If you don't use this method, you need to install the packages manually before running the application.</p> <pre><code>...\nservices\n    .WithPython()\n    .WithVirtualEnvironment(Path.Join(home, \".venv\"))\n    // Python locators\n    .WithPipInstaller(); // Optional - installs packages listed in requirements.txt on startup\n</code></pre>"},{"location":"user-guide/environments/#disabling-automatic-environment-creation","title":"Disabling automatic environment creation","text":""},{"location":"user-guide/environments/#virtual-environments-with-conda","title":"Virtual Environments with <code>conda</code>","text":"<p>To use the <code>conda</code> package manager, you need to specify the path to the <code>conda</code> executable and the name of the environment you want to use:</p> <ol> <li>Add the <code>FromConda()</code> extension method the host builder. </li> <li>Use the <code>.WithCondaEnvironment(name)</code> method to specify the name of the environment you want to use.</li> </ol> <pre><code>...\nservices\n    .WithPython()\n    .FromConda(condaBinPath)\n    .WithCondaEnvironment(\"name_of_environment\");\n</code></pre> <p>The Conda Environment manager doesn't currently support automatic creation of environments or installing packages from an <code>environment.yml</code> file, so you need to create the environment and install the packages manually before running the application, by using <code>conda env create -n name_of_environment -f environment.yml</code></p>"},{"location":"user-guide/environments/#installing-dependencies-with-pip","title":"Installing dependencies with <code>pip</code>","text":"<p>If you want to install dependencies using <code>pip</code>, you can use the <code>.WithPipInstaller()</code> method. This method will install the packages listed in a <code>requirements.txt</code> file in the virtual environment.</p> <pre><code>...\nservices\n    .WithPython()\n    .WithVirtualEnvironment(Path.Join(home, \".venv\"))\n    .WithPipInstaller(); // Optional - installs packages listed in requirements.txt on startup\n</code></pre> <p><code>.WithPipInstaller()</code> takes an optional argument that specifies the path to the <code>requirements.txt</code> file. If you don't specify a path, it will look for a <code>requirements.txt</code> file in the virtual environment directory.</p>"},{"location":"user-guide/environments/#installing-dependencies-with-uv","title":"Installing dependencies with <code>uv</code>","text":"<p><code>uv</code> is an alternative to pip that can also install requirements from a file like <code>requirements.txt</code> or <code>pyproject.toml</code>. UV has a major benefit in a 10-100x speedup over pip, so your CSnakes applications will be faster to start.</p> <p>To use uv to install packages:</p> <pre><code>...\nservices\n    .WithPython()\n    .WithVirtualEnvironment(Path.Join(home, \".venv\"))\n    .WithUvInstaller(\"requirements.txt\"); // Optional - give the name of the requirements file, or pyproject.toml\n</code></pre> <p>Some other important notes about this implementation.</p> <ul> <li>Only uses uv to install packages and does not use uv to create projects or virtual environments.</li> <li>Must be used with <code>WithVirtualEnvironment()</code>, as pip requires a virtual environment to install packages into.</li> <li>Will use the <code>UV_CACHE_DIR</code> environment variable to cache the packages in a directory if set.</li> <li>Will disable the cache if the <code>UV_NO_CACHE</code> environment variable is set.</li> </ul>"},{"location":"user-guide/environments/#installing-packages-at-runtime","title":"Installing packages at runtime","text":"<p>You can resolve the <code>IPythonPackageInstaller</code> service to install packages in the virtual environment. This is useful if you want to install a package at runtime without having to modify the <code>requirements.txt</code> file.</p> <pre><code>services // As existing (see above examples)\n    .WithPython()\n    .WithVirtualEnvironment(Path.Join(home, \".venv\"))\n    .WithPipInstaller(); // Optional - installs packages listed in requirements.txt on startup\n\n// Environment/host builder setup\n\nvar installer = serviceProvider.GetRequiredService&lt;IPythonPackageInstaller&gt;();\nawait installer.InstallPackage(\"attrs==25.3.0\");\n</code></pre> <p>This requires both an environment manager (UV or venv) and a package installer to be set up, as it uses the same mechanisms to install packages.</p> <p>Optionally, you can install multiple packages at once by passing a list of package names:</p> <pre><code>await installer.InstallPackages(new[] { \"attrs==25.3.0\", \"requests==2.31.0\" });\n</code></pre> <p>Or, if the package names are in a file, you can use:</p> <pre><code>await installer.InstallPackagesFromRequirements(\"requirements.txt\");\n</code></pre>"},{"location":"user-guide/errors/","title":"Exception Handling","text":"<p>CSnakes will raise a <code>PythonInvocationException</code> if an error occurs during the execution of the Python code. The <code>PythonInvocationException</code> class contains the error message from the Python interpreter as the <code>InnerException</code>.</p> <p>If the annotations are incorrect and your Python code returns a different type to what CSnakes was expecting, an <code>InvalidCastException</code> will be thrown with the details of the source and destination types.</p>"},{"location":"user-guide/errors/#fetching-stack-traces","title":"Fetching stack traces","text":"<p>You can fetch the Python stack trace as well as the Globals and Locals of the top frame by getting the <code>InnerException</code> attribute of the raised <code>PythonInvocationException</code>:</p> <pre><code>try\n{\n  env.MethodToCall();\n}\ncatch (PythonInvocationException ex)\n{\n  Console.WriteLine(ex.PythonExceptionType); // E.g. ValueError\n  Console.WriteLine(ex.InnerException.PythonStackTrace); // IEnumerable&lt;string&gt; with the complete stack trace\n  Console.WriteLine(ex.InnerException.Data[\"locals\"]); // Dictionary &lt;string, PyObject&gt;\n  Console.WriteLine(ex.InnerException.Data[\"globals\"]); // Dictionary &lt;string, PyObject&gt;\n}\n</code></pre>"},{"location":"user-guide/pyobject/","title":"Working with PyObject","text":"<p>The <code>PyObject</code> class is the foundation of Python interoperability in CSnakes. It represents a Python object and provides methods to interact with it directly from C#. This is useful for advanced scenarios where you need to work with Python objects that don't have direct C# type mappings.</p>"},{"location":"user-guide/pyobject/#creating-pyobject-instances","title":"Creating PyObject Instances","text":""},{"location":"user-guide/pyobject/#from-net-values","title":"From .NET Values","text":"<p>You can create <code>PyObject</code> instances from various .NET types using the static <code>From</code> methods:</p> <pre><code>// Basic types\nPyObject pyString = PyObject.From(\"Hello, World!\");\nPyObject pyInt = PyObject.From(42);\nPyObject pyFloat = PyObject.From(3.14);\nPyObject pyBool = PyObject.From(true);\nPyObject pyNone = PyObject.From(null);\n\n// Collections\nPyObject pyList = PyObject.From(new[] { 1, 2, 3, 4, 5 });\nPyObject pyDict = PyObject.From(new Dictionary&lt;string, object&gt;\n{\n    [\"name\"] = \"Alice\",\n    [\"age\"] = 30,\n    [\"active\"] = true\n});\n\n// Tuples\nPyObject pyTuple = PyObject.From((1, \"hello\", 3.14));\n</code></pre>"},{"location":"user-guide/pyobject/#none-values","title":"None Values","text":"<p>The <code>PyObject.None</code> property provides access to Python's <code>None</code> value:</p> <pre><code>PyObject noneValue = PyObject.None;\nConsole.WriteLine(noneValue.IsNone()); // True\n</code></pre>"},{"location":"user-guide/pyobject/#object-comparisons","title":"Object Comparisons","text":""},{"location":"user-guide/pyobject/#identity-comparison-is-operator","title":"Identity Comparison (<code>is</code> operator)","text":"<p>The equivalent to Python's <code>x is y</code> operator uses the <code>Is()</code> method:</p> <pre><code>// Small numbers are the same object in Python (weird implementation detail)\nPyObject obj1 = PyObject.From(42);\nPyObject obj2 = PyObject.From(42);\nif (obj1.Is(obj2))\n    Console.WriteLine(\"Objects are the same instance!\");\n\n// None values are always the same instance\nPyObject none1 = PyObject.None;\nPyObject none2 = PyObject.None;\nConsole.WriteLine(none1.Is(none2)); // True\n</code></pre>"},{"location":"user-guide/pyobject/#equality-comparison-operator","title":"Equality Comparison (<code>==</code> operator)","text":"<p>Equality can be checked using the <code>.Equals()</code> method or <code>==</code> operators:</p> <pre><code>PyObject obj1 = PyObject.From(3.0);\nPyObject obj2 = PyObject.From(3);\nif (obj1 == obj2) \n    Console.WriteLine(\"Objects are equal!\"); // Python considers 3.0 == 3\n\n// Collection equality\nPyObject list1 = PyObject.From(new[] { \"Hello!\", \"World!\" });\nPyObject list2 = PyObject.From(new[] { \"Hello!\", \"World!\" });\nConsole.WriteLine(list1.Equals(list2)); // True\n</code></pre>"},{"location":"user-guide/pyobject/#inequality-comparison-operator","title":"Inequality Comparison (<code>!=</code> operator)","text":"<p>Inequality can be checked using the <code>.NotEquals()</code> method or <code>!=</code> operators:</p> <pre><code>PyObject obj1 = PyObject.From(\"Hello!\");\nPyObject obj2 = PyObject.From(\"Hello?\");\nif (obj1 != obj2) \n    Console.WriteLine(\"Objects are not equal!\");\n\n// Using NotEquals method\nif (obj1.NotEquals(obj2))\n    Console.WriteLine(\"Objects are not equal!\");\n</code></pre>"},{"location":"user-guide/pyobject/#ordering-comparisons","title":"Ordering Comparisons","text":"<p>PyObject supports ordering comparisons with <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code> operators:</p> <pre><code>PyObject a = PyObject.From(5);\nPyObject b = PyObject.From(10);\n\nConsole.WriteLine(a &lt; b);  // True\nConsole.WriteLine(a &lt;= b); // True\nConsole.WriteLine(a &gt; b);  // False\nConsole.WriteLine(a &gt;= b); // False\n\n// String comparison\nPyObject str1 = PyObject.From(\"apple\");\nPyObject str2 = PyObject.From(\"banana\");\nConsole.WriteLine(str1 &lt; str2); // True (lexicographic order)\n</code></pre>"},{"location":"user-guide/pyobject/#boolean-context","title":"Boolean Context","text":""},{"location":"user-guide/pyobject/#truthiness-testing","title":"Truthiness Testing","text":"<p>You can test if a PyObject is truthy using the <code>true</code> operator or if statements:</p> <pre><code>// Various truthy/falsy values\nPyObject[] values = {\n    PyObject.From(true),           // True\n    PyObject.From(false),          // False\n    PyObject.From(42),             // True\n    PyObject.From(0),              // False\n    PyObject.From(\"hello\"),        // True\n    PyObject.From(\"\"),             // False\n    PyObject.From(new[] { 1, 2 }), // True\n    PyObject.From(Array.Empty&lt;int&gt;()), // False\n    PyObject.None                  // False\n};\n\nforeach (var value in values)\n{\n    if (value)\n        Console.WriteLine($\"{value.GetRepr()} is truthy\");\n    else\n        Console.WriteLine($\"{value.GetRepr()} is falsy\");\n}\n</code></pre>"},{"location":"user-guide/pyobject/#logical-not","title":"Logical NOT","text":"<p>Use the <code>!</code> operator to check if an object is falsy:</p> <pre><code>PyObject emptyList = PyObject.From(Array.Empty&lt;int&gt;());\nif (!emptyList)\n    Console.WriteLine(\"Empty list is falsy\");\n\nPyObject zero = PyObject.From(0);\nif (!zero)\n    Console.WriteLine(\"Zero is falsy\");\n</code></pre>"},{"location":"user-guide/pyobject/#object-inspection","title":"Object Inspection","text":""},{"location":"user-guide/pyobject/#getting-object-type","title":"Getting Object Type","text":"<p>Get the Python type of an object:</p> <pre><code>PyObject pyString = PyObject.From(\"Hello, World!\");\nPyObject stringType = pyString.GetPythonType();\nConsole.WriteLine(stringType.ToString()); // &lt;class 'str'&gt;\n</code></pre>"},{"location":"user-guide/pyobject/#string-representations","title":"String Representations","text":"<p>Get string representations using <code>ToString()</code> and <code>GetRepr()</code>:</p> <pre><code>PyObject pyString = PyObject.From(\"hello\");\n\n// str() representation\nConsole.WriteLine(pyString.ToString()); // hello\n\n// repr() representation  \nConsole.WriteLine(pyString.GetRepr()); // 'hello'\n</code></pre>"},{"location":"user-guide/pyobject/#attribute-access","title":"Attribute Access","text":"<p>Check for and access object attributes:</p> <pre><code>PyObject pyString = PyObject.From(\"Hello, World!\");\n\n// Check if attribute exists\nif (pyString.HasAttr(\"__doc__\"))\n{\n    // Get attribute value\n    PyObject docAttr = pyString.GetAttr(\"__doc__\");\n    Console.WriteLine(docAttr.ToString());\n}\n\n// Access string methods\nPyObject upperMethod = pyString.GetAttr(\"upper\");\nPyObject upperResult = upperMethod.Call();\nConsole.WriteLine(upperResult.ToString()); // HELLO, WORLD!\n</code></pre>"},{"location":"user-guide/pyobject/#method-calls","title":"Method Calls","text":""},{"location":"user-guide/pyobject/#simple-method-calls","title":"Simple Method Calls","text":"<p>Call Python methods without arguments:</p> <pre><code>PyObject pyList = PyObject.From(new[] { 1, 2, 3 });\nPyObject copyMethod = pyList.GetAttr(\"copy\");\nPyObject copiedList = copyMethod.Call();\n</code></pre>"},{"location":"user-guide/pyobject/#method-calls-with-arguments","title":"Method Calls with Arguments","text":"<p>Call Python methods with positional arguments:</p> <pre><code>PyObject pyList = PyObject.From(new[] { 1, 2, 3 });\nPyObject appendMethod = pyList.GetAttr(\"append\");\n\n// Append a value\nappendMethod.Call(PyObject.From(4));\nConsole.WriteLine(pyList.ToString()); // [1, 2, 3, 4]\n</code></pre>"},{"location":"user-guide/pyobject/#method-calls-with-keyword-arguments","title":"Method Calls with Keyword Arguments","text":"<p>Call methods with both positional and keyword arguments:</p> <pre><code>// Example: str.replace(old, new, count=1)\nPyObject pyString = PyObject.From(\"hello world hello\");\nPyObject replaceMethod = pyString.GetAttr(\"replace\");\n\nPyObject result = replaceMethod.CallWithKeywordArguments(\n    args: new[] { PyObject.From(\"hello\"), PyObject.From(\"hi\") },\n    kwnames: new[] { \"count\" },\n    kwvalues: new[] { PyObject.From(1) }\n);\n\nConsole.WriteLine(result.ToString()); // hi world hello\n</code></pre>"},{"location":"user-guide/pyobject/#type-conversion","title":"Type Conversion","text":""},{"location":"user-guide/pyobject/#converting-to-net-types","title":"Converting to .NET Types","text":"<p>Convert PyObject instances back to .NET types using the <code>As&lt;T&gt;()</code> method:</p> <pre><code>// Create Python objects\nPyObject pyInt = PyObject.From(42);\nPyObject pyString = PyObject.From(\"Hello\");\nPyObject pyList = PyObject.From(new[] { 1, 2, 3 });\n\n// Convert back to .NET types\nlong intValue = pyInt.As&lt;long&gt;();\nstring stringValue = pyString.As&lt;string&gt;();\nIReadOnlyList&lt;object&gt; listValue = pyList.As&lt;IReadOnlyList&lt;object&gt;&gt;();\n\nConsole.WriteLine($\"Integer: {intValue}\");\nConsole.WriteLine($\"String: {stringValue}\");\nConsole.WriteLine($\"List: [{string.Join(\", \", listValue)}]\");\n</code></pre>"},{"location":"user-guide/pyobject/#safe-type-conversion","title":"Safe Type Conversion","text":"<p>Handle conversion errors with try-catch blocks:</p> <pre><code>PyObject unknownObject = GetSomePythonObject();\n\ntry\n{\n    var stringValue = unknownObject.As&lt;string&gt;();\n    Console.WriteLine($\"Got string: {stringValue}\");\n}\ncatch (InvalidCastException)\n{\n    try\n    {\n        var longValue = unknownObject.As&lt;long&gt;();\n        Console.WriteLine($\"Got number: {longValue}\");\n    }\n    catch (InvalidCastException)\n    {\n        Console.WriteLine(\"Could not convert to string or number\");\n    }\n}\n</code></pre>"},{"location":"user-guide/pyobject/#iteration","title":"Iteration","text":""},{"location":"user-guide/pyobject/#iterating-over-python-objects","title":"Iterating Over Python Objects","text":"<p>Use <code>AsEnumerable&lt;T&gt;()</code> to iterate over Python sequences:</p> <pre><code>PyObject pyList = PyObject.From(new[] { \"apple\", \"banana\", \"cherry\" });\n\n// Iterate as strings\nforeach (string item in pyList.AsEnumerable&lt;string&gt;())\n{\n    Console.WriteLine(item);\n}\n\n// Iterate as PyObjects for more control\nforeach (PyObject item in pyList.AsEnumerable&lt;PyObject&gt;())\n{\n    Console.WriteLine($\"Item: {item.GetRepr()}, Type: {item.GetPythonType()}\");\n}\n</code></pre>"},{"location":"user-guide/pyobject/#working-with-generators","title":"Working with Generators","text":"<p>Iterate over Python generators and iterators:</p> <pre><code>// Assuming you have a Python function that returns a generator\nvar pythonModule = env.SomeModule();\nPyObject generator = pythonModule.GetGenerator();\n\nforeach (var item in generator.AsEnumerable&lt;int&gt;())\n{\n    Console.WriteLine($\"Generated: {item}\");\n}\n</code></pre>"},{"location":"user-guide/pyobject/#memory-management","title":"Memory Management","text":""},{"location":"user-guide/pyobject/#resource-disposal","title":"Resource Disposal","text":"<p>PyObject implements <code>IDisposable</code> and should be properly disposed:</p> <pre><code>// Using 'using' statements (recommended)\nusing PyObject pyObj = PyObject.From(\"Hello, World!\");\nConsole.WriteLine(pyObj.ToString());\n// Object is automatically disposed here\n\n// Manual disposal\nPyObject pyObj2 = PyObject.From(42);\ntry\n{\n    Console.WriteLine(pyObj2.ToString());\n}\nfinally\n{\n    pyObj2.Dispose();\n}\n</code></pre>"},{"location":"user-guide/pyobject/#cloning-objects","title":"Cloning Objects","text":"<p>Create copies of PyObject instances:</p> <pre><code>PyObject original = PyObject.From(\"Hello\");\nPyObject cloned = original.Clone();\n\n// Both objects refer to the same Python string object\nConsole.WriteLine(original.Is(cloned)); // True for immutable objects\n</code></pre>"},{"location":"user-guide/pyobject/#hash-codes","title":"Hash Codes","text":"<p>Get hash codes for use in .NET collections:</p> <pre><code>PyObject obj1 = PyObject.From(\"hello\");\nPyObject obj2 = PyObject.From(\"world\");\n\nvar hashSet = new HashSet&lt;PyObject&gt; { obj1, obj2 };\nConsole.WriteLine($\"HashSet contains {hashSet.Count} items\");\n\n// Hash codes match Python's hash() function\nConsole.WriteLine($\"Hash of 'hello': {obj1.GetHashCode()}\");\n</code></pre>"},{"location":"user-guide/pyobject/#error-handling","title":"Error Handling","text":""},{"location":"user-guide/pyobject/#python-exception-handling","title":"Python Exception Handling","text":"<p>When PyObject operations fail, they throw <code>PythonInvocationException</code>:</p> <pre><code>try\n{\n    PyObject pyObj = PyObject.From(42);\n    // This will fail because integers don't have an 'invalid_method'\n    PyObject method = pyObj.GetAttr(\"invalid_method\");\n}\ncatch (PythonInvocationException ex)\n{\n    Console.WriteLine($\"Python error: {ex.PythonExceptionType}\");\n    Console.WriteLine($\"Message: {ex.Message}\");\n}\n</code></pre>"},{"location":"user-guide/pyobject/#null-checking","title":"Null Checking","text":"<p>Always check for null when working with PyObject:</p> <pre><code>PyObject? result = GetOptionalPythonObject();\nif (result != null)\n{\n    using (result)\n    {\n        Console.WriteLine(result.ToString());\n    }\n}\n</code></pre>"},{"location":"user-guide/pyobject/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/pyobject/#1-always-use-using-statements","title":"1. Always Use <code>using</code> Statements","text":"<pre><code>// Good - automatic disposal\nusing PyObject pyObj = PyObject.From(\"Hello\");\nConsole.WriteLine(pyObj.ToString());\n\n// Avoid - manual disposal required\nPyObject pyObj2 = PyObject.From(\"Hello\");\n// ... easy to forget to dispose\n</code></pre>"},{"location":"user-guide/pyobject/#2-check-object-types-before-conversion","title":"2. Check Object Types Before Conversion","text":"<pre><code>PyObject unknownObj = GetPythonObject();\n\n// Check the type first\nPyObject objType = unknownObj.GetPythonType();\nstring typeName = objType.GetAttr(\"__name__\").ToString();\n\nif (typeName == \"str\")\n{\n    string value = unknownObj.As&lt;string&gt;();\n    // Work with string\n}\nelse if (typeName == \"int\")\n{\n    long value = unknownObj.As&lt;long&gt;();\n    // Work with integer\n}\n</code></pre>"},{"location":"user-guide/pyobject/#3-handle-none-values","title":"3. Handle None Values","text":"<pre><code>PyObject result = CallPythonFunction();\n\nif (result.IsNone())\n{\n    Console.WriteLine(\"Function returned None\");\n}\nelse\n{\n    // Process the actual result\n    ProcessResult(result);\n}\n</code></pre>"},{"location":"user-guide/pyobject/#4-use-appropriate-collection-types","title":"4. Use Appropriate Collection Types","text":"<pre><code>// For lists - use IReadOnlyList&lt;T&gt;\nPyObject pyList = PyObject.From(new[] { 1, 2, 3 });\nIReadOnlyList&lt;long&gt; list = pyList.As&lt;IReadOnlyList&lt;long&gt;&gt;();\n\n// For dictionaries - use IReadOnlyDictionary&lt;K, V&gt;\nPyObject pyDict = PyObject.From(new Dictionary&lt;string, int&gt; { [\"a\"] = 1 });\nIReadOnlyDictionary&lt;string, long&gt; dict = pyDict.As&lt;IReadOnlyDictionary&lt;string, long&gt;&gt;();\n</code></pre>"},{"location":"user-guide/pyobject/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about type conversions</li> <li>Work with async functions</li> <li>Handle errors gracefully</li> </ul>"},{"location":"user-guide/type-system/","title":"Type System","text":"<p>CSnakes provides seamless integration between Python and C# type systems through automatic and manual type conversion.</p> <p>In Python, every object inherits from the base object type (<code>PyObject</code>). CSnakes has a <code>PyObject</code> class that represents all Python objects in C#. This class provides methods for attribute access, method invocation, and function calls, allowing you to interact with Python objects as if they were native C# objects.</p> <p>The <code>PyObject</code> class in CSnakes has conversions to and from many C# types. You can also do anything you can do in Python (get attributes, call methods, call functions) on instances of <code>PyObject</code></p> <p>To make development easier, the CSnakes source generator generates the conversions (marshalling) calls to and from Python functions by using their type signatures.</p> <p>Any of the supported types can be used in the <code>PyObject.From&lt;T&gt;(T object)</code> and <code>T PyObject.As&lt;T&gt;(PyObject x)</code> calls to marshal data from C# types into Python objects. <code>PyObject</code> instances contain a <code>SafeHandle</code> to the allocated memory for the Python object in the Python interpreter. When the object is disposed in C#, the reference is decremented and the object is released. C# developers don't need to worry about manually incrementing and decrementing references to Python objects, they can work within the design of the existing .NET Garbage Collector.</p>"},{"location":"user-guide/type-system/#supported-type-mappings","title":"Supported Type Mappings","text":"<p>CSnakes supports the following typed scenarios:</p> Python type annotation Reflected C# Type <code>int</code> <code>long</code> <code>float</code> <code>double</code> <code>str</code> <code>string</code> <code>bytes</code> <code>byte[]</code> <code>bool</code> <code>bool</code> <code>list[T]</code> <code>IReadOnlyList&lt;T&gt;</code> <code>dict[K, V]</code> <code>IReadOnlyDictionary&lt;K, V&gt;</code> <code>tuple[T1, T2, ...]</code> <code>(T1, T2, ...)</code> <code>typing.Sequence[T]</code> <code>IReadOnlyList&lt;T&gt;</code> <code>typing.Dict[K, V]</code> <code>IReadOnlyDictionary&lt;K, V&gt;</code> <code>typing.Mapping[K, V]</code> <code>IReadOnlyDictionary&lt;K, V&gt;</code> <code>typing.Tuple[T1, T2, ...]</code> <code>(T1, T2, ...)</code> <code>typing.Optional[T]</code> <code>T?</code> <code>T | None</code> <code>T?</code> <code>typing.Generator[TYield, TSend, TReturn]</code> <code>IGeneratorIterator&lt;TYield, TSend, TReturn&gt;</code> <code>typing.Buffer</code> <code>IPyBuffer</code> 2 <code>typing.Coroutine[TYield, TSend, TReturn]</code> <code>Task&lt;TYield&gt;</code> 3 <code>None</code> (Return) <code>void</code>"},{"location":"user-guide/type-system/#optional-types","title":"Optional Types","text":"<p>CSnakes supports Python's optional type annotations from both <code>Optional[T]</code> and <code>T | None</code> (Python 3.10+):</p> <pre><code>def find_user(user_id: int) -&gt; str | None:\n    # Returns username or None if not found\n    users = {1: \"Alice\", 2: \"Bob\"}\n    return users.get(user_id)\n\ndef process_optional(value: int | None = None) -&gt; str:\n    if value is None:\n        return \"No value provided\"\n    return f\"Value is {value}\"\n\ndef optional_old_style(value: Optional[int] = None) -&gt; None:\n    pass\n</code></pre> <p>Generated C# signatures:</p> <pre><code>public string? FindUser(long userId);\npublic string ProcessOptional(long? value = null);\npublic void OptionalOldStyle(long? value = null);\n</code></pre>"},{"location":"user-guide/type-system/#collections","title":"Collections","text":""},{"location":"user-guide/type-system/#lists","title":"Lists","text":"<pre><code>def process_numbers(numbers: list[int]) -&gt; list[str]:\n    return [str(n * 2) for n in numbers]\n\ndef filter_positive(numbers: list[float]) -&gt; list[float]:\n    return [n for n in numbers if n &gt; 0]\n</code></pre> <pre><code>var numbers = new[] { 1, 2, 3, 4, 5 };\nIReadOnlyList&lt;string&gt; result = module.ProcessNumbers(numbers);\n// Result: [\"2\", \"4\", \"6\", \"8\", \"10\"]\n\nvar floats = new[] { -1.5, 2.3, -0.1, 4.7 };\nIReadOnlyList&lt;double&gt; positive = module.FilterPositive(floats);\n// Result: [2.3, 4.7]\n</code></pre>"},{"location":"user-guide/type-system/#dictionaries","title":"Dictionaries","text":"<pre><code>def word_count(text: str) -&gt; dict[str, int]:\n    words = text.split()\n    return {word: words.count(word) for word in set(words)}\n\ndef user_lookup() -&gt; dict[int, str]:\n    return {1: \"Alice\", 2: \"Bob\", 3: \"Charlie\"}\n</code></pre> <pre><code>var text = \"hello world hello\";\nIReadOnlyDictionary&lt;string, long&gt; counts = module.WordCount(text);\n// Result: {\"hello\": 2, \"world\": 1}\n\nvar users = module.UserLookup();\nstring userName = users[1]; // \"Alice\"\n</code></pre>"},{"location":"user-guide/type-system/#tuples","title":"Tuples","text":"<p>CSnakes supports simple tuples as types up to 17 items:</p> <pre><code>def get_name_age() -&gt; tuple[str, int]:\n    return (\"Alice\", 30)\n\ndef get_coordinates() -&gt; tuple[float, float, float]:\n    return (12.34, 56.78, 90.12)\n</code></pre> <pre><code>var (name, age) = module.GetNameAge();\nConsole.WriteLine($\"{name} is {age} years old\");\n\nvar (x, y, z) = module.GetCoordinates();\nConsole.WriteLine($\"Position: ({x}, {y}, {z})\");\n</code></pre>"},{"location":"user-guide/type-system/#default-values","title":"Default Values","text":"<p>Python default values for types which support compile-time constants in C# (string, int, float, bool) are preserved in the generated C# methods:</p> <pre><code>def greet(name: str, greeting: str = \"Hello\", punctuation: str = \"!\") -&gt; str:\n    return f\"{greeting}, {name}{punctuation}\"\n\ndef calculate(value: float, multiplier: float = 2.0, add_value: int = 0) -&gt; float:\n    return value * multiplier + add_value\n</code></pre> <p>Generated C# methods:</p> <pre><code>public string Greet(string name, string greeting = \"Hello\", string punctuation = \"!\");\npublic double Calculate(double value, double multiplier = 2.0, long addValue = 0);\n</code></pre> <p>Usage:</p> <pre><code>// Use all defaults\nstring msg1 = module.Greet(\"Alice\"); // \"Hello, Alice!\"\n\n// Override some defaults\nstring msg2 = module.Greet(\"Bob\", \"Hi\"); // \"Hi, Bob!\"\n\n// Override all parameters\nstring msg3 = module.Greet(\"Charlie\", \"Hey\", \"?\"); // \"Hey, Charlie?\"\n</code></pre>"},{"location":"user-guide/type-system/#unsupported-types","title":"Unsupported Types","text":"<p>See Roadmap for a list of unsupported types and possible alternatives.</p>"},{"location":"user-guide/type-system/#handling-none","title":"Handling None","text":"<p>If you need to send <code>None</code> as a <code>PyObject</code> to any function call from C#, use the property <code>PyObject.None</code>:</p> <pre><code>env.MethodToCall(PyObject.None);\n</code></pre> <p>You can also check if a PyObject is None by calling <code>IsNone()</code> on any PyObject:</p> <pre><code>PyObject obj = env.MethodToCall();\nif (obj.IsNone())\n{\n  Console.WriteLine(\"The object is None\");\n}\n</code></pre> <p>Python's type system is unconstrained, so even though a function can say it returns a <code>int</code> it can return <code>None</code> object. Sometimes it's also useful to check for <code>None</code> values.</p>"},{"location":"user-guide/type-system/#working-with-pyobject","title":"Working with PyObject","text":"<p>For advanced scenarios, you can work directly with <code>PyObject</code>:</p> <pre><code>from typing import Any\n\ndef get_person() -&gt; Any:\n    return ... # an object of some sort\n</code></pre> <pre><code>using CSnakes.Runtime.Python;\n\nusing PyObject obj = module.GetPerson();\n\n// Check type\nif (obj.HasAttr(\"keys\"))\n{\n    // It's a dictionary-like object\n    PyObject keys = obj.GetAttr(\"keys\");\n    // ... work with the object\n}\n</code></pre> <p>See handling Python Objects for more details and examples.</p>"},{"location":"user-guide/type-system/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/type-system/#1-use-specific-types","title":"1. Use Specific Types","text":"<pre><code># Good - specific types\ndef process_user_data(user_id: int, email: str) -&gt; dict[str, str]:\n    return {\"id\": str(user_id), \"email\": email}\n\n# Avoid - too generic\ndef process_data(data: object) -&gt; object:\n    return data\n</code></pre>"},{"location":"user-guide/type-system/#2-document-complex-return-types","title":"2. Document Complex Return Types","text":"<pre><code>def get_analysis_results() -&gt; dict[str, list[tuple[str, float]]]:\n    \"\"\"\n    Returns analysis results.\n\n    Returns:\n        Dictionary mapping category names to lists of (item_name, score) tuples.\n    \"\"\"\n    return {\n        \"positive\": [(\"item1\", 0.8), (\"item2\", 0.9)],\n        \"negative\": [(\"item3\", 0.2)]\n    }\n</code></pre>"},{"location":"user-guide/type-system/#3-handle-none-values","title":"3. Handle None Values","text":"<pre><code>def safe_divide(a: float, b: float) -&gt; float | None:\n    return a / b if b != 0 else None\n</code></pre> <pre><code>double? result = module.SafeDivide(10.0, 3.0);\nif (result is null)\n{\n    Console.WriteLine(\"Division failed\");\n}\nelse\n{\n    Console.WriteLine($\"Result: {result}\");\n}\n</code></pre>"},{"location":"user-guide/type-system/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about environment management</li> <li>Work with NumPy arrays and buffers</li> <li>Explore async functions</li> </ul>"}]}