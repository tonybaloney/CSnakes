// <auto-generated/>
#nullable enable

#pragma warning disable PRTEXP001, PRTEXP002, CS0028

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

partial static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "5a665cc5c27036355ca894cfe2b14b40"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        System.Diagnostics.Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment>? logger;

        private PyObject __func_test_default_str_arg;
        private PyObject __func_test_default_int_arg;
        private PyObject __func_test_default_float_arg;
        private PyObject __func_test_int_literals;
        private PyObject __func_test_optional_int;
        private PyObject __func_test_optional_str;
        private PyObject __func_test_optional_list;
        private PyObject __func_test_optional_any;
        private PyObject __func_test_union_with_default_constant;
        private PyObject __func_test_default_bytes;

        internal TestClassInternal(ILogger<IPythonEnvironment>? logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger?.LogDebug("Importing module {ModuleName}", "test");
                this.module = ThisModule.Import();
                this.__func_test_default_str_arg = module.GetAttr("test_default_str_arg");
                this.__func_test_default_int_arg = module.GetAttr("test_default_int_arg");
                this.__func_test_default_float_arg = module.GetAttr("test_default_float_arg");
                this.__func_test_int_literals = module.GetAttr("test_int_literals");
                this.__func_test_optional_int = module.GetAttr("test_optional_int");
                this.__func_test_optional_str = module.GetAttr("test_optional_str");
                this.__func_test_optional_list = module.GetAttr("test_optional_list");
                this.__func_test_optional_any = module.GetAttr("test_optional_any");
                this.__func_test_union_with_default_constant = module.GetAttr("test_union_with_default_constant");
                this.__func_test_default_bytes = module.GetAttr("test_default_bytes");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger?.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_default_str_arg.Dispose();
                this.__func_test_default_int_arg.Dispose();
                this.__func_test_default_float_arg.Dispose();
                this.__func_test_int_literals.Dispose();
                this.__func_test_optional_int.Dispose();
                this.__func_test_optional_str.Dispose();
                this.__func_test_optional_list.Dispose();
                this.__func_test_optional_any.Dispose();
                this.__func_test_union_with_default_constant.Dispose();
                this.__func_test_default_bytes.Dispose();
                // Bind to new functions
                this.__func_test_default_str_arg = module.GetAttr("test_default_str_arg");
                this.__func_test_default_int_arg = module.GetAttr("test_default_int_arg");
                this.__func_test_default_float_arg = module.GetAttr("test_default_float_arg");
                this.__func_test_int_literals = module.GetAttr("test_int_literals");
                this.__func_test_optional_int = module.GetAttr("test_optional_int");
                this.__func_test_optional_str = module.GetAttr("test_optional_str");
                this.__func_test_optional_list = module.GetAttr("test_optional_list");
                this.__func_test_optional_any = module.GetAttr("test_optional_any");
                this.__func_test_union_with_default_constant = module.GetAttr("test_union_with_default_constant");
                this.__func_test_default_bytes = module.GetAttr("test_default_bytes");
            }
        }

        public void Dispose()
        {
            logger?.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_default_str_arg.Dispose();
            this.__func_test_default_int_arg.Dispose();
            this.__func_test_default_float_arg.Dispose();
            this.__func_test_int_literals.Dispose();
            this.__func_test_optional_int.Dispose();
            this.__func_test_optional_str.Dispose();
            this.__func_test_optional_list.Dispose();
            this.__func_test_optional_any.Dispose();
            this.__func_test_union_with_default_constant.Dispose();
            this.__func_test_default_bytes.Dispose();
            module.Dispose();
        }

        public string TestDefaultStrArg(string a = "hello")
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_default_str_arg");
                PyObject __underlyingPythonFunc = this.__func_test_default_str_arg;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<string, global::CSnakes.Runtime.Python.PyObjectImporters.String>();
                return __return;
            }
        }

        public long TestDefaultIntArg(long a = 1337)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_default_int_arg");
                PyObject __underlyingPythonFunc = this.__func_test_default_int_arg;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public double TestDefaultFloatArg(double a = -1)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_default_float_arg");
                PyObject __underlyingPythonFunc = this.__func_test_default_float_arg;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<double, global::CSnakes.Runtime.Python.PyObjectImporters.Double>();
                return __return;
            }
        }

        public long TestIntLiterals(long a = 0x1337, long b = 0b10101011)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_int_literals");
                PyObject __underlyingPythonFunc = this.__func_test_int_literals;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public bool TestOptionalInt(long? a = null)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_optional_int");
                PyObject __underlyingPythonFunc = this.__func_test_optional_int;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<bool, global::CSnakes.Runtime.Python.PyObjectImporters.Boolean>();
                return __return;
            }
        }

        public bool TestOptionalStr(string? a = null)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_optional_str");
                PyObject __underlyingPythonFunc = this.__func_test_optional_str;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<bool, global::CSnakes.Runtime.Python.PyObjectImporters.Boolean>();
                return __return;
            }
        }

        public bool TestOptionalList(IReadOnlyList<long>? a = null)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_optional_list");
                PyObject __underlyingPythonFunc = this.__func_test_optional_list;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<bool, global::CSnakes.Runtime.Python.PyObjectImporters.Boolean>();
                return __return;
            }
        }

        public bool TestOptionalAny(PyObject? a = null)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_optional_any");
                PyObject __underlyingPythonFunc = this.__func_test_optional_any;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<bool, global::CSnakes.Runtime.Python.PyObjectImporters.Boolean>();
                return __return;
            }
        }

        public string TestUnionWithDefaultConstant(long a = 42)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_union_with_default_constant");
                PyObject __underlyingPythonFunc = this.__func_test_union_with_default_constant;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<string, global::CSnakes.Runtime.Python.PyObjectImporters.String>();
                return __return;
            }
        }

        public string TestUnionWithDefaultConstant(string? a = null)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_union_with_default_constant");
                PyObject __underlyingPythonFunc = this.__func_test_union_with_default_constant;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<string, global::CSnakes.Runtime.Python.PyObjectImporters.String>();
                return __return;
            }
        }

        public byte[] TestDefaultBytes(byte[]? a = null)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_default_bytes");
                PyObject __underlyingPythonFunc = this.__func_test_default_bytes;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<byte[], global::CSnakes.Runtime.Python.PyObjectImporters.ByteArray>();
                return __return;
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>test_default_str_arg</c>:
    /// <code><![CDATA[
    /// def test_default_str_arg(a: str = "hello") -> str: ...
    /// ]]></code>
    /// </summary>
    string TestDefaultStrArg(string a = "hello");

    /// <summary>
    /// Invokes the Python function <c>test_default_int_arg</c>:
    /// <code><![CDATA[
    /// def test_default_int_arg(a: int = 1337) -> int: ...
    /// ]]></code>
    /// </summary>
    long TestDefaultIntArg(long a = 1337);

    /// <summary>
    /// Invokes the Python function <c>test_default_float_arg</c>:
    /// <code><![CDATA[
    /// def test_default_float_arg(a: float = -1) -> float: ...
    /// ]]></code>
    /// </summary>
    double TestDefaultFloatArg(double a = -1);

    /// <summary>
    /// Invokes the Python function <c>test_int_literals</c>:
    /// <code><![CDATA[
    /// def test_int_literals(a: int = 0x1337, b: int = 0b10101011) -> int: ...
    /// ]]></code>
    /// </summary>
    long TestIntLiterals(long a = 0x1337, long b = 0b10101011);

    /// <summary>
    /// Invokes the Python function <c>test_optional_int</c>:
    /// <code><![CDATA[
    /// def test_optional_int(a: Optional[int] = None) -> bool: ...
    /// ]]></code>
    /// </summary>
    bool TestOptionalInt(long? a = null);

    /// <summary>
    /// Invokes the Python function <c>test_optional_str</c>:
    /// <code><![CDATA[
    /// def test_optional_str(a: Optional[str] = None) -> bool: ...
    /// ]]></code>
    /// </summary>
    bool TestOptionalStr(string? a = null);

    /// <summary>
    /// Invokes the Python function <c>test_optional_list</c>:
    /// <code><![CDATA[
    /// def test_optional_list(a: Optional[list[int]] = None) -> bool: ...
    /// ]]></code>
    /// </summary>
    bool TestOptionalList(IReadOnlyList<long>? a = null);

    /// <summary>
    /// Invokes the Python function <c>test_optional_any</c>:
    /// <code><![CDATA[
    /// def test_optional_any(a: Optional[Any] = None) -> bool: ...
    /// ]]></code>
    /// </summary>
    bool TestOptionalAny(PyObject? a = null);

    /// <summary>
    /// Invokes the Python function <c>test_union_with_default_constant</c>:
    /// <code><![CDATA[
    /// def test_union_with_default_constant(a: Union[int, str] = 42) -> str: ...
    /// ]]></code>
    /// </summary>
    string TestUnionWithDefaultConstant(long a = 42);

    /// <summary>
    /// Invokes the Python function <c>test_union_with_default_constant</c>:
    /// <code><![CDATA[
    /// def test_union_with_default_constant(a: Union[int, str] = 42) -> str: ...
    /// ]]></code>
    /// </summary>
    string TestUnionWithDefaultConstant(string? a = null);

    /// <summary>
    /// Invokes the Python function <c>test_default_bytes</c>:
    /// <code><![CDATA[
    /// def test_default_bytes(a: bytes = b"hello") -> bytes: ...
    /// ]]></code>
    /// </summary>
    byte[] TestDefaultBytes(byte[]? a = null);
}

file static class ThisModule
{
    public static PyObject Import() =>
        CSnakes.Runtime.Python.Import.ImportModule("test");
}
