// <auto-generated/>
#nullable enable

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;
using System.Threading.Tasks;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "f4b38aa4460ae1cf4b9b313e39886c85"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment> logger;

        private PyObject __func_test_str_actually_returns_int;
        private PyObject __func_test_str_actually_returns_float;
        private PyObject __func_test_str_actually_returns_list;
        private PyObject __func_test_str_actually_returns_tuple;
        private PyObject __func_test_tuple_actually_returns_int;
        private PyObject __func_test_tuple_actually_returns_float;
        private PyObject __func_test_tuple_actually_returns_list;
        private PyObject __func_test_float_returns_int;
        private PyObject __func_test_float_returns_str;
        private PyObject __func_test_int_returns_float;
        private PyObject __func_test_int_returns_str;
        private PyObject __func_test_int_overflows;

        internal TestClassInternal(ILogger<IPythonEnvironment> logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger.LogDebug("Importing module {ModuleName}", "test");
                module = Import.ImportModule("test");
                this.__func_test_str_actually_returns_int = module.GetAttr("test_str_actually_returns_int");
                this.__func_test_str_actually_returns_float = module.GetAttr("test_str_actually_returns_float");
                this.__func_test_str_actually_returns_list = module.GetAttr("test_str_actually_returns_list");
                this.__func_test_str_actually_returns_tuple = module.GetAttr("test_str_actually_returns_tuple");
                this.__func_test_tuple_actually_returns_int = module.GetAttr("test_tuple_actually_returns_int");
                this.__func_test_tuple_actually_returns_float = module.GetAttr("test_tuple_actually_returns_float");
                this.__func_test_tuple_actually_returns_list = module.GetAttr("test_tuple_actually_returns_list");
                this.__func_test_float_returns_int = module.GetAttr("test_float_returns_int");
                this.__func_test_float_returns_str = module.GetAttr("test_float_returns_str");
                this.__func_test_int_returns_float = module.GetAttr("test_int_returns_float");
                this.__func_test_int_returns_str = module.GetAttr("test_int_returns_str");
                this.__func_test_int_overflows = module.GetAttr("test_int_overflows");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_str_actually_returns_int.Dispose();
                this.__func_test_str_actually_returns_float.Dispose();
                this.__func_test_str_actually_returns_list.Dispose();
                this.__func_test_str_actually_returns_tuple.Dispose();
                this.__func_test_tuple_actually_returns_int.Dispose();
                this.__func_test_tuple_actually_returns_float.Dispose();
                this.__func_test_tuple_actually_returns_list.Dispose();
                this.__func_test_float_returns_int.Dispose();
                this.__func_test_float_returns_str.Dispose();
                this.__func_test_int_returns_float.Dispose();
                this.__func_test_int_returns_str.Dispose();
                this.__func_test_int_overflows.Dispose();
                // Bind to new functions
                this.__func_test_str_actually_returns_int = module.GetAttr("test_str_actually_returns_int");
                this.__func_test_str_actually_returns_float = module.GetAttr("test_str_actually_returns_float");
                this.__func_test_str_actually_returns_list = module.GetAttr("test_str_actually_returns_list");
                this.__func_test_str_actually_returns_tuple = module.GetAttr("test_str_actually_returns_tuple");
                this.__func_test_tuple_actually_returns_int = module.GetAttr("test_tuple_actually_returns_int");
                this.__func_test_tuple_actually_returns_float = module.GetAttr("test_tuple_actually_returns_float");
                this.__func_test_tuple_actually_returns_list = module.GetAttr("test_tuple_actually_returns_list");
                this.__func_test_float_returns_int = module.GetAttr("test_float_returns_int");
                this.__func_test_float_returns_str = module.GetAttr("test_float_returns_str");
                this.__func_test_int_returns_float = module.GetAttr("test_int_returns_float");
                this.__func_test_int_returns_str = module.GetAttr("test_int_returns_str");
                this.__func_test_int_overflows = module.GetAttr("test_int_overflows");
            }
        }

        public void Dispose()
        {
            logger.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_str_actually_returns_int.Dispose();
            this.__func_test_str_actually_returns_float.Dispose();
            this.__func_test_str_actually_returns_list.Dispose();
            this.__func_test_str_actually_returns_tuple.Dispose();
            this.__func_test_tuple_actually_returns_int.Dispose();
            this.__func_test_tuple_actually_returns_float.Dispose();
            this.__func_test_tuple_actually_returns_list.Dispose();
            this.__func_test_float_returns_int.Dispose();
            this.__func_test_float_returns_str.Dispose();
            this.__func_test_int_returns_float.Dispose();
            this.__func_test_int_returns_str.Dispose();
            this.__func_test_int_overflows.Dispose();
            module.Dispose();
        }

        public string TestStrActuallyReturnsInt()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_str_actually_returns_int");
                PyObject __underlyingPythonFunc = this.__func_test_str_actually_returns_int;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<string>();
            }
        }

        public string TestStrActuallyReturnsFloat()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_str_actually_returns_float");
                PyObject __underlyingPythonFunc = this.__func_test_str_actually_returns_float;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<string>();
            }
        }

        public string TestStrActuallyReturnsList()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_str_actually_returns_list");
                PyObject __underlyingPythonFunc = this.__func_test_str_actually_returns_list;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<string>();
            }
        }

        public string TestStrActuallyReturnsTuple()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_str_actually_returns_tuple");
                PyObject __underlyingPythonFunc = this.__func_test_str_actually_returns_tuple;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<string>();
            }
        }

        public (long, long) TestTupleActuallyReturnsInt()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_tuple_actually_returns_int");
                PyObject __underlyingPythonFunc = this.__func_test_tuple_actually_returns_int;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<(long, long)>();
            }
        }

        public (double, double) TestTupleActuallyReturnsFloat()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_tuple_actually_returns_float");
                PyObject __underlyingPythonFunc = this.__func_test_tuple_actually_returns_float;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<(double, double)>();
            }
        }

        public (IReadOnlyList<long>, IReadOnlyList<long>) TestTupleActuallyReturnsList()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_tuple_actually_returns_list");
                PyObject __underlyingPythonFunc = this.__func_test_tuple_actually_returns_list;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<(IReadOnlyList<long>, IReadOnlyList<long>)>();
            }
        }

        public double TestFloatReturnsInt()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_float_returns_int");
                PyObject __underlyingPythonFunc = this.__func_test_float_returns_int;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<double>();
            }
        }

        public double TestFloatReturnsStr()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_float_returns_str");
                PyObject __underlyingPythonFunc = this.__func_test_float_returns_str;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<double>();
            }
        }

        public long TestIntReturnsFloat()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_int_returns_float");
                PyObject __underlyingPythonFunc = this.__func_test_int_returns_float;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<long>();
            }
        }

        public long TestIntReturnsStr()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_int_returns_str");
                PyObject __underlyingPythonFunc = this.__func_test_int_returns_str;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<long>();
            }
        }

        public long TestIntOverflows()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_int_overflows");
                PyObject __underlyingPythonFunc = this.__func_test_int_overflows;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<long>();
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>test_str_actually_returns_int</c>:
    /// <code><![CDATA[
    /// def test_str_actually_returns_int() -> str: ...
    /// ]]></code>
    /// </summary>
    string TestStrActuallyReturnsInt();

    /// <summary>
    /// Invokes the Python function <c>test_str_actually_returns_float</c>:
    /// <code><![CDATA[
    /// def test_str_actually_returns_float() -> str: ...
    /// ]]></code>
    /// </summary>
    string TestStrActuallyReturnsFloat();

    /// <summary>
    /// Invokes the Python function <c>test_str_actually_returns_list</c>:
    /// <code><![CDATA[
    /// def test_str_actually_returns_list() -> str: ...
    /// ]]></code>
    /// </summary>
    string TestStrActuallyReturnsList();

    /// <summary>
    /// Invokes the Python function <c>test_str_actually_returns_tuple</c>:
    /// <code><![CDATA[
    /// def test_str_actually_returns_tuple() -> str: ...
    /// ]]></code>
    /// </summary>
    string TestStrActuallyReturnsTuple();

    /// <summary>
    /// Invokes the Python function <c>test_tuple_actually_returns_int</c>:
    /// <code><![CDATA[
    /// def test_tuple_actually_returns_int() -> tuple[int, int]: ...
    /// ]]></code>
    /// </summary>
    (long, long) TestTupleActuallyReturnsInt();

    /// <summary>
    /// Invokes the Python function <c>test_tuple_actually_returns_float</c>:
    /// <code><![CDATA[
    /// def test_tuple_actually_returns_float() -> tuple[float, float]: ...
    /// ]]></code>
    /// </summary>
    (double, double) TestTupleActuallyReturnsFloat();

    /// <summary>
    /// Invokes the Python function <c>test_tuple_actually_returns_list</c>:
    /// <code><![CDATA[
    /// def test_tuple_actually_returns_list() -> tuple[list[int], list[int]]: ...
    /// ]]></code>
    /// </summary>
    (IReadOnlyList<long>, IReadOnlyList<long>) TestTupleActuallyReturnsList();

    /// <summary>
    /// Invokes the Python function <c>test_float_returns_int</c>:
    /// <code><![CDATA[
    /// def test_float_returns_int() -> float: ...
    /// ]]></code>
    /// </summary>
    double TestFloatReturnsInt();

    /// <summary>
    /// Invokes the Python function <c>test_float_returns_str</c>:
    /// <code><![CDATA[
    /// def test_float_returns_str() -> float: ...
    /// ]]></code>
    /// </summary>
    double TestFloatReturnsStr();

    /// <summary>
    /// Invokes the Python function <c>test_int_returns_float</c>:
    /// <code><![CDATA[
    /// def test_int_returns_float() -> int: ...
    /// ]]></code>
    /// </summary>
    long TestIntReturnsFloat();

    /// <summary>
    /// Invokes the Python function <c>test_int_returns_str</c>:
    /// <code><![CDATA[
    /// def test_int_returns_str() -> int: ...
    /// ]]></code>
    /// </summary>
    long TestIntReturnsStr();

    /// <summary>
    /// Invokes the Python function <c>test_int_overflows</c>:
    /// <code><![CDATA[
    /// def test_int_overflows() -> int: ...
    /// ]]></code>
    /// </summary>
    long TestIntOverflows();
}
