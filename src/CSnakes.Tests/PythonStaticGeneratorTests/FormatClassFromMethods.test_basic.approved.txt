// <auto-generated/>
#nullable enable

#pragma warning disable PRTEXP001, PRTEXP002, CS0028

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

static partial class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "cdff078c9923ffcfa1332534221f796b"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        System.Diagnostics.Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment>? logger;

        private PyObject __func_test_int_float;
        private PyObject __func_test_int_int;
        private PyObject __func_test_float_float;
        private PyObject __func_test_float_int;
        private PyObject __func_test_list_of_ints;
        private PyObject __func_test_two_strings;
        private PyObject __func_test_two_lists_of_strings;
        private PyObject __func_test_two_dicts;
        private PyObject __func_test_bytes;
        private PyObject __func_test_bytes_async;
        private PyObject __func_test_sequence;
        private PyObject __func_test_none_result;
        private PyObject __func_test_var_tuple_result;
        private PyObject __func_test_any_var_tuple_result;

        internal TestClassInternal(ILogger<IPythonEnvironment>? logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger?.LogDebug("Importing module {ModuleName}", "test");
                this.module = ThisModule.Import();
                this.__func_test_int_float = module.GetAttr("test_int_float");
                this.__func_test_int_int = module.GetAttr("test_int_int");
                this.__func_test_float_float = module.GetAttr("test_float_float");
                this.__func_test_float_int = module.GetAttr("test_float_int");
                this.__func_test_list_of_ints = module.GetAttr("test_list_of_ints");
                this.__func_test_two_strings = module.GetAttr("test_two_strings");
                this.__func_test_two_lists_of_strings = module.GetAttr("test_two_lists_of_strings");
                this.__func_test_two_dicts = module.GetAttr("test_two_dicts");
                this.__func_test_bytes = module.GetAttr("test_bytes");
                this.__func_test_bytes_async = module.GetAttr("test_bytes_async");
                this.__func_test_sequence = module.GetAttr("test_sequence");
                this.__func_test_none_result = module.GetAttr("test_none_result");
                this.__func_test_var_tuple_result = module.GetAttr("test_var_tuple_result");
                this.__func_test_any_var_tuple_result = module.GetAttr("test_any_var_tuple_result");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger?.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_int_float.Dispose();
                this.__func_test_int_int.Dispose();
                this.__func_test_float_float.Dispose();
                this.__func_test_float_int.Dispose();
                this.__func_test_list_of_ints.Dispose();
                this.__func_test_two_strings.Dispose();
                this.__func_test_two_lists_of_strings.Dispose();
                this.__func_test_two_dicts.Dispose();
                this.__func_test_bytes.Dispose();
                this.__func_test_bytes_async.Dispose();
                this.__func_test_sequence.Dispose();
                this.__func_test_none_result.Dispose();
                this.__func_test_var_tuple_result.Dispose();
                this.__func_test_any_var_tuple_result.Dispose();
                // Bind to new functions
                this.__func_test_int_float = module.GetAttr("test_int_float");
                this.__func_test_int_int = module.GetAttr("test_int_int");
                this.__func_test_float_float = module.GetAttr("test_float_float");
                this.__func_test_float_int = module.GetAttr("test_float_int");
                this.__func_test_list_of_ints = module.GetAttr("test_list_of_ints");
                this.__func_test_two_strings = module.GetAttr("test_two_strings");
                this.__func_test_two_lists_of_strings = module.GetAttr("test_two_lists_of_strings");
                this.__func_test_two_dicts = module.GetAttr("test_two_dicts");
                this.__func_test_bytes = module.GetAttr("test_bytes");
                this.__func_test_bytes_async = module.GetAttr("test_bytes_async");
                this.__func_test_sequence = module.GetAttr("test_sequence");
                this.__func_test_none_result = module.GetAttr("test_none_result");
                this.__func_test_var_tuple_result = module.GetAttr("test_var_tuple_result");
                this.__func_test_any_var_tuple_result = module.GetAttr("test_any_var_tuple_result");
            }
        }

        public void Dispose()
        {
            logger?.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_int_float.Dispose();
            this.__func_test_int_int.Dispose();
            this.__func_test_float_float.Dispose();
            this.__func_test_float_int.Dispose();
            this.__func_test_list_of_ints.Dispose();
            this.__func_test_two_strings.Dispose();
            this.__func_test_two_lists_of_strings.Dispose();
            this.__func_test_two_dicts.Dispose();
            this.__func_test_bytes.Dispose();
            this.__func_test_bytes_async.Dispose();
            this.__func_test_sequence.Dispose();
            this.__func_test_none_result.Dispose();
            this.__func_test_var_tuple_result.Dispose();
            this.__func_test_any_var_tuple_result.Dispose();
            module.Dispose();
        }

        public double TestIntFloat(long a, double b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_int_float");
                PyObject __underlyingPythonFunc = this.__func_test_int_float;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                var __return = __result_pyObject.BareImportAs<double, global::CSnakes.Runtime.Python.PyObjectImporters.Double>();
                return __return;
            }
        }

        public long TestIntInt(long a, long b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_int_int");
                PyObject __underlyingPythonFunc = this.__func_test_int_int;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public double TestFloatFloat(double a, double b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_float_float");
                PyObject __underlyingPythonFunc = this.__func_test_float_float;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                var __return = __result_pyObject.BareImportAs<double, global::CSnakes.Runtime.Python.PyObjectImporters.Double>();
                return __return;
            }
        }

        public double TestFloatInt(double a, long b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_float_int");
                PyObject __underlyingPythonFunc = this.__func_test_float_int;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                var __return = __result_pyObject.BareImportAs<double, global::CSnakes.Runtime.Python.PyObjectImporters.Double>();
                return __return;
            }
        }

        public IReadOnlyList<long> TestListOfInts(IReadOnlyList<long> a)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_list_of_ints");
                PyObject __underlyingPythonFunc = this.__func_test_list_of_ints;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<IReadOnlyList<long>, global::CSnakes.Runtime.Python.PyObjectImporters.List<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>>();
                return __return;
            }
        }

        public string TestTwoStrings(string a, string b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_two_strings");
                PyObject __underlyingPythonFunc = this.__func_test_two_strings;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                var __return = __result_pyObject.BareImportAs<string, global::CSnakes.Runtime.Python.PyObjectImporters.String>();
                return __return;
            }
        }

        public IReadOnlyList<string> TestTwoListsOfStrings(IReadOnlyList<string> a, IReadOnlyList<string> b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_two_lists_of_strings");
                PyObject __underlyingPythonFunc = this.__func_test_two_lists_of_strings;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                var __return = __result_pyObject.BareImportAs<IReadOnlyList<string>, global::CSnakes.Runtime.Python.PyObjectImporters.List<string, global::CSnakes.Runtime.Python.PyObjectImporters.String>>();
                return __return;
            }
        }

        public IReadOnlyDictionary<string, long> TestTwoDicts(IReadOnlyDictionary<string, long> a, IReadOnlyDictionary<string, long> b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_two_dicts");
                PyObject __underlyingPythonFunc = this.__func_test_two_dicts;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                var __return = __result_pyObject.BareImportAs<IReadOnlyDictionary<string, long>, global::CSnakes.Runtime.Python.PyObjectImporters.Dictionary<string, long, global::CSnakes.Runtime.Python.PyObjectImporters.String, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>>();
                return __return;
            }
        }

        public byte[] TestBytes(ReadOnlySpan<byte> a)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_bytes");
                PyObject __underlyingPythonFunc = this.__func_test_bytes;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<byte[], global::CSnakes.Runtime.Python.PyObjectImporters.ByteArray>();
                return __return;
            }
        }

        public Task<byte[]> TestBytesAsync(ReadOnlySpan<byte> a, CancellationToken cancellationToken = default)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_bytes_async");
                PyObject __underlyingPythonFunc = this.__func_test_bytes_async;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<ICoroutine<byte[], PyObject, PyObject>, global::CSnakes.Runtime.Python.PyObjectImporters.Coroutine<byte[], PyObject, PyObject, global::CSnakes.Runtime.Python.PyObjectImporters.ByteArray, global::CSnakes.Runtime.Python.PyObjectImporters.None>>().AsTask(cancellationToken);
                return __return;
            }
        }

        public IReadOnlyList<long> TestSequence(IReadOnlyList<long> a, long start, long end)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_sequence");
                PyObject __underlyingPythonFunc = this.__func_test_sequence;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject start_pyObject = PyObject.From(start)!;
                using PyObject end_pyObject = PyObject.From(end)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, start_pyObject, end_pyObject);
                var __return = __result_pyObject.BareImportAs<IReadOnlyList<long>, global::CSnakes.Runtime.Python.PyObjectImporters.Sequence<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>>();
                return __return;
            }
        }

        public void TestNoneResult()
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_none_result");
                PyObject __underlyingPythonFunc = this.__func_test_none_result;
                _ = __underlyingPythonFunc.Call();
                return;
            }
        }

        public ImmutableArray<(long, string)> TestVarTupleResult(IReadOnlyList<long> ints, IReadOnlyList<string> strs)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_var_tuple_result");
                PyObject __underlyingPythonFunc = this.__func_test_var_tuple_result;
                using PyObject ints_pyObject = PyObject.From(ints)!;
                using PyObject strs_pyObject = PyObject.From(strs)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(ints_pyObject, strs_pyObject);
                var __return = __result_pyObject.BareImportAs<ImmutableArray<(long, string)>, global::CSnakes.Runtime.Python.PyObjectImporters.VarTuple<(long, string), global::CSnakes.Runtime.Python.PyObjectImporters.Tuple<long, string, global::CSnakes.Runtime.Python.PyObjectImporters.Int64, global::CSnakes.Runtime.Python.PyObjectImporters.String>>>();
                return __return;
            }
        }

        public ImmutableArray<PyObject> TestAnyVarTupleResult(IReadOnlyList<PyObject> a)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_any_var_tuple_result");
                PyObject __underlyingPythonFunc = this.__func_test_any_var_tuple_result;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                var __return = __result_pyObject.BareImportAs<ImmutableArray<PyObject>, global::CSnakes.Runtime.Python.PyObjectImporters.VarTuple<PyObject, global::CSnakes.Runtime.Python.PyObjectImporters.Clone>>();
                return __return;
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>test_int_float</c>:
    /// <code><![CDATA[
    /// def test_int_float(a: int, b: float) -> float: ...
    /// ]]></code>
    /// </summary>
    double TestIntFloat(long a, double b);

    /// <summary>
    /// Invokes the Python function <c>test_int_int</c>:
    /// <code><![CDATA[
    /// def test_int_int(a: int, b: int) -> int: ...
    /// ]]></code>
    /// </summary>
    long TestIntInt(long a, long b);

    /// <summary>
    /// Invokes the Python function <c>test_float_float</c>:
    /// <code><![CDATA[
    /// def test_float_float(a: float, b: float) -> float: ...
    /// ]]></code>
    /// </summary>
    double TestFloatFloat(double a, double b);

    /// <summary>
    /// Invokes the Python function <c>test_float_int</c>:
    /// <code><![CDATA[
    /// def test_float_int(a: float, b: int) -> float: ...
    /// ]]></code>
    /// </summary>
    double TestFloatInt(double a, long b);

    /// <summary>
    /// Invokes the Python function <c>test_list_of_ints</c>:
    /// <code><![CDATA[
    /// def test_list_of_ints(a: list[int]) -> list[int]: ...
    /// ]]></code>
    /// </summary>
    IReadOnlyList<long> TestListOfInts(IReadOnlyList<long> a);

    /// <summary>
    /// Invokes the Python function <c>test_two_strings</c>:
    /// <code><![CDATA[
    /// def test_two_strings(a: str, b: str) -> str: ...
    /// ]]></code>
    /// </summary>
    string TestTwoStrings(string a, string b);

    /// <summary>
    /// Invokes the Python function <c>test_two_lists_of_strings</c>:
    /// <code><![CDATA[
    /// def test_two_lists_of_strings(a: list[str], b: list[str]) -> list[str]: ...
    /// ]]></code>
    /// </summary>
    IReadOnlyList<string> TestTwoListsOfStrings(IReadOnlyList<string> a, IReadOnlyList<string> b);

    /// <summary>
    /// Invokes the Python function <c>test_two_dicts</c>:
    /// <code><![CDATA[
    /// def test_two_dicts(a: dict[str, int], b: dict[str, int]) -> dict[str, int]: ...
    /// ]]></code>
    /// </summary>
    IReadOnlyDictionary<string, long> TestTwoDicts(IReadOnlyDictionary<string, long> a, IReadOnlyDictionary<string, long> b);

    /// <summary>
    /// Invokes the Python function <c>test_bytes</c>:
    /// <code><![CDATA[
    /// def test_bytes(a: bytes) -> bytes: ...
    /// ]]></code>
    /// </summary>
    byte[] TestBytes(ReadOnlySpan<byte> a);

    /// <summary>
    /// Invokes the Python function <c>test_bytes_async</c>:
    /// <code><![CDATA[
    /// async def test_bytes_async(a: bytes) -> bytes: ...
    /// ]]></code>
    /// </summary>
    Task<byte[]> TestBytesAsync(ReadOnlySpan<byte> a, CancellationToken cancellationToken = default);

    /// <summary>
    /// Invokes the Python function <c>test_sequence</c>:
    /// <code><![CDATA[
    /// def test_sequence(a: Sequence[int], start: int, end: int) -> Sequence[int]: ...
    /// ]]></code>
    /// </summary>
    IReadOnlyList<long> TestSequence(IReadOnlyList<long> a, long start, long end);

    /// <summary>
    /// Invokes the Python function <c>test_none_result</c>:
    /// <code><![CDATA[
    /// def test_none_result() -> None: ...
    /// ]]></code>
    /// </summary>
    void TestNoneResult();

    /// <summary>
    /// Invokes the Python function <c>test_var_tuple_result</c>:
    /// <code><![CDATA[
    /// def test_var_tuple_result(ints: list[int], strs: list[str]) -> tuple[tuple[int, str], ...]: ...
    /// ]]></code>
    /// </summary>
    ImmutableArray<(long, string)> TestVarTupleResult(IReadOnlyList<long> ints, IReadOnlyList<string> strs);

    /// <summary>
    /// Invokes the Python function <c>test_any_var_tuple_result</c>:
    /// <code><![CDATA[
    /// def test_any_var_tuple_result(a: list[Any]) -> tuple: ...
    /// ]]></code>
    /// </summary>
    ImmutableArray<PyObject> TestAnyVarTupleResult(IReadOnlyList<PyObject> a);
}

file static class ThisModule
{
    public static PyObject Import() =>
        CSnakes.Runtime.Python.Import.ImportModule("test");
}
