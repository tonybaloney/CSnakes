// <auto-generated/>
#nullable enable

#pragma warning disable PRTEXP001, PRTEXP002, CS0028

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "5d9aaa2919c9c971ca72ce9f9c9c046a"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        System.Diagnostics.Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment>? logger;

        private PyObject __func_test_int;
        private PyObject __func_test_str;
        private PyObject __func_test_any;

        internal TestClassInternal(ILogger<IPythonEnvironment>? logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger?.LogDebug("Importing module {ModuleName}", "test");
                this.module = ThisModule.Import();
                this.__func_test_int = module.GetAttr("test_int");
                this.__func_test_str = module.GetAttr("test_str");
                this.__func_test_any = module.GetAttr("test_any");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger?.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_int.Dispose();
                this.__func_test_str.Dispose();
                this.__func_test_any.Dispose();
                // Bind to new functions
                this.__func_test_int = module.GetAttr("test_int");
                this.__func_test_str = module.GetAttr("test_str");
                this.__func_test_any = module.GetAttr("test_any");
            }
        }

        public void Dispose()
        {
            logger?.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_int.Dispose();
            this.__func_test_str.Dispose();
            this.__func_test_any.Dispose();
            module.Dispose();
        }

        public long? TestInt(long? n)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_int");
                PyObject __underlyingPythonFunc = this.__func_test_int;
                using PyObject n_pyObject = PyObject.From(n)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(n_pyObject);
                if (__result_pyObject.IsNone())
                    return null;
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public string? TestStr(string? s)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_str");
                PyObject __underlyingPythonFunc = this.__func_test_str;
                using PyObject s_pyObject = PyObject.From(s)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(s_pyObject);
                if (__result_pyObject.IsNone())
                    return null;
                var __return = __result_pyObject.BareImportAs<string, global::CSnakes.Runtime.Python.PyObjectImporters.String>();
                return __return;
            }
        }

        public PyObject? TestAny(PyObject? obj)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_any");
                PyObject __underlyingPythonFunc = this.__func_test_any;
                using PyObject obj_pyObject = PyObject.From(obj)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(obj_pyObject);
                if (__result_pyObject.IsNone())
                    return null;
                var __return = __result_pyObject.BareImportAs<PyObject, global::CSnakes.Runtime.Python.PyObjectImporters.Runtime<PyObject>>();
                return __return;
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>test_int</c>:
    /// <code><![CDATA[
    /// def test_int(n: Optional[int]) -> Optional[int]: ...
    /// ]]></code>
    /// </summary>
    long? TestInt(long? n);

    /// <summary>
    /// Invokes the Python function <c>test_str</c>:
    /// <code><![CDATA[
    /// def test_str(s: Optional[str]) -> Optional[str]: ...
    /// ]]></code>
    /// </summary>
    string? TestStr(string? s);

    /// <summary>
    /// Invokes the Python function <c>test_any</c>:
    /// <code><![CDATA[
    /// def test_any(obj: Optional[Any]) -> Optional[Any]: ...
    /// ]]></code>
    /// </summary>
    PyObject? TestAny(PyObject? obj);
}

file static class ThisModule
{
    public static PyObject Import() =>
        CSnakes.Runtime.Python.Import.ImportModule("test");
}
