// <auto-generated/>
#nullable enable

#pragma warning disable PRTEXP001, PRTEXP002, CS0028

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

partial static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "23de8055a8d335ac4f27b8f0d169a839"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        System.Diagnostics.Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment>? logger;

        private PyObject __func_test_log_debug;
        private PyObject __func_test_log_info;
        private PyObject __func_test_params_message;
        private PyObject __func_test_log_exception;
        private PyObject __func_test_many_entries;
        private PyObject __func_test_named_logger;

        internal TestClassInternal(ILogger<IPythonEnvironment>? logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger?.LogDebug("Importing module {ModuleName}", "test");
                this.module = ThisModule.Import();
                this.__func_test_log_debug = module.GetAttr("test_log_debug");
                this.__func_test_log_info = module.GetAttr("test_log_info");
                this.__func_test_params_message = module.GetAttr("test_params_message");
                this.__func_test_log_exception = module.GetAttr("test_log_exception");
                this.__func_test_many_entries = module.GetAttr("test_many_entries");
                this.__func_test_named_logger = module.GetAttr("test_named_logger");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger?.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_log_debug.Dispose();
                this.__func_test_log_info.Dispose();
                this.__func_test_params_message.Dispose();
                this.__func_test_log_exception.Dispose();
                this.__func_test_many_entries.Dispose();
                this.__func_test_named_logger.Dispose();
                // Bind to new functions
                this.__func_test_log_debug = module.GetAttr("test_log_debug");
                this.__func_test_log_info = module.GetAttr("test_log_info");
                this.__func_test_params_message = module.GetAttr("test_params_message");
                this.__func_test_log_exception = module.GetAttr("test_log_exception");
                this.__func_test_many_entries = module.GetAttr("test_many_entries");
                this.__func_test_named_logger = module.GetAttr("test_named_logger");
            }
        }

        public void Dispose()
        {
            logger?.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_log_debug.Dispose();
            this.__func_test_log_info.Dispose();
            this.__func_test_params_message.Dispose();
            this.__func_test_log_exception.Dispose();
            this.__func_test_many_entries.Dispose();
            this.__func_test_named_logger.Dispose();
            module.Dispose();
        }

        public void TestLogDebug()
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_log_debug");
                PyObject __underlyingPythonFunc = this.__func_test_log_debug;
                _ = __underlyingPythonFunc.Call();
                return;
            }
        }

        public void TestLogInfo()
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_log_info");
                PyObject __underlyingPythonFunc = this.__func_test_log_info;
                _ = __underlyingPythonFunc.Call();
                return;
            }
        }

        public void TestParamsMessage()
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_params_message");
                PyObject __underlyingPythonFunc = this.__func_test_params_message;
                _ = __underlyingPythonFunc.Call();
                return;
            }
        }

        public void TestLogException()
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_log_exception");
                PyObject __underlyingPythonFunc = this.__func_test_log_exception;
                _ = __underlyingPythonFunc.Call();
                return;
            }
        }

        public void TestManyEntries(long count)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_many_entries");
                PyObject __underlyingPythonFunc = this.__func_test_many_entries;
                using PyObject count_pyObject = PyObject.From(count)!;
                _ = __underlyingPythonFunc.Call(count_pyObject);
                return;
            }
        }

        public void TestNamedLogger(string name)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_named_logger");
                PyObject __underlyingPythonFunc = this.__func_test_named_logger;
                using PyObject name_pyObject = PyObject.From(name)!;
                _ = __underlyingPythonFunc.Call(name_pyObject);
                return;
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>test_log_debug</c>:
    /// <code><![CDATA[
    /// def test_log_debug() -> None: ...
    /// ]]></code>
    /// </summary>
    void TestLogDebug();

    /// <summary>
    /// Invokes the Python function <c>test_log_info</c>:
    /// <code><![CDATA[
    /// def test_log_info() -> None: ...
    /// ]]></code>
    /// </summary>
    void TestLogInfo();

    /// <summary>
    /// Invokes the Python function <c>test_params_message</c>:
    /// <code><![CDATA[
    /// def test_params_message() -> None: ...
    /// ]]></code>
    /// </summary>
    void TestParamsMessage();

    /// <summary>
    /// Invokes the Python function <c>test_log_exception</c>:
    /// <code><![CDATA[
    /// def test_log_exception() -> None: ...
    /// ]]></code>
    /// </summary>
    void TestLogException();

    /// <summary>
    /// Invokes the Python function <c>test_many_entries</c>:
    /// <code><![CDATA[
    /// def test_many_entries(count: int) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestManyEntries(long count);

    /// <summary>
    /// Invokes the Python function <c>test_named_logger</c>:
    /// <code><![CDATA[
    /// def test_named_logger(name: str) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestNamedLogger(string name);
}

file static class ThisModule
{
    public static PyObject Import() =>
        CSnakes.Runtime.Python.Import.ImportModule("test");
}
