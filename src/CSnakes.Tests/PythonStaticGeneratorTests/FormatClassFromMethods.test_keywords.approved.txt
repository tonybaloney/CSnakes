// <auto-generated/>
#nullable enable

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "453a550ce910f33b6d3df277b5fb4a4f"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment> logger;

        private PyObject __func_test_keyword_only;
        private PyObject __func_test_named_keyword_only;

        internal TestClassInternal(ILogger<IPythonEnvironment> logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger.LogDebug("Importing module {ModuleName}", "test");
                module = Import.ImportModule("test");
                this.__func_test_keyword_only = module.GetAttr("test_keyword_only");
                this.__func_test_named_keyword_only = module.GetAttr("test_named_keyword_only");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_keyword_only.Dispose();
                this.__func_test_named_keyword_only.Dispose();
                // Bind to new functions
                this.__func_test_keyword_only = module.GetAttr("test_keyword_only");
                this.__func_test_named_keyword_only = module.GetAttr("test_named_keyword_only");
            }
        }

        public void Dispose()
        {
            logger.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_keyword_only.Dispose();
            this.__func_test_named_keyword_only.Dispose();
            module.Dispose();
        }

        public void TestKeywordOnly(string a, long b, PyObject[]? args = null)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_keyword_only");
                PyObject __underlyingPythonFunc = this.__func_test_keyword_only;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.CallWithKeywordArguments([a_pyObject, ..args ?? []], ["b"], [b_pyObject], null);
                return;
            }
        }

        public void TestNamedKeywordOnly(string a, long b = 0, PyObject[]? args = null)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_named_keyword_only");
                PyObject __underlyingPythonFunc = this.__func_test_named_keyword_only;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.CallWithKeywordArguments([a_pyObject, ..args ?? []], ["b"], [b_pyObject], null);
                return;
            }
        }
    }
}

public interface ITestClass : IReloadableModuleImport
{
    void TestKeywordOnly(string a, long b, PyObject[]? args = null);
    void TestNamedKeywordOnly(string a, long b = 0, PyObject[]? args = null);
}
