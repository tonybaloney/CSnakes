// <auto-generated/>
#nullable enable

#pragma warning disable PRTEXP001, PRTEXP002

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "090d99d4499abcbe5d10a2bc81daf1c6"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment>? logger;

        private PyObject __func_positional_only_args;
        private PyObject __func_collect_star_args;
        private PyObject __func_keyword_only_args;
        private PyObject __func_collect_star_star_kwargs;
        private PyObject __func_positional_and_kwargs;
        private PyObject __func_collect_star_args_and_keyword_only_args;
        private PyObject __func_naming1;
        private PyObject __func_naming2;
        private PyObject __func_naming3;

        internal TestClassInternal(ILogger<IPythonEnvironment>? logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger?.LogDebug("Importing module {ModuleName}", "test");
                this.module = ThisModule.Import();
                this.__func_positional_only_args = module.GetAttr("positional_only_args");
                this.__func_collect_star_args = module.GetAttr("collect_star_args");
                this.__func_keyword_only_args = module.GetAttr("keyword_only_args");
                this.__func_collect_star_star_kwargs = module.GetAttr("collect_star_star_kwargs");
                this.__func_positional_and_kwargs = module.GetAttr("positional_and_kwargs");
                this.__func_collect_star_args_and_keyword_only_args = module.GetAttr("collect_star_args_and_keyword_only_args");
                this.__func_naming1 = module.GetAttr("naming1");
                this.__func_naming2 = module.GetAttr("naming2");
                this.__func_naming3 = module.GetAttr("naming3");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger?.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_positional_only_args.Dispose();
                this.__func_collect_star_args.Dispose();
                this.__func_keyword_only_args.Dispose();
                this.__func_collect_star_star_kwargs.Dispose();
                this.__func_positional_and_kwargs.Dispose();
                this.__func_collect_star_args_and_keyword_only_args.Dispose();
                this.__func_naming1.Dispose();
                this.__func_naming2.Dispose();
                this.__func_naming3.Dispose();
                // Bind to new functions
                this.__func_positional_only_args = module.GetAttr("positional_only_args");
                this.__func_collect_star_args = module.GetAttr("collect_star_args");
                this.__func_keyword_only_args = module.GetAttr("keyword_only_args");
                this.__func_collect_star_star_kwargs = module.GetAttr("collect_star_star_kwargs");
                this.__func_positional_and_kwargs = module.GetAttr("positional_and_kwargs");
                this.__func_collect_star_args_and_keyword_only_args = module.GetAttr("collect_star_args_and_keyword_only_args");
                this.__func_naming1 = module.GetAttr("naming1");
                this.__func_naming2 = module.GetAttr("naming2");
                this.__func_naming3 = module.GetAttr("naming3");
            }
        }

        public void Dispose()
        {
            logger?.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_positional_only_args.Dispose();
            this.__func_collect_star_args.Dispose();
            this.__func_keyword_only_args.Dispose();
            this.__func_collect_star_star_kwargs.Dispose();
            this.__func_positional_and_kwargs.Dispose();
            this.__func_collect_star_args_and_keyword_only_args.Dispose();
            this.__func_naming1.Dispose();
            this.__func_naming2.Dispose();
            this.__func_naming3.Dispose();
            module.Dispose();
        }

        public long PositionalOnlyArgs(long a, long b, long c)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "positional_only_args");
                PyObject __underlyingPythonFunc = this.__func_positional_only_args;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject c_pyObject = PyObject.From(c)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject, c_pyObject);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public long CollectStarArgs(long a, long b, PyObject[]? args = null)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "collect_star_args");
                PyObject __underlyingPythonFunc = this.__func_collect_star_args;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.CallWithArgs([a_pyObject, b_pyObject, ..args ?? []]);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public long KeywordOnlyArgs(long a, long b, long c)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "keyword_only_args");
                PyObject __underlyingPythonFunc = this.__func_keyword_only_args;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject c_pyObject = PyObject.From(c)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.CallWithKeywordArguments([a_pyObject], ["b", "c"], [b_pyObject, c_pyObject], null);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public long CollectStarStarKwargs(long a, long b, IReadOnlyDictionary<string, PyObject>? kwargs = null)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "collect_star_star_kwargs");
                PyObject __underlyingPythonFunc = this.__func_collect_star_star_kwargs;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.CallWithKeywordArguments([a_pyObject, b_pyObject], [], [], kwargs);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public long PositionalAndKwargs(long a, long b, long c, IReadOnlyDictionary<string, PyObject>? kwargs = null)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "positional_and_kwargs");
                PyObject __underlyingPythonFunc = this.__func_positional_and_kwargs;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject c_pyObject = PyObject.From(c)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.CallWithKeywordArguments([a_pyObject, b_pyObject], ["c"], [c_pyObject], kwargs);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public long CollectStarArgsAndKeywordOnlyArgs(long a, long b, long c, PyObject[]? args = null)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "collect_star_args_and_keyword_only_args");
                PyObject __underlyingPythonFunc = this.__func_collect_star_args_and_keyword_only_args;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject c_pyObject = PyObject.From(c)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.CallWithKeywordArguments([a_pyObject, b_pyObject, ..args ?? []], ["c"], [c_pyObject], null);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public void Naming1(PyObject[]? varArg = null)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "naming1");
                PyObject __underlyingPythonFunc = this.__func_naming1;
                _ = __underlyingPythonFunc.CallWithArgs([..varArg ?? []]);
                return;
            }
        }

        public void Naming2(PyObject posArg, PyObject regArg, PyObject[]? varArg = null)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "naming2");
                PyObject __underlyingPythonFunc = this.__func_naming2;
                using PyObject posArg_pyObject = PyObject.From(posArg)!;
                using PyObject regArg_pyObject = PyObject.From(regArg)!;
                _ = __underlyingPythonFunc.CallWithArgs([posArg_pyObject, regArg_pyObject, ..varArg ?? []]);
                return;
            }
        }

        public void Naming3(PyObject posArg, PyObject regArg, PyObject kwArg, PyObject[]? varArg = null, IReadOnlyDictionary<string, PyObject>? kwArgs = null)
        {
            using (GIL.Acquire())
            {
                logger?.LogDebug("Invoking Python function: {FunctionName}", "naming3");
                PyObject __underlyingPythonFunc = this.__func_naming3;
                using PyObject posArg_pyObject = PyObject.From(posArg)!;
                using PyObject regArg_pyObject = PyObject.From(regArg)!;
                using PyObject kwArg_pyObject = PyObject.From(kwArg)!;
                _ = __underlyingPythonFunc.CallWithKeywordArguments([posArg_pyObject, ..varArg ?? []], ["reg_arg", "kw_arg"], [regArg_pyObject, kwArg_pyObject], kwArgs);
                return;
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>positional_only_args</c>:
    /// <code><![CDATA[
    /// def positional_only_args(a: int, /, b: int, c: int) -> int: ...
    /// ]]></code>
    /// </summary>
    long PositionalOnlyArgs(long a, long b, long c);

    /// <summary>
    /// Invokes the Python function <c>collect_star_args</c>:
    /// <code><![CDATA[
    /// def collect_star_args(a: int, b: int, *args) -> int: ...
    /// ]]></code>
    /// </summary>
    long CollectStarArgs(long a, long b, PyObject[]? args = null);

    /// <summary>
    /// Invokes the Python function <c>keyword_only_args</c>:
    /// <code><![CDATA[
    /// def keyword_only_args(a: int, *, b: int, c: int) -> int: ...
    /// ]]></code>
    /// </summary>
    long KeywordOnlyArgs(long a, long b, long c);

    /// <summary>
    /// Invokes the Python function <c>collect_star_star_kwargs</c>:
    /// <code><![CDATA[
    /// def collect_star_star_kwargs(a: int, b: int, **kwargs) -> int: ...
    /// ]]></code>
    /// </summary>
    long CollectStarStarKwargs(long a, long b, IReadOnlyDictionary<string, PyObject>? kwargs = null);

    /// <summary>
    /// Invokes the Python function <c>positional_and_kwargs</c>:
    /// <code><![CDATA[
    /// def positional_and_kwargs(a: int, b: int, *, c: int, **kwargs) -> int: ...
    /// ]]></code>
    /// </summary>
    long PositionalAndKwargs(long a, long b, long c, IReadOnlyDictionary<string, PyObject>? kwargs = null);

    /// <summary>
    /// Invokes the Python function <c>collect_star_args_and_keyword_only_args</c>:
    /// <code><![CDATA[
    /// def collect_star_args_and_keyword_only_args(a: int, b: int, *args, c: int) -> int: ...
    /// ]]></code>
    /// </summary>
    long CollectStarArgsAndKeywordOnlyArgs(long a, long b, long c, PyObject[]? args = null);

    /// <summary>
    /// Invokes the Python function <c>naming1</c>:
    /// <code><![CDATA[
    /// def naming1(*var_arg) -> None: ...
    /// ]]></code>
    /// </summary>
    void Naming1(PyObject[]? varArg = null);

    /// <summary>
    /// Invokes the Python function <c>naming2</c>:
    /// <code><![CDATA[
    /// def naming2(pos_arg, /, reg_arg, *var_arg) -> None: ...
    /// ]]></code>
    /// </summary>
    void Naming2(PyObject posArg, PyObject regArg, PyObject[]? varArg = null);

    /// <summary>
    /// Invokes the Python function <c>naming3</c>:
    /// <code><![CDATA[
    /// def naming3(pos_arg, /, *var_arg, reg_arg, kw_arg, **kw_args) -> None: ...
    /// ]]></code>
    /// </summary>
    void Naming3(PyObject posArg, PyObject regArg, PyObject kwArg, PyObject[]? varArg = null, IReadOnlyDictionary<string, PyObject>? kwArgs = null);
}

file static class ThisModule
{
    public static PyObject Import() =>
        CSnakes.Runtime.Python.Import.ImportModule("test");
}
