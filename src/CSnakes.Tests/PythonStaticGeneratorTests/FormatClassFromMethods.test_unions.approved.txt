// <auto-generated/>
#nullable enable

#pragma warning disable PRTEXP001, PRTEXP002, CS0028

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "416c47521c21c3056f6e522820113730"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        System.Diagnostics.Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment>? logger;

        private PyObject __func_test_union_basic;
        private PyObject __func_test_union_return;
        private PyObject __func_test_multiple_unions;
        private PyObject __func_test_multiple_complex;

        internal TestClassInternal(ILogger<IPythonEnvironment>? logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger?.LogDebug("Importing module {ModuleName}", "test");
                this.module = ThisModule.Import();
                this.__func_test_union_basic = module.GetAttr("test_union_basic");
                this.__func_test_union_return = module.GetAttr("test_union_return");
                this.__func_test_multiple_unions = module.GetAttr("test_multiple_unions");
                this.__func_test_multiple_complex = module.GetAttr("test_multiple_complex");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger?.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_union_basic.Dispose();
                this.__func_test_union_return.Dispose();
                this.__func_test_multiple_unions.Dispose();
                this.__func_test_multiple_complex.Dispose();
                // Bind to new functions
                this.__func_test_union_basic = module.GetAttr("test_union_basic");
                this.__func_test_union_return = module.GetAttr("test_union_return");
                this.__func_test_multiple_unions = module.GetAttr("test_multiple_unions");
                this.__func_test_multiple_complex = module.GetAttr("test_multiple_complex");
            }
        }

        public void Dispose()
        {
            logger?.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_union_basic.Dispose();
            this.__func_test_union_return.Dispose();
            this.__func_test_multiple_unions.Dispose();
            this.__func_test_multiple_complex.Dispose();
            module.Dispose();
        }

        public void TestUnionBasic(long a)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_union_basic");
                PyObject __underlyingPythonFunc = this.__func_test_union_basic;
                using PyObject a_pyObject = PyObject.From(a)!;
                _ = __underlyingPythonFunc.Call(a_pyObject);
                return;
            }
        }

        public void TestUnionBasic(string a)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_union_basic");
                PyObject __underlyingPythonFunc = this.__func_test_union_basic;
                using PyObject a_pyObject = PyObject.From(a)!;
                _ = __underlyingPythonFunc.Call(a_pyObject);
                return;
            }
        }

        public void TestUnionBasic(byte[] a)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_union_basic");
                PyObject __underlyingPythonFunc = this.__func_test_union_basic;
                using PyObject a_pyObject = PyObject.From(a)!;
                _ = __underlyingPythonFunc.Call(a_pyObject);
                return;
            }
        }

        public PyObject TestUnionReturn()
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_union_return");
                PyObject __underlyingPythonFunc = this.__func_test_union_return;
                PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject;
            }
        }

        public void TestMultipleUnions(long a, long b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_multiple_unions");
                PyObject __underlyingPythonFunc = this.__func_test_multiple_unions;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                _ = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return;
            }
        }

        public void TestMultipleUnions(long a, string b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_multiple_unions");
                PyObject __underlyingPythonFunc = this.__func_test_multiple_unions;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                _ = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return;
            }
        }

        public void TestMultipleUnions(bool a, long b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_multiple_unions");
                PyObject __underlyingPythonFunc = this.__func_test_multiple_unions;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                _ = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return;
            }
        }

        public void TestMultipleUnions(bool a, string b)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_multiple_unions");
                PyObject __underlyingPythonFunc = this.__func_test_multiple_unions;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                _ = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return;
            }
        }

        public void TestMultipleComplex(PyObject a)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_multiple_complex");
                PyObject __underlyingPythonFunc = this.__func_test_multiple_complex;
                using PyObject a_pyObject = PyObject.From(a)!;
                _ = __underlyingPythonFunc.Call(a_pyObject);
                return;
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>test_union_basic</c>:
    /// <code><![CDATA[
    /// def test_union_basic(a: Union[int, str, bytes]) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestUnionBasic(long a);

    /// <summary>
    /// Invokes the Python function <c>test_union_basic</c>:
    /// <code><![CDATA[
    /// def test_union_basic(a: Union[int, str, bytes]) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestUnionBasic(string a);

    /// <summary>
    /// Invokes the Python function <c>test_union_basic</c>:
    /// <code><![CDATA[
    /// def test_union_basic(a: Union[int, str, bytes]) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestUnionBasic(byte[] a);

    /// <summary>
    /// Invokes the Python function <c>test_union_return</c>:
    /// <code><![CDATA[
    /// def test_union_return() -> Union[int, str, bytes]: ...
    /// ]]></code>
    /// </summary>
    PyObject TestUnionReturn();

    /// <summary>
    /// Invokes the Python function <c>test_multiple_unions</c>:
    /// <code><![CDATA[
    /// def test_multiple_unions(a: Union[int, bool], b: Union[int, str]) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestMultipleUnions(long a, long b);

    /// <summary>
    /// Invokes the Python function <c>test_multiple_unions</c>:
    /// <code><![CDATA[
    /// def test_multiple_unions(a: Union[int, bool], b: Union[int, str]) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestMultipleUnions(long a, string b);

    /// <summary>
    /// Invokes the Python function <c>test_multiple_unions</c>:
    /// <code><![CDATA[
    /// def test_multiple_unions(a: Union[int, bool], b: Union[int, str]) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestMultipleUnions(bool a, long b);

    /// <summary>
    /// Invokes the Python function <c>test_multiple_unions</c>:
    /// <code><![CDATA[
    /// def test_multiple_unions(a: Union[int, bool], b: Union[int, str]) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestMultipleUnions(bool a, string b);

    /// <summary>
    /// Invokes the Python function <c>test_multiple_complex</c>:
    /// <code><![CDATA[
    /// def test_multiple_complex(a: Union[A, B]) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestMultipleComplex(PyObject a);
}

file static class ThisModule
{
    public static PyObject Import() =>
        CSnakes.Runtime.Python.Import.ImportModule("test");
}
