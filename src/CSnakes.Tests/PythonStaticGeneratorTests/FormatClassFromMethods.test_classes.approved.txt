// <auto-generated/>
#nullable enable

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

partial static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "fdfa2bc776c8aba7180b9529baa58657"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment> logger;

        private PyObject __func_test_person;
        private PyObject __func_test_not_heap;
        private PyObject __func_test_collection;

        internal TestClassInternal(ILogger<IPythonEnvironment> logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger.LogDebug("Importing module {ModuleName}", "test");
                module = Import.ImportModule("test");
                this.__func_test_person = module.GetAttr("test_person");
                this.__func_test_not_heap = module.GetAttr("test_not_heap");
                this.__func_test_collection = module.GetAttr("test_collection");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_person.Dispose();
                this.__func_test_not_heap.Dispose();
                this.__func_test_collection.Dispose();
                // Bind to new functions
                this.__func_test_person = module.GetAttr("test_person");
                this.__func_test_not_heap = module.GetAttr("test_not_heap");
                this.__func_test_collection = module.GetAttr("test_collection");
            }
        }

        public void Dispose()
        {
            logger.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_person.Dispose();
            this.__func_test_not_heap.Dispose();
            this.__func_test_collection.Dispose();
            module.Dispose();
        }

        public PyObject TestPerson()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_person");
                PyObject __underlyingPythonFunc = this.__func_test_person;
                PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject;
            }
        }

        public PyObject TestNotHeap()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_not_heap");
                PyObject __underlyingPythonFunc = this.__func_test_not_heap;
                PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject;
            }
        }

        public IReadOnlyList<PyObject> TestCollection()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_collection");
                PyObject __underlyingPythonFunc = this.__func_test_collection;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<IReadOnlyList<PyObject>>();
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>test_person</c>:
    /// <code><![CDATA[
    /// def test_person() -> Person: ...
    /// ]]></code>
    /// </summary>
    PyObject TestPerson();

    /// <summary>
    /// Invokes the Python function <c>test_not_heap</c>:
    /// <code><![CDATA[
    /// def test_not_heap() -> Person: ...
    /// ]]></code>
    /// </summary>
    PyObject TestNotHeap();

    /// <summary>
    /// Invokes the Python function <c>test_collection</c>:
    /// <code><![CDATA[
    /// def test_collection() -> list[Person]: ...
    /// ]]></code>
    /// </summary>
    IReadOnlyList<PyObject> TestCollection();
}
