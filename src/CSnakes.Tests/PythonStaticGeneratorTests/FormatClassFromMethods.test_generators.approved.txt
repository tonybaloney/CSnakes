// <auto-generated/>
#nullable enable

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "657bc350954200f5d7103a2587de60ae"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment> logger;

        private PyObject __func_example_generator;
        private PyObject __func_test_normal_generator;

        internal TestClassInternal(ILogger<IPythonEnvironment> logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger.LogDebug("Importing module {ModuleName}", "test");
                module = Import.ImportModule("test");
                this.__func_example_generator = module.GetAttr("example_generator");
                this.__func_test_normal_generator = module.GetAttr("test_normal_generator");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_example_generator.Dispose();
                this.__func_test_normal_generator.Dispose();
                // Bind to new functions
                this.__func_example_generator = module.GetAttr("example_generator");
                this.__func_test_normal_generator = module.GetAttr("test_normal_generator");
            }
        }

        public void Dispose()
        {
            logger.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_example_generator.Dispose();
            this.__func_test_normal_generator.Dispose();
            module.Dispose();
        }

        public IGeneratorIterator<string, long, bool> ExampleGenerator(long length)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "example_generator");
                PyObject __underlyingPythonFunc = this.__func_example_generator;
                using PyObject length_pyObject = PyObject.From(length)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(length_pyObject);
                return __result_pyObject.As<IGeneratorIterator<string, long, bool>>();
            }
        }

        public IGeneratorIterator<string, PyObject, PyObject> TestNormalGenerator()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_normal_generator");
                PyObject __underlyingPythonFunc = this.__func_test_normal_generator;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<IGeneratorIterator<string, PyObject, PyObject>>();
            }
        }
    }
}

public interface ITestClass : IReloadableModuleImport
{
    IGeneratorIterator<string, long, bool> ExampleGenerator(long length);
    IGeneratorIterator<string, PyObject, PyObject> TestNormalGenerator();
}
