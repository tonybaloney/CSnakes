// <auto-generated/>
#nullable enable

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "a79b4174160168ab0b48d0fb84a33b9b"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment> logger;

        private PyObject __func_test_number;
        private PyObject __func_reload_module;

        internal TestClassInternal(ILogger<IPythonEnvironment> logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger.LogDebug("Importing module {ModuleName}", "test");
                module = Import.ImportModule("test");
                this.__func_test_number = module.GetAttr("test_number");
                this.__func_reload_module = module.GetAttr("reload_module");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_number.Dispose();
                this.__func_reload_module.Dispose();
                // Bind to new functions
                this.__func_test_number = module.GetAttr("test_number");
                this.__func_reload_module = module.GetAttr("reload_module");
            }
        }

        public void Dispose()
        {
            logger.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_number.Dispose();
            this.__func_reload_module.Dispose();
            module.Dispose();
        }

        public long TestNumber()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_number");
                PyObject __underlyingPythonFunc = this.__func_test_number;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject.As<long>();
            }
        }

        public PyObject ReloadModule()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "reload_module");
                PyObject __underlyingPythonFunc = this.__func_reload_module;
                PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return __result_pyObject;
            }
        }
    }
}

public interface ITestClass : IReloadableModuleImport
{
    long TestNumber();
    new PyObject ReloadModule();
}
