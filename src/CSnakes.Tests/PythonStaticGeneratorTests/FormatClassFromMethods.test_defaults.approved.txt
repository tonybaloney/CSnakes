// <auto-generated/>
#nullable enable

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "1848cdfa4c35d7dd55e968358f065089"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment> logger;

        private PyObject __func_test_default_str_arg;
        private PyObject __func_test_default_int_arg;
        private PyObject __func_test_default_float_arg;
        private PyObject __func_test_int_literals;
        private PyObject __func_test_optional_int;
        private PyObject __func_test_optional_str;
        private PyObject __func_test_optional_list;
        private PyObject __func_test_optional_any;

        internal TestClassInternal(ILogger<IPythonEnvironment> logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger.LogDebug("Importing module {ModuleName}", "test");
                module = Import.ImportModule("test");
                this.__func_test_default_str_arg = module.GetAttr("test_default_str_arg");
                this.__func_test_default_int_arg = module.GetAttr("test_default_int_arg");
                this.__func_test_default_float_arg = module.GetAttr("test_default_float_arg");
                this.__func_test_int_literals = module.GetAttr("test_int_literals");
                this.__func_test_optional_int = module.GetAttr("test_optional_int");
                this.__func_test_optional_str = module.GetAttr("test_optional_str");
                this.__func_test_optional_list = module.GetAttr("test_optional_list");
                this.__func_test_optional_any = module.GetAttr("test_optional_any");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_default_str_arg.Dispose();
                this.__func_test_default_int_arg.Dispose();
                this.__func_test_default_float_arg.Dispose();
                this.__func_test_int_literals.Dispose();
                this.__func_test_optional_int.Dispose();
                this.__func_test_optional_str.Dispose();
                this.__func_test_optional_list.Dispose();
                this.__func_test_optional_any.Dispose();
                // Bind to new functions
                this.__func_test_default_str_arg = module.GetAttr("test_default_str_arg");
                this.__func_test_default_int_arg = module.GetAttr("test_default_int_arg");
                this.__func_test_default_float_arg = module.GetAttr("test_default_float_arg");
                this.__func_test_int_literals = module.GetAttr("test_int_literals");
                this.__func_test_optional_int = module.GetAttr("test_optional_int");
                this.__func_test_optional_str = module.GetAttr("test_optional_str");
                this.__func_test_optional_list = module.GetAttr("test_optional_list");
                this.__func_test_optional_any = module.GetAttr("test_optional_any");
            }
        }

        public void Dispose()
        {
            logger.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_default_str_arg.Dispose();
            this.__func_test_default_int_arg.Dispose();
            this.__func_test_default_float_arg.Dispose();
            this.__func_test_int_literals.Dispose();
            this.__func_test_optional_int.Dispose();
            this.__func_test_optional_str.Dispose();
            this.__func_test_optional_list.Dispose();
            this.__func_test_optional_any.Dispose();
            module.Dispose();
        }

        public string TestDefaultStrArg(string a = "hello")
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_default_str_arg");
                PyObject __underlyingPythonFunc = this.__func_test_default_str_arg;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<string>();
            }
        }

        public long TestDefaultIntArg(long a = 1337)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_default_int_arg");
                PyObject __underlyingPythonFunc = this.__func_test_default_int_arg;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<long>();
            }
        }

        public double TestDefaultFloatArg(double a = -1)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_default_float_arg");
                PyObject __underlyingPythonFunc = this.__func_test_default_float_arg;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<double>();
            }
        }

        public long TestIntLiterals(long a = 0x1337, long b = 0b10101011)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_int_literals");
                PyObject __underlyingPythonFunc = this.__func_test_int_literals;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return __result_pyObject.As<long>();
            }
        }

        public bool TestOptionalInt(long? a = null)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_optional_int");
                PyObject __underlyingPythonFunc = this.__func_test_optional_int;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<bool>();
            }
        }

        public bool TestOptionalStr(string? a = null)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_optional_str");
                PyObject __underlyingPythonFunc = this.__func_test_optional_str;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<bool>();
            }
        }

        public bool TestOptionalList(IReadOnlyList<long>? a = null)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_optional_list");
                PyObject __underlyingPythonFunc = this.__func_test_optional_list;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<bool>();
            }
        }

        public bool TestOptionalAny(PyObject? a = null)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_optional_any");
                PyObject __underlyingPythonFunc = this.__func_test_optional_any;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<bool>();
            }
        }
    }
}

public interface ITestClass : IReloadableModuleImport
{
    string TestDefaultStrArg(string a = "hello");
    long TestDefaultIntArg(long a = 1337);
    double TestDefaultFloatArg(double a = -1);
    long TestIntLiterals(long a = 0x1337, long b = 0b10101011);
    bool TestOptionalInt(long? a = null);
    bool TestOptionalStr(string? a = null);
    bool TestOptionalList(IReadOnlyList<long>? a = null);
    bool TestOptionalAny(PyObject? a = null);
}
