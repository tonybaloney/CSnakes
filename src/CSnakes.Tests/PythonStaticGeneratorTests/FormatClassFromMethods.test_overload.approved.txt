// <auto-generated/>
#nullable enable

#pragma warning disable PRTEXP001, PRTEXP002, CS0028

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "50d4e1588d53cd8135e0a516426e8436"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        System.Diagnostics.Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment>? logger;

        private PyObject __func_test_overload_supported_type;
        private PyObject __func_test_overload_unsupported_type;
        private PyObject __func_test_same_types_but_different_defaults;

        internal TestClassInternal(ILogger<IPythonEnvironment>? logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger?.LogDebug("Importing module {ModuleName}", "test");
                this.module = ThisModule.Import();
                this.__func_test_overload_supported_type = module.GetAttr("test_overload_supported_type");
                this.__func_test_overload_unsupported_type = module.GetAttr("test_overload_unsupported_type");
                this.__func_test_same_types_but_different_defaults = module.GetAttr("test_same_types_but_different_defaults");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger?.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_overload_supported_type.Dispose();
                this.__func_test_overload_unsupported_type.Dispose();
                this.__func_test_same_types_but_different_defaults.Dispose();
                // Bind to new functions
                this.__func_test_overload_supported_type = module.GetAttr("test_overload_supported_type");
                this.__func_test_overload_unsupported_type = module.GetAttr("test_overload_unsupported_type");
                this.__func_test_same_types_but_different_defaults = module.GetAttr("test_same_types_but_different_defaults");
            }
        }

        public void Dispose()
        {
            logger?.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_overload_supported_type.Dispose();
            this.__func_test_overload_unsupported_type.Dispose();
            this.__func_test_same_types_but_different_defaults.Dispose();
            module.Dispose();
        }

        public long TestOverloadSupportedType(long x)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_overload_supported_type");
                PyObject __underlyingPythonFunc = this.__func_test_overload_supported_type;
                using PyObject x_pyObject = PyObject.From(x)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(x_pyObject);
                var __return = __result_pyObject.BareImportAs<long, global::CSnakes.Runtime.Python.PyObjectImporters.Int64>();
                return __return;
            }
        }

        public double TestOverloadSupportedType(double x)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_overload_supported_type");
                PyObject __underlyingPythonFunc = this.__func_test_overload_supported_type;
                using PyObject x_pyObject = PyObject.From(x)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(x_pyObject);
                var __return = __result_pyObject.BareImportAs<double, global::CSnakes.Runtime.Python.PyObjectImporters.Double>();
                return __return;
            }
        }

        public PyObject TestOverloadSupportedType(PyObject x)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_overload_supported_type");
                PyObject __underlyingPythonFunc = this.__func_test_overload_supported_type;
                using PyObject x_pyObject = PyObject.From(x)!;
                PyObject __result_pyObject = __underlyingPythonFunc.Call(x_pyObject);
                return __result_pyObject;
            }
        }

        public string TestOverloadUnsupportedType(PyObject x)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_overload_unsupported_type");
                PyObject __underlyingPythonFunc = this.__func_test_overload_unsupported_type;
                using PyObject x_pyObject = PyObject.From(x)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(x_pyObject);
                var __return = __result_pyObject.BareImportAs<string, global::CSnakes.Runtime.Python.PyObjectImporters.String>();
                return __return;
            }
        }

        public void TestSameTypesButDifferentDefaults(PyObject? future = null, long depth = 1, long? limit = null)
        {
            using (GIL.Acquire())
            {
                this.logger?.LogDebug("Invoking Python function: {FunctionName}", "test_same_types_but_different_defaults");
                PyObject __underlyingPythonFunc = this.__func_test_same_types_but_different_defaults;
                using PyObject future_pyObject = PyObject.From(future)!;
                using PyObject depth_pyObject = PyObject.From(depth)!;
                using PyObject limit_pyObject = PyObject.From(limit)!;
                _ = __underlyingPythonFunc.Call([future_pyObject], default, [new("depth", depth_pyObject), new("limit", limit_pyObject)], default);
                return;
            }
        }
    }
}

/// <summary>
/// Represents functions of the Python module <c>test</c>.
/// </summary>
public interface ITestClass : IReloadableModuleImport
{
    /// <summary>
    /// Invokes the Python function <c>test_overload_supported_type</c>:
    /// <code><![CDATA[
    /// def test_overload_supported_type(x: int) -> int: ...
    /// ]]></code>
    /// </summary>
    long TestOverloadSupportedType(long x);

    /// <summary>
    /// Invokes the Python function <c>test_overload_supported_type</c>:
    /// <code><![CDATA[
    /// def test_overload_supported_type(x: float) -> float: ...
    /// ]]></code>
    /// </summary>
    double TestOverloadSupportedType(double x);

    /// <summary>
    /// Invokes the Python function <c>test_overload_supported_type</c>:
    /// <code><![CDATA[
    /// def test_overload_supported_type(x: Any) -> Any: ...
    /// ]]></code>
    /// </summary>
    PyObject TestOverloadSupportedType(PyObject x);

    /// <summary>
    /// Invokes the Python function <c>test_overload_unsupported_type</c>:
    /// <code><![CDATA[
    /// def test_overload_unsupported_type(x: StrType) -> str: ...
    /// ]]></code>
    /// </summary>
    string TestOverloadUnsupportedType(PyObject x);

    /// <summary>
    /// Invokes the Python function <c>test_same_types_but_different_defaults</c>:
    /// <code><![CDATA[
    /// def test_same_types_but_different_defaults(future: None = None, /, *, depth: int = 1, limit: Optional[int] = None) -> None: ...
    /// ]]></code>
    /// </summary>
    void TestSameTypesButDifferentDefaults(PyObject? future = null, long depth = 1, long? limit = null);
}

file static class ThisModule
{
    public static PyObject Import() =>
        CSnakes.Runtime.Python.Import.ImportModule("test");
}
