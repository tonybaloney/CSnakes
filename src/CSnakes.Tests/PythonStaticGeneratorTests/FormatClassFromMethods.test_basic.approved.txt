// <auto-generated/>
#nullable enable

using CSnakes.Runtime;
using CSnakes.Runtime.Python;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;

using Microsoft.Extensions.Logging;

[assembly: MetadataUpdateHandler(typeof(Python.Generated.Tests.TestClassExtensions))]

namespace Python.Generated.Tests;

public static class TestClassExtensions
{
    private static ITestClass? instance;

    private static ReadOnlySpan<byte> HotReloadHash => "c869d3a7ab525465cb794827044b4601"u8;

    public static ITestClass TestClass(this IPythonEnvironment env)
    {
        if (instance is null)
        {
            instance = new TestClassInternal(env.Logger);
        }
        Debug.Assert(!env.IsDisposed());
        return instance;
    }

    public static void UpdateApplication(Type[]? updatedTypes)
    {
        instance?.ReloadModule();
    }

    private class TestClassInternal : ITestClass
    {
        private PyObject module;
        private readonly ILogger<IPythonEnvironment> logger;

        private PyObject __func_test_int_float;
        private PyObject __func_test_int_int;
        private PyObject __func_test_float_float;
        private PyObject __func_test_float_int;
        private PyObject __func_test_list_of_ints;
        private PyObject __func_test_two_strings;
        private PyObject __func_test_two_lists_of_strings;
        private PyObject __func_test_two_dicts;
        private PyObject __func_test_bytes;
        private PyObject __func_test_sequence;
        private PyObject __func_test_none_result;

        internal TestClassInternal(ILogger<IPythonEnvironment> logger)
        {
            this.logger = logger;
            using (GIL.Acquire())
            {
                logger.LogDebug("Importing module {ModuleName}", "test");
                module = Import.ImportModule("test");
                this.__func_test_int_float = module.GetAttr("test_int_float");
                this.__func_test_int_int = module.GetAttr("test_int_int");
                this.__func_test_float_float = module.GetAttr("test_float_float");
                this.__func_test_float_int = module.GetAttr("test_float_int");
                this.__func_test_list_of_ints = module.GetAttr("test_list_of_ints");
                this.__func_test_two_strings = module.GetAttr("test_two_strings");
                this.__func_test_two_lists_of_strings = module.GetAttr("test_two_lists_of_strings");
                this.__func_test_two_dicts = module.GetAttr("test_two_dicts");
                this.__func_test_bytes = module.GetAttr("test_bytes");
                this.__func_test_sequence = module.GetAttr("test_sequence");
                this.__func_test_none_result = module.GetAttr("test_none_result");
            }
        }

        void IReloadableModuleImport.ReloadModule()
        {
            logger.LogDebug("Reloading module {ModuleName}", "test");
            using (GIL.Acquire())
            {
                Import.ReloadModule(ref module);
                // Dispose old functions
                this.__func_test_int_float.Dispose();
                this.__func_test_int_int.Dispose();
                this.__func_test_float_float.Dispose();
                this.__func_test_float_int.Dispose();
                this.__func_test_list_of_ints.Dispose();
                this.__func_test_two_strings.Dispose();
                this.__func_test_two_lists_of_strings.Dispose();
                this.__func_test_two_dicts.Dispose();
                this.__func_test_bytes.Dispose();
                this.__func_test_sequence.Dispose();
                this.__func_test_none_result.Dispose();
                // Bind to new functions
                this.__func_test_int_float = module.GetAttr("test_int_float");
                this.__func_test_int_int = module.GetAttr("test_int_int");
                this.__func_test_float_float = module.GetAttr("test_float_float");
                this.__func_test_float_int = module.GetAttr("test_float_int");
                this.__func_test_list_of_ints = module.GetAttr("test_list_of_ints");
                this.__func_test_two_strings = module.GetAttr("test_two_strings");
                this.__func_test_two_lists_of_strings = module.GetAttr("test_two_lists_of_strings");
                this.__func_test_two_dicts = module.GetAttr("test_two_dicts");
                this.__func_test_bytes = module.GetAttr("test_bytes");
                this.__func_test_sequence = module.GetAttr("test_sequence");
                this.__func_test_none_result = module.GetAttr("test_none_result");
            }
        }

        public void Dispose()
        {
            logger.LogDebug("Disposing module {ModuleName}", "test");
            this.__func_test_int_float.Dispose();
            this.__func_test_int_int.Dispose();
            this.__func_test_float_float.Dispose();
            this.__func_test_float_int.Dispose();
            this.__func_test_list_of_ints.Dispose();
            this.__func_test_two_strings.Dispose();
            this.__func_test_two_lists_of_strings.Dispose();
            this.__func_test_two_dicts.Dispose();
            this.__func_test_bytes.Dispose();
            this.__func_test_sequence.Dispose();
            this.__func_test_none_result.Dispose();
            module.Dispose();
        }

        public double TestIntFloat(long a, double b)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_int_float");
                PyObject __underlyingPythonFunc = this.__func_test_int_float;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return __result_pyObject.As<double>();
            }
        }

        public long TestIntInt(long a, long b)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_int_int");
                PyObject __underlyingPythonFunc = this.__func_test_int_int;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return __result_pyObject.As<long>();
            }
        }

        public double TestFloatFloat(double a, double b)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_float_float");
                PyObject __underlyingPythonFunc = this.__func_test_float_float;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return __result_pyObject.As<double>();
            }
        }

        public double TestFloatInt(double a, long b)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_float_int");
                PyObject __underlyingPythonFunc = this.__func_test_float_int;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return __result_pyObject.As<double>();
            }
        }

        public IReadOnlyList<long> TestListOfInts(IReadOnlyList<long> a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_list_of_ints");
                PyObject __underlyingPythonFunc = this.__func_test_list_of_ints;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<IReadOnlyList<long>>();
            }
        }

        public string TestTwoStrings(string a, string b)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_two_strings");
                PyObject __underlyingPythonFunc = this.__func_test_two_strings;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return __result_pyObject.As<string>();
            }
        }

        public IReadOnlyList<string> TestTwoListsOfStrings(IReadOnlyList<string> a, IReadOnlyList<string> b)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_two_lists_of_strings");
                PyObject __underlyingPythonFunc = this.__func_test_two_lists_of_strings;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return __result_pyObject.As<IReadOnlyList<string>>();
            }
        }

        public IReadOnlyDictionary<string, long> TestTwoDicts(IReadOnlyDictionary<string, long> a, IReadOnlyDictionary<string, long> b)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_two_dicts");
                PyObject __underlyingPythonFunc = this.__func_test_two_dicts;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject b_pyObject = PyObject.From(b)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, b_pyObject);
                return __result_pyObject.As<IReadOnlyDictionary<string, long>>();
            }
        }

        public byte[] TestBytes(byte[] a)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_bytes");
                PyObject __underlyingPythonFunc = this.__func_test_bytes;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject);
                return __result_pyObject.As<byte[]>();
            }
        }

        public IReadOnlyList<long> TestSequence(IReadOnlyList<long> a, long start, long end)
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_sequence");
                PyObject __underlyingPythonFunc = this.__func_test_sequence;
                using PyObject a_pyObject = PyObject.From(a)!;
                using PyObject start_pyObject = PyObject.From(start)!;
                using PyObject end_pyObject = PyObject.From(end)!;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call(a_pyObject, start_pyObject, end_pyObject);
                return __result_pyObject.As<IReadOnlyList<long>>();
            }
        }

        public void TestNoneResult()
        {
            using (GIL.Acquire())
            {
                logger.LogDebug("Invoking Python function: {FunctionName}", "test_none_result");
                PyObject __underlyingPythonFunc = this.__func_test_none_result;
                using PyObject __result_pyObject = __underlyingPythonFunc.Call();
                return;
            }
        }
    }
}

public interface ITestClass : IReloadableModuleImport
{
    double TestIntFloat(long a, double b);
    long TestIntInt(long a, long b);
    double TestFloatFloat(double a, double b);
    double TestFloatInt(double a, long b);
    IReadOnlyList<long> TestListOfInts(IReadOnlyList<long> a);
    string TestTwoStrings(string a, string b);
    IReadOnlyList<string> TestTwoListsOfStrings(IReadOnlyList<string> a, IReadOnlyList<string> b);
    IReadOnlyDictionary<string, long> TestTwoDicts(IReadOnlyDictionary<string, long> a, IReadOnlyDictionary<string, long> b);
    byte[] TestBytes(byte[] a);
    IReadOnlyList<long> TestSequence(IReadOnlyList<long> a, long start, long end);
    void TestNoneResult();
}
